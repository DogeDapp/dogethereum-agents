package org.dogethereum.dogesubmitter.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.3.1.
 */
public class ClaimManager extends Contract {
    private static final String BINARY = "0x608060405260006002556001600355600160045560058055610e1060065534801561002957600080fd5b5060405160208062005aa28339810180604052810190808051906020019092919050505080600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050615a03806200009f6000396000f30060806040526004361061011d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630b9f68631461012857806318a10ca61461017157806329118a9b146101d65780632a4febe41461023b5780632b2299281461026c578063312f63071461029757806333289a46146102c257806333337b83146103035780633352f1a41461038757806340732c89146103d057806341b3d185146103ee57806344983f1a1461041957806349d83b1c1461046257806355e4286b146104e3578063795ea18e146105375780637dbd28321461057c5780637f47c9841461064c5780639c57588f14610677578063d1daeede146106e4578063e1254fba14610771578063fc7e286d146107c8575b61012561081f565b50005b34801561013457600080fd5b5061016f600480360381019080803560001916906020019092919080359060200190929190803560001916906020019092919050505061086f565b005b34801561017d57600080fd5b506101c06004803603810190808035600019169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506109eb565b6040518082815260200191505060405180910390f35b3480156101e257600080fd5b506102256004803603810190808035600019169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610dcd565b6040518082815260200191505060405180910390f35b34801561024757600080fd5b5061026a6004803603810190808035600019169060200190929190505050611079565b005b34801561027857600080fd5b50610281611117565b6040518082815260200191505060405180910390f35b3480156102a357600080fd5b506102ac61111d565b6040518082815260200191505060405180910390f35b3480156102ce57600080fd5b506102ed60048036038101908080359060200190929190505050611123565b6040518082815260200191505060405180910390f35b34801561030f57600080fd5b5061036260048036038101908080356000191690602001909291908035906020019092919080359060200190929190803560001916906020019092919080356000191690602001909291905050506112b6565b6040518083815260200182600019166000191681526020019250505060405180910390f35b34801561039357600080fd5b506103b66004803603810190808035600019169060200190929190505050611953565b604051808215151515815260200191505060405180910390f35b6103d861081f565b6040518082815260200191505060405180910390f35b3480156103fa57600080fd5b5061040361221a565b6040518082815260200191505060405180910390f35b34801561042557600080fd5b506104486004803603810190808035600019169060200190929190505050612220565b604051808215151515815260200191505060405180910390f35b34801561046e57600080fd5b506104e1600480360381019080803560001916906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612805565b005b3480156104ef57600080fd5b50610512600480360381019080803560001916906020019092919050505061297a565b6040518083815260200182600019166000191681526020019250505060405180910390f35b34801561054357600080fd5b5061056660048036038101908080356000191690602001909291905050506130a5565b6040518082815260200191505060405180910390f35b34801561058857600080fd5b506105ab6004803603810190808035600019169060200190929190505050613212565b60405180876000191660001916815260200186600019166000191681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001965050505050505060405180910390f35b34801561065857600080fd5b5061066161328e565b6040518082815260200191505060405180910390f35b34801561068357600080fd5b506106c66004803603810190808035600019169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613294565b60405180826000191660001916815260200191505060405180910390f35b3480156106f057600080fd5b506107536004803603810190808035600019169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506132fa565b60405180826000191660001916815260200191505060405180910390f35b34801561077d57600080fd5b506107b2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506134ff565b6040518082815260200191505060405180910390f35b3480156107d457600080fd5b50610809600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613547565b6040518082815260200191505060405180910390f35b600061082b333461355f565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b6000808460016000826000191660001916815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108eb57600080fd5b6001600087600019166000191681526020019081526020016000209250826001015491506000851415610926576109218261367e565b61093b565b600185141561093a5761093982856136f8565b5b5b4383600501819055507f6aca43abf7f8b3d42a7b07592153d9769e69c1e0cfee51c513efb388851ceea0868460020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16876040518084600019166000191681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a1505050505050565b60008060006007600086600019166000191681526020019081526020016000209150610c438261020060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015460001916600019168152602001600282015481526020016003820154815260200160048201805480602002602001604051908101604052809291908181526020018280548015610b1f57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610ad5575b505050505081526020016007820154815260200160098201548152602001600a820160009054906101000a900460ff16151515158152602001600a820160019054906101000a900460ff16151515158152602001600a820160029054906101000a900460ff16151515158152602001600a820160039054906101000a900460ff166006811115610bab57fe5b6006811115610bb657fe5b8152602001600b8201805480602002602001604051908101604052809291908181526020018280548015610c0d57602002820191906000526020600020905b81546000191681526020019060010190808311610bf5575b50505050508152602001600c8201548152602001600d8201548152602001600f8201548152602001601082015481525050613826565b1515610c4e57600080fd5b6001151582600a0160019054906101000a900460ff161515141515610c7257600080fd5b8160060160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508160060160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009055806000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055507faafcd902e5217659ba924addbacae78ebf6a7c77409df0d0065b9ebca01298738585836040518084600019166000191681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a1809250505092915050565b60008060076000856000191660001916815260200190815260200160002090506110238161020060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015460001916600019168152602001600282015481526020016003820154815260200160048201805480602002602001604051908101604052809291908181526020018280548015610eff57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610eb5575b505050505081526020016007820154815260200160098201548152602001600a820160009054906101000a900460ff16151515158152602001600a820160019054906101000a900460ff16151515158152602001600a820160029054906101000a900460ff16151515158152602001600a820160039054906101000a900460ff166006811115610f8b57fe5b6006811115610f9657fe5b8152602001600b8201805480602002602001604051908101604052809291908181526020018280548015610fed57602002820191906000526020600020905b81546000191681526020019060010190808311610fd5575b50505050508152602001600c8201548152602001600d8201548152602001600f8201548152602001601082015481525050613826565b151561102e57600080fd5b8060060160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491505092915050565b6000806001600084600019166000191681526020019081526020016000209150816001015490506110a98161385d565b156110e2576110dd838360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683613cc9565b611112565b611111838360020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683613dbe565b5b505050565b60055481565b60025481565b6000816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561117257600080fd5b816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055503373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015611204573d6000803e3d6000fd5b507f4482101800a5c2e900f4156e57e05e19ffd7b366cde579553d723fd3abb2180e3383604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a16000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000806000806000806004546000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611364577f94bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa33600061c38c60405180836001026000191681526020018281526020019250505060405180910390a161c38c600080600102905095509550611945565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b8558d128c8c8c8c8c336040518763ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808760001916600019168152602001868152602001858152602001846000191660001916815260200183600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200196505050505050506040805180830381600087803b15801561146057600080fd5b505af1158015611474573d6000803e3d6000fd5b505050506040513d604081101561148a57600080fd5b8101908080519060200190929190805190602001909291905050508094508195505050600084141515611509577f94bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa3383856040518083600019166000191681526020018281526020019250505060405180910390a1838395509550611945565b829150600760008360001916600019168152602001908152602001600020905061175f8161020060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201546000191660001916815260200160028201548152602001600382015481526020016004820180548060200260200160405190810160405280929190818152602001828054801561163b57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116115f1575b505050505081526020016007820154815260200160098201548152602001600a820160009054906101000a900460ff16151515158152602001600a820160019054906101000a900460ff16151515158152602001600a820160029054906101000a900460ff16151515158152602001600a820160039054906101000a900460ff1660068111156116c757fe5b60068111156116d257fe5b8152602001600b820180548060200260200160405190810160405280929190818152602001828054801561172957602002820191906000526020600020905b81546000191681526020019060010190808311611711575b50505050508152602001600c8201548152602001600d8201548152602001600f8201548152602001601082015481525050613826565b156117ba577f94bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa338261c3a06040518083600019166000191681526020018281526020019250505060405180910390a161c3a08295509550611945565b338160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008160070181905550600081600a0160016101000a81548160ff021916908315150217905550600081600a0160026101000a81548160ff021916908315150217905550600081600a0160006101000a81548160ff02191690831515021790555043816002018190555043816009018190555082816001018160001916905550600081600a0160036101000a81548160ff0219169083600681111561189e57fe5b02179055508881600301819055506118b98233600454613eb3565b507fd861ddd0a177fc2f7e05d851f42663399d0759ad0e74e2ab7b79570f0979e2928233856040518084600019166000191681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018260001916600019168152602001935050505060405180910390a1600083955095505b505050509550959350505050565b6000806007600084600019166000191681526020019081526020016000209050611ba98161020060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015460001916600019168152602001600282015481526020016003820154815260200160048201805480602002602001604051908101604052809291908181526020018280548015611a8557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611a3b575b505050505081526020016007820154815260200160098201548152602001600a820160009054906101000a900460ff16151515158152602001600a820160019054906101000a900460ff16151515158152602001600a820160029054906101000a900460ff16151515158152602001600a820160039054906101000a900460ff166006811115611b1157fe5b6006811115611b1c57fe5b8152602001600b8201805480602002602001604051908101604052809291908181526020018280548015611b7357602002820191906000526020600020905b81546000191681526020019060010190808311611b5b575b50505050508152602001600c8201548152602001600d8201548152602001600f8201548152602001601082015481525050613826565b1515611c01577f94bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa338361c3a06040518083600019166000191681526020018281526020019250505060405180910390a160009150612214565b80600a0160009054906101000a900460ff1615611c6a577f94bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa338361c3aa6040518083600019166000191681526020018281526020019250505060405180910390a160009150612214565b60055481600201544303111515611ccd577f94bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa338361c36e6040518083600019166000191681526020018281526020019250505060405180910390a160009150612214565b806009015443111515611d2c577f94bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa338361c36e6040518083600019166000191681526020018281526020019250505060405180910390a160009150612214565b806004018054905081600701541015611d91577f94bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa338361c3aa6040518083600019166000191681526020018281526020019250505060405180910390a160009150612214565b600181600a0160016101000a81548160ff02191690831515021790555080600a0160029054906101000a900460ff1615611f5857600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166369ecc3cf82600101546040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082600019166000191681526020019150506040805180830381600087803b158015611e6157600080fd5b505af1158015611e75573d6000803e3d6000fd5b505050506040513d6040811015611e8b57600080fd5b81019080805190602001909291908051906020019092919050505050507f68e40e41ba461c4741bd7c670fcb849251f74cd1a4a945ced513e85ceaf4b8eb838260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600101546040518084600019166000191681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018260001916600019168152602001935050505060405180910390a161220f565b60008160040180549050141561205057600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663797af62782600101546040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082600019166000191681526020019150506040805180830381600087803b15801561200457600080fd5b505af1158015612018573d6000803e3d6000fd5b505050506040513d604081101561202e57600080fd5b8101908080519060200190929190805190602001909291905050505050612134565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d93a05e782600101546040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082600019166000191681526020019150506040805180830381600087803b1580156120ec57600080fd5b505af1158015612100573d6000803e3d6000fd5b505050506040513d604081101561211657600080fd5b81019080805190602001909291908051906020019092919050505050505b612162838260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166109eb565b507f1dc10db1a6fc712a92bf5ec914a579635a58ab4afbef2890cc90404d6753cef8838260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600101546040518084600019166000191681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018260001916600019168152602001935050505060405180910390a15b600191505b50919050565b60045481565b600080600060076000856000191660001916815260200190815260200160002091506124788261020060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201546000191660001916815260200160028201548152602001600382015481526020016004820180548060200260200160405190810160405280929190818152602001828054801561235457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161230a575b505050505081526020016007820154815260200160098201548152602001600a820160009054906101000a900460ff16151515158152602001600a820160019054906101000a900460ff16151515158152602001600a820160029054906101000a900460ff16151515158152602001600a820160039054906101000a900460ff1660068111156123e057fe5b60068111156123eb57fe5b8152602001600b820180548060200260200160405190810160405280929190818152602001828054801561244257602002820191906000526020600020905b8154600019168152602001906001019080831161242a575b50505050508152602001600c8201548152602001600d8201548152602001600f8201548152602001601082015481525050613826565b15156124d0577f94bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa338461c3a06040518083600019166000191681526020018281526020019250505060405180910390a1600092506127fe565b81600a0160019054906101000a900460ff1615612539577f94bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa338461c3b46040518083600019166000191681526020018281526020019250505060405180910390a1600092506127fe565b81600a0160009054906101000a900460ff16156125a2577f94bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa338461c3aa6040518083600019166000191681526020018281526020019250505060405180910390a1600092506127fe565b8160040180549050826007015410156127f957612623848360040184600701548154811015156125ce57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166132fa565b90508082600801600084600401856007015481548110151561264157fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081600019169055507f6d3b2a0e9b0833bfb42336839231773ea07aed87bb2fdee34c960696ea11f849848360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600401856007015481548110151561270a57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518085600019166000191681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001826000191660001916815260200194505050505060405180910390a1600182600a0160006101000a81548160ff021916908315150217905550600182600701600082825401925050819055505b600192505b5050919050565b6000808460016000826000191660001916815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561288157600080fd5b60016000876000191660001916815260200190815260200160002092508260010154915060008514156128bd576128b882856142c3565b6128d2565b60018514156128d1576128d08285614645565b5b5b4383600401819055507f0e087715b76f524024cd6e444f1f458d023fa489778a7e8fe2623f2702e4fa89868460030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518083600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1505050505050565b60008060008060008592506007600084600019166000191681526020019081526020016000209150612bd88261020060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015460001916600019168152602001600282015481526020016003820154815260200160048201805480602002602001604051908101604052809291908181526020018280548015612ab457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612a6a575b505050505081526020016007820154815260200160098201548152602001600a820160009054906101000a900460ff16151515158152602001600a820160019054906101000a900460ff16151515158152602001600a820160029054906101000a900460ff16151515158152602001600a820160039054906101000a900460ff166006811115612b4057fe5b6006811115612b4b57fe5b8152602001600b8201805480602002602001604051908101604052809291908181526020018280548015612ba257602002820191906000526020600020905b81546000191681526020019060010190808311612b8a575b50505050508152602001600c8201548152602001600d8201548152602001600f8201548152602001601082015481525050613826565b1515612c34577f94bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa338361c3a06040518083600019166000191681526020018281526020019250505060405180910390a161c3a0839450945061309d565b81600a0160019054906101000a900460ff1615612ca1577f94bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa338361c3b46040518083600019166000191681526020018281526020019250505060405180910390a161c3b4839450945061309d565b6004546000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015612d3f577f94bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa338361c38c6040518083600019166000191681526020018281526020019250505060405180910390a161c38c839450945061309d565b60008260050160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141515612de0577f94bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa338361c3be6040518083600019166000191681526020018281526020019250505060405180910390a161c3be839450945061309d565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cffd46dc876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082600019166000191681526020019150506040805180830381600087803b158015612e7857600080fd5b505af1158015612e8c573d6000803e3d6000fd5b505050506040513d6040811015612ea257600080fd5b8101908080519060200190929190805190602001909291905050505080915050600081141515612f25577f94bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa3383826040518083600019166000191681526020018281526020019250505060405180910390a18060008060010290509450945061309d565b612f328333600454613eb3565b506005548260090160008282540192505081905550816004013390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505081600401805490508260050160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600182600a0160036101000a81548160ff0219169083600681111561301d57fe5b02179055507f4e4ec862758a1fd984d86a07836cbea0bb7aec069cc98cd7a543266b270e42e483336040518083600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1600083945094505b505050915091565b60008060006001600085600019166000191681526020019081526020016000209150816001015490504360010260001916826004015460010260001916836005015460010260405180826000191660001916815260200191505060405180910390a2816004015482600501541180156131245750600582600501540143115b1561316157613158848360020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683613dbe565b6000925061320b565b816005015482600401541015801561317f5750600582600401540143115b156131bc576131b3848360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683613cc9565b6000925061320b565b7f9ef9211bc259194e13c8ea0c5eaa84f4ea7ee397793b93a8c3b4962e503045de8461c36e6040518083600019166000191681526020018281526020019250505060405180910390a161c36e92505b5050919050565b60016020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040154908060050154905086565b60065481565b600060076000846000191660001916815260200190815260200160002060080160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600080600085336002546040518084600019166000191681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140182815260200193505050506040518091039020915060016000836000191660001916815260200190815260200160002090508181600001816000191690555085816001018160001916905550838160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550848160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555043816004018190555043816005018190555060016002600082825401925050819055507f389e5c47177785f5b4206b5ddf96c41970bd23c868249b4074ac4f7be5d269038285876040518084600019166000191681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a181925050509392505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60006020528060005260406000206000915090505481565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055503073ffffffffffffffffffffffffffffffffffffffff16316000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115151561360f57600080fd5b7fd15c9547ea5c06670c0010ce19bc32d54682a4b3801ece7f3ab0c3f17106b4bb8282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15050565b60006007600083600019166000191681526020019081526020016000209050600160068111156136aa57fe5b81600a0160039054906101000a900460ff1660068111156136c757fe5b14156136f457600281600a0160036101000a81548160ff021916908360068111156136ee57fe5b02179055505b5050565b600060076000846000191660001916815260200190815260200160002090506003600681111561372457fe5b81600a0160039054906101000a900460ff16600681111561374157fe5b148061377457506004600681111561375557fe5b81600a0160039054906101000a900460ff16600681111561377257fe5b145b156138215780600b018054905081600c015410151561379257600080fd5b600081600e0160008460001916600019168152602001908152602001600020600001541415156137c157600080fd5b600181600c0160008282540192505081905550600181600e016000846000191660001916815260200190815260200160002060000181905550600481600a0160036101000a81548160ff0219169083600681111561381b57fe5b02179055505b505050565b600080826000015173ffffffffffffffffffffffffffffffffffffffff1614158061385657506000826060015114155b9050919050565b600080600080600080600060076000896000191660001916815260200190815260200160002095506005600681111561389257fe5b86600a0160039054906101000a900460ff1660068111156138af57fe5b1415613cb957600686600a0160036101000a81548160ff021916908360068111156138d657fe5b021790555085600101549450600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633ce90e8f866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15801561397b57600080fd5b505af115801561398f573d6000803e3d6000fd5b505050506040513d60208110156139a557600080fd5b81019080805190602001909291905050509350600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f2854e34866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b158015613a5157600080fd5b505af1158015613a65573d6000803e3d6000fd5b505050506040513d6020811015613a7b57600080fd5b81019080805190602001909291905050509250600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166355e018ce866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b158015613b2757600080fd5b505af1158015613b3b573d6000803e3d6000fd5b505050506040513d6020811015613b5157600080fd5b81019080805190602001909291905050509150600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f2854e34836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b158015613bfd57600080fd5b505af1158015613c11573d6000803e3d6000fd5b505050506040513d6020811015613c2757600080fd5b810190808051906020019092919050505090506000866010015414158015613c56575085600301548660100154145b1515613c6157600080fd5b8286600f01548201141515613c7557600080fd5b85600b01600187600b018054905003815481101515613c9057fe5b9060005260206000200154600019168460001916141515613cb057600080fd5b60019650613cbe565b600096505b505050505050919050565b60006001600085600019166000191681526020019081526020016000209050613d3c84838360020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168460030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16614847565b613d4584614c63565b7f5041edcbe6f9da739af8efbf617847a61f49fa62473db9fc291b595c36f2476984846040518083600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a150505050565b60006001600085600019166000191681526020019081526020016000209050613e3184838360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168460020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16614847565b613e3a84614c63565b7faa6a47cdecdfea65fed4efdf45440a6349c10a8eab99978bcc5a9e74e74a883c84846040518083600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a150505050565b60008060076000866000191660001916815260200190815260200160002090506141098161020060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015460001916600019168152602001600282015481526020016003820154815260200160048201805480602002602001604051908101604052809291908181526020018280548015613fe557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311613f9b575b505050505081526020016007820154815260200160098201548152602001600a820160009054906101000a900460ff16151515158152602001600a820160019054906101000a900460ff16151515158152602001600a820160029054906101000a900460ff16151515158152602001600a820160039054906101000a900460ff16600681111561407157fe5b600681111561407c57fe5b8152602001600b82018054806020026020016040519081016040528092919081815260200182805480156140d357602002820191906000526020600020905b815460001916815260200190600101908083116140bb575b50505050508152602001600c8201548152602001600d8201548152602001600f8201548152602001601082015481525050613826565b151561411457600080fd5b826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561416157600080fd5b826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550828160060160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055507ff49b89a01f8b7e79e855801f268b5df3d7c88c4bc61293934fc1f9c52ddfeb318585856040518084600019166000191681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a18060060160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549150509392505050565b60008060008060006007600088600019166000191681526020019081526020016000209450600085600b01805490501415156142fe57600080fd5b6002600681111561430b57fe5b85600a0160039054906101000a900460ff16600681111561432857fe5b141561463c57600385600a0160036101000a81548160ff0219169083600681111561434f57fe5b021790555060006020875181151561436357fe5b0614151561437057600080fd5b6020865181151561437d57fe5b049350600092505b838310156143d85784600b0161439e8785602002614cf2565b9080600181540180825580915050906001820390600052602060002001600090919290919091509060001916905550826001019250614385565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633ce90e8f86600101546040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15801561447557600080fd5b505af1158015614489573d6000803e3d6000fd5b505050506040513d602081101561449f57600080fd5b8101908080519060200190929190505050915084600b01600186600b0180549050038154811015156144cd57fe5b90600052602060002001546000191682600019161415156144ed57600080fd5b61454c85600b0180548060200260200160405190810160405280929190818152602001828054801561454257602002820191906000526020600020905b8154600019168152602001906001019080831161452a575b5050505050614d08565b9050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663642ed98886600101546040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b1580156145eb57600080fd5b505af11580156145ff573d6000803e3d6000fd5b505050506040513d602081101561461557600080fd5b810190808051906020019092919050505060001916816000191614151561463b57600080fd5b5b50505050505050565b60008060008060006007600088600019166000191681526020019081526020016000209450614675866000614cf2565b93506004600681111561468457fe5b85600a0160039054906101000a900460ff1660068111156146a157fe5b141561483e576146b4866020605061504e565b6001029250600185600e0160008560001916600019168152602001908152602001600020600001541415156146e857600080fd5b600285600e016000856000191660001916815260200190815260200160002060000181905550600185600d016000828254019250508190555061473186604460200160206150cc565b9150600654856003015481151561474457fe5b046006548381151561475257fe5b041115151561476057600080fd5b6001600654866003015481151561477357fe5b04036006548381151561478257fe5b041015151561479057600080fd5b6147a086604860200160206150cc565b90506147b36147ae826158e1565b615913565b85600f016000828254019250508190555084600b01600186600b0180549050038154811015156147df57fe5b90600052602060002001546000191683600019161415614803578185601001819055505b84600b018054905085600d0154141561483d57600585600a0160036101000a81548160ff0219169083600681111561483757fe5b02179055505b5b50505050505050565b60006007600085600019166000191681526020019081526020016000209050614a9c8161020060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201546000191660001916815260200160028201548152602001600382015481526020016004820180548060200260200160405190810160405280929190818152602001828054801561497857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161492e575b505050505081526020016007820154815260200160098201548152602001600a820160009054906101000a900460ff16151515158152602001600a820160019054906101000a900460ff16151515158152602001600a820160029054906101000a900460ff16151515158152602001600a820160039054906101000a900460ff166006811115614a0457fe5b6006811115614a0f57fe5b8152602001600b8201805480602002602001604051908101604052809291908181526020018280548015614a6657602002820191906000526020600020905b81546000191681526020019060010190808311614a4e575b50505050508152602001600c8201548152602001600d8201548152602001600f8201548152602001601082015481525050613826565b1515614aa757600080fd5b600081600a0160006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415614b4857600181600a0160026101000a81548160ff021916908315150217905550614b4284612220565b50614bb5565b8273ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415614baf57614ba984612220565b50614bb4565b600080fd5b5b7f3ed70ed22cfbf21e1bdfa13940bfb497d1d2652c3df69e4997bf7e6deba6b33b8584846040518084600019166000191681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a15050505050565b60016000826000191660001916815260200190815260200160002060008082016000905560018201600090556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560048201600090556005820160009055505050565b6000808260208501015190508091505092915050565b6000806000806000855193506001841415614d3d57856000815181101515614d2c57fe5b906020019060200201519450615045565b600084111515614d4c57600080fd5b60009050600092505b83831015614eb457836001840110614d705760018403614d75565b600183015b9150600280614d9a8886815181101515614d8b57fe5b90602001906020020151615946565b614dba8986815181101515614dab57fe5b90602001906020020151615946565b6040518083600019166000191681526020018260001916600019168152602001925050506020604051808303816000865af1158015614dfd573d6000803e3d6000fd5b5050506040513d6020811015614e1257600080fd5b81019080805190602001909291905050506040518082600019166000191681526020019150506020604051808303816000865af1158015614e57573d6000803e3d6000fd5b5050506040513d6020811015614e6c57600080fd5b81019080805190602001909291905050508682815181101515614e8b57fe5b906020019060200201906000191690816000191681525050600181019050600283019250614d55565b8093505b60018411156150215760009050600092505b8383101561501957836001840110614ee55760018403614eea565b600183015b91506002808785815181101515614efd57fe5b906020019060200201518885815181101515614f1557fe5b906020019060200201516040518083600019166000191681526020018260001916600019168152602001925050506020604051808303816000865af1158015614f62573d6000803e3d6000fd5b5050506040513d6020811015614f7757600080fd5b81019080805190602001909291905050506040518082600019166000191681526020019150506020604051808303816000865af1158015614fbc573d6000803e3d6000fd5b5050506040513d6020811015614fd157600080fd5b81019080805190602001909291905050508682815181101515614ff057fe5b906020019060200201906000191690816000191681525050600181019050600283019250614eca565b809350614eb8565b61504286600081518110151561503357fe5b90602001906020020151615946565b94505b50505050919050565b60006150c3600261506086868661597c565b6040518082600019166000191681526020019150506020604051808303816000865af1158015615094573d6000803e3d6000fd5b5050506040513d60208110156150a957600080fd5b8101908080519060200190929190505050600190046159a6565b90509392505050565b6000600882141561515d5783838151811015156150e557fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900460ff1690506158da565b601082141561527157610100846001850181518110151561517a57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090040284848151811015156151f757fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090040161ffff1690506158da565b6020821415615492576301000000846003850181518110151561529057fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090040262010000856002860181518110151561531457fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900402610100866001870181518110151561539757fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900402868681518110151561541457fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900401010163ffffffff1690506158da565b60408214156158d95767010000000000000084600785018151811015156154b557fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004026601000000000000856006860181518110151561553d57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004026501000000000086600587018151811015156155c457fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900402640100000000876004880181518110151561564a57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900402630100000088600389018151811015156156cf57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900402620100008960028a0181518110151561575357fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004026101008a60018b018151811015156157d657fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004028a8a81518110151561585357fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090040101010101010167ffffffffffffffff1690506158da565b5b9392505050565b60008060006301000000848115156158f557fe5b04915062ffffff84169050600382036101000a810292505050919050565b6000817d0fffff00000000000000000000000000000000000000000000000000000081151561593e57fe5b049050919050565b60008060405160005b602081101561596d578481601f031a8183015360018101905061594f565b50805191505080915050919050565b60006040516020818486602089010160025afa151561599a57600080fd5b80519150509392505050565b600060405160005b60208110156159cc578381601f031a818301536001810190506159ae565b5080519150509190505600a165627a7a72305820dcdcffa331a59ee016c40268ea9a7c2d6d7637711e00cfef89c43305bee479ef0029";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<>();
        _addresses.put("1527182964555", "0xd6342b146a11f010bfa5717f8a38d4f9a374b6ca");
    }

    protected ClaimManager(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected ClaimManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<DepositBondedEventResponse> getDepositBondedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("DepositBonded", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<DepositBondedEventResponse> responses = new ArrayList<DepositBondedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositBondedEventResponse typedResponse = new DepositBondedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<DepositBondedEventResponse> depositBondedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("DepositBonded", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, DepositBondedEventResponse>() {
            @Override
            public DepositBondedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                DepositBondedEventResponse typedResponse = new DepositBondedEventResponse();
                typedResponse.log = log;
                typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<DepositUnbondedEventResponse> getDepositUnbondedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("DepositUnbonded", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<DepositUnbondedEventResponse> responses = new ArrayList<DepositUnbondedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositUnbondedEventResponse typedResponse = new DepositUnbondedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<DepositUnbondedEventResponse> depositUnbondedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("DepositUnbonded", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, DepositUnbondedEventResponse>() {
            @Override
            public DepositUnbondedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                DepositUnbondedEventResponse typedResponse = new DepositUnbondedEventResponse();
                typedResponse.log = log;
                typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<SuperblockClaimCreatedEventResponse> getSuperblockClaimCreatedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("SuperblockClaimCreated", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<SuperblockClaimCreatedEventResponse> responses = new ArrayList<SuperblockClaimCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimCreatedEventResponse typedResponse = new SuperblockClaimCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.superblockId = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SuperblockClaimCreatedEventResponse> superblockClaimCreatedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("SuperblockClaimCreated", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, SuperblockClaimCreatedEventResponse>() {
            @Override
            public SuperblockClaimCreatedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                SuperblockClaimCreatedEventResponse typedResponse = new SuperblockClaimCreatedEventResponse();
                typedResponse.log = log;
                typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.superblockId = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<SuperblockClaimChallengedEventResponse> getSuperblockClaimChallengedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("SuperblockClaimChallenged", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<SuperblockClaimChallengedEventResponse> responses = new ArrayList<SuperblockClaimChallengedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimChallengedEventResponse typedResponse = new SuperblockClaimChallengedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SuperblockClaimChallengedEventResponse> superblockClaimChallengedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("SuperblockClaimChallenged", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, SuperblockClaimChallengedEventResponse>() {
            @Override
            public SuperblockClaimChallengedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                SuperblockClaimChallengedEventResponse typedResponse = new SuperblockClaimChallengedEventResponse();
                typedResponse.log = log;
                typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<SessionDecidedEventResponse> getSessionDecidedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("SessionDecided", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<SessionDecidedEventResponse> responses = new ArrayList<SessionDecidedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SessionDecidedEventResponse typedResponse = new SessionDecidedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.winner = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.loser = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SessionDecidedEventResponse> sessionDecidedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("SessionDecided", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, SessionDecidedEventResponse>() {
            @Override
            public SessionDecidedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                SessionDecidedEventResponse typedResponse = new SessionDecidedEventResponse();
                typedResponse.log = log;
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.winner = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.loser = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<SuperblockClaimSuccessfulEventResponse> getSuperblockClaimSuccessfulEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("SuperblockClaimSuccessful", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<SuperblockClaimSuccessfulEventResponse> responses = new ArrayList<SuperblockClaimSuccessfulEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimSuccessfulEventResponse typedResponse = new SuperblockClaimSuccessfulEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.superblockId = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SuperblockClaimSuccessfulEventResponse> superblockClaimSuccessfulEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("SuperblockClaimSuccessful", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, SuperblockClaimSuccessfulEventResponse>() {
            @Override
            public SuperblockClaimSuccessfulEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                SuperblockClaimSuccessfulEventResponse typedResponse = new SuperblockClaimSuccessfulEventResponse();
                typedResponse.log = log;
                typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.superblockId = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<SuperblockClaimFailedEventResponse> getSuperblockClaimFailedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("SuperblockClaimFailed", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<SuperblockClaimFailedEventResponse> responses = new ArrayList<SuperblockClaimFailedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimFailedEventResponse typedResponse = new SuperblockClaimFailedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.superblockId = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SuperblockClaimFailedEventResponse> superblockClaimFailedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("SuperblockClaimFailed", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, SuperblockClaimFailedEventResponse>() {
            @Override
            public SuperblockClaimFailedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                SuperblockClaimFailedEventResponse typedResponse = new SuperblockClaimFailedEventResponse();
                typedResponse.log = log;
                typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.superblockId = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<VerificationGameStartedEventResponse> getVerificationGameStartedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("VerificationGameStarted", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<VerificationGameStartedEventResponse> responses = new ArrayList<VerificationGameStartedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VerificationGameStartedEventResponse typedResponse = new VerificationGameStartedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<VerificationGameStartedEventResponse> verificationGameStartedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("VerificationGameStarted", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, VerificationGameStartedEventResponse>() {
            @Override
            public VerificationGameStartedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                VerificationGameStartedEventResponse typedResponse = new VerificationGameStartedEventResponse();
                typedResponse.log = log;
                typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public List<ErrorClaimEventResponse> getErrorClaimEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("ErrorClaim", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<ErrorClaimEventResponse> responses = new ArrayList<ErrorClaimEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ErrorClaimEventResponse typedResponse = new ErrorClaimEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.err = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ErrorClaimEventResponse> errorClaimEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("ErrorClaim", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ErrorClaimEventResponse>() {
            @Override
            public ErrorClaimEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                ErrorClaimEventResponse typedResponse = new ErrorClaimEventResponse();
                typedResponse.log = log;
                typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.err = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<NewSessionEventResponse> getNewSessionEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("NewSession", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<NewSessionEventResponse> responses = new ArrayList<NewSessionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewSessionEventResponse typedResponse = new NewSessionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewSessionEventResponse> newSessionEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("NewSession", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewSessionEventResponse>() {
            @Override
            public NewSessionEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                NewSessionEventResponse typedResponse = new NewSessionEventResponse();
                typedResponse.log = log;
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<NewQueryEventResponse> getNewQueryEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("NewQuery", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<NewQueryEventResponse> responses = new ArrayList<NewQueryEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewQueryEventResponse typedResponse = new NewQueryEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.step = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewQueryEventResponse> newQueryEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("NewQuery", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewQueryEventResponse>() {
            @Override
            public NewQueryEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                NewQueryEventResponse typedResponse = new NewQueryEventResponse();
                typedResponse.log = log;
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.step = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<NewResponseEventResponse> getNewResponseEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("NewResponse", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<NewResponseEventResponse> responses = new ArrayList<NewResponseEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewResponseEventResponse typedResponse = new NewResponseEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewResponseEventResponse> newResponseEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("NewResponse", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewResponseEventResponse>() {
            @Override
            public NewResponseEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                NewResponseEventResponse typedResponse = new NewResponseEventResponse();
                typedResponse.log = log;
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<ChallengerConvictedEventResponse> getChallengerConvictedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("ChallengerConvicted", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<ChallengerConvictedEventResponse> responses = new ArrayList<ChallengerConvictedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ChallengerConvictedEventResponse typedResponse = new ChallengerConvictedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ChallengerConvictedEventResponse> challengerConvictedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("ChallengerConvicted", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ChallengerConvictedEventResponse>() {
            @Override
            public ChallengerConvictedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                ChallengerConvictedEventResponse typedResponse = new ChallengerConvictedEventResponse();
                typedResponse.log = log;
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<ClaimantConvictedEventResponse> getClaimantConvictedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("ClaimantConvicted", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<ClaimantConvictedEventResponse> responses = new ArrayList<ClaimantConvictedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ClaimantConvictedEventResponse typedResponse = new ClaimantConvictedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ClaimantConvictedEventResponse> claimantConvictedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("ClaimantConvicted", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ClaimantConvictedEventResponse>() {
            @Override
            public ClaimantConvictedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                ClaimantConvictedEventResponse typedResponse = new ClaimantConvictedEventResponse();
                typedResponse.log = log;
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<SessionErrorEventResponse> getSessionErrorEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("SessionError", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<SessionErrorEventResponse> responses = new ArrayList<SessionErrorEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SessionErrorEventResponse typedResponse = new SessionErrorEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.err = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SessionErrorEventResponse> sessionErrorEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("SessionError", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, SessionErrorEventResponse>() {
            @Override
            public SessionErrorEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                SessionErrorEventResponse typedResponse = new SessionErrorEventResponse();
                typedResponse.log = log;
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.err = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<DepositMadeEventResponse> getDepositMadeEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("DepositMade", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<DepositMadeEventResponse> responses = new ArrayList<DepositMadeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositMadeEventResponse typedResponse = new DepositMadeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.who = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<DepositMadeEventResponse> depositMadeEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("DepositMade", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, DepositMadeEventResponse>() {
            @Override
            public DepositMadeEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                DepositMadeEventResponse typedResponse = new DepositMadeEventResponse();
                typedResponse.log = log;
                typedResponse.who = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<DepositWithdrawnEventResponse> getDepositWithdrawnEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("DepositWithdrawn", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<DepositWithdrawnEventResponse> responses = new ArrayList<DepositWithdrawnEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositWithdrawnEventResponse typedResponse = new DepositWithdrawnEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.who = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<DepositWithdrawnEventResponse> depositWithdrawnEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("DepositWithdrawn", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, DepositWithdrawnEventResponse>() {
            @Override
            public DepositWithdrawnEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                DepositWithdrawnEventResponse typedResponse = new DepositWithdrawnEventResponse();
                typedResponse.log = log;
                typedResponse.who = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<TransactionReceipt> query(byte[] sessionId, BigInteger step, byte[] data) {
        final Function function = new Function(
                "query", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(sessionId), 
                new org.web3j.abi.datatypes.generated.Uint256(step), 
                new org.web3j.abi.datatypes.generated.Bytes32(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> performVerification(byte[] sessionId) {
        final Function function = new Function(
                "performVerification", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(sessionId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> defaultChallengeTimeout() {
        final Function function = new Function("defaultChallengeTimeout", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> sessionsCount() {
        final Function function = new Function("sessionsCount", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> withdrawDeposit(BigInteger amount) {
        final Function function = new Function(
                "withdrawDeposit", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> makeDeposit(BigInteger weiValue) {
        final Function function = new Function(
                "makeDeposit", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<BigInteger> minDeposit() {
        final Function function = new Function("minDeposit", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> respond(byte[] sessionId, BigInteger step, byte[] data) {
        final Function function = new Function(
                "respond", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(sessionId), 
                new org.web3j.abi.datatypes.generated.Uint256(step), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> timeout(byte[] sessionId) {
        final Function function = new Function(
                "timeout", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(sessionId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple6<byte[], byte[], String, String, BigInteger, BigInteger>> sessions(byte[] param0) {
        final Function function = new Function("sessions", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple6<byte[], byte[], String, String, BigInteger, BigInteger>>(
                new Callable<Tuple6<byte[], byte[], String, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple6<byte[], byte[], String, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<byte[], byte[], String, String, BigInteger, BigInteger>(
                                (byte[]) results.get(0).getValue(), 
                                (byte[]) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> superblocksDelta() {
        final Function function = new Function("superblocksDelta", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> beginBattleSession(byte[] claimId, String challenger, String claimant) {
        final Function function = new Function(
                "beginBattleSession", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(claimId), 
                new org.web3j.abi.datatypes.Address(challenger), 
                new org.web3j.abi.datatypes.Address(claimant)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getDeposit(String who) {
        final Function function = new Function("getDeposit", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(who)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> deposits(String param0) {
        final Function function = new Function("deposits", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public static RemoteCall<ClaimManager> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _superblocks) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_superblocks)));
        return deployRemoteCall(ClaimManager.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<ClaimManager> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _superblocks) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_superblocks)));
        return deployRemoteCall(ClaimManager.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public RemoteCall<BigInteger> getBondedDeposit(byte[] claimId, String account) {
        final Function function = new Function("getBondedDeposit", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(claimId), 
                new org.web3j.abi.datatypes.Address(account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> unbondDeposit(byte[] claimId, String account) {
        final Function function = new Function(
                "unbondDeposit", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(claimId), 
                new org.web3j.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> proposeSuperblock(byte[] _blocksMerkleRoot, BigInteger _accumulatedWork, BigInteger _timestamp, byte[] _lastHash, byte[] _parentHash) {
        final Function function = new Function(
                "proposeSuperblock", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_blocksMerkleRoot), 
                new org.web3j.abi.datatypes.generated.Uint256(_accumulatedWork), 
                new org.web3j.abi.datatypes.generated.Uint256(_timestamp), 
                new org.web3j.abi.datatypes.generated.Bytes32(_lastHash), 
                new org.web3j.abi.datatypes.generated.Bytes32(_parentHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> challengeSuperblock(byte[] superblockId) {
        final Function function = new Function(
                "challengeSuperblock", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> runNextBattleSession(byte[] claimId) {
        final Function function = new Function(
                "runNextBattleSession", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(claimId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> checkClaimFinished(byte[] claimId) {
        final Function function = new Function(
                "checkClaimFinished", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(claimId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<byte[]> getSession(byte[] claimId, String challenger) {
        final Function function = new Function("getSession", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(claimId), 
                new org.web3j.abi.datatypes.Address(challenger)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public static ClaimManager load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new ClaimManager(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static ClaimManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new ClaimManager(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class DepositBondedEventResponse {
        public Log log;

        public byte[] claimId;

        public String account;

        public BigInteger amount;
    }

    public static class DepositUnbondedEventResponse {
        public Log log;

        public byte[] claimId;

        public String account;

        public BigInteger amount;
    }

    public static class SuperblockClaimCreatedEventResponse {
        public Log log;

        public byte[] claimId;

        public String claimant;

        public byte[] superblockId;
    }

    public static class SuperblockClaimChallengedEventResponse {
        public Log log;

        public byte[] claimId;

        public String challenger;
    }

    public static class SessionDecidedEventResponse {
        public Log log;

        public byte[] sessionId;

        public String winner;

        public String loser;
    }

    public static class SuperblockClaimSuccessfulEventResponse {
        public Log log;

        public byte[] claimId;

        public String claimant;

        public byte[] superblockId;
    }

    public static class SuperblockClaimFailedEventResponse {
        public Log log;

        public byte[] claimId;

        public String claimant;

        public byte[] superblockId;
    }

    public static class VerificationGameStartedEventResponse {
        public Log log;

        public byte[] claimId;

        public String claimant;

        public String challenger;

        public byte[] sessionId;
    }

    public static class ErrorClaimEventResponse {
        public Log log;

        public byte[] claimId;

        public BigInteger err;
    }

    public static class NewSessionEventResponse {
        public Log log;

        public byte[] sessionId;

        public String claimant;

        public String challenger;
    }

    public static class NewQueryEventResponse {
        public Log log;

        public byte[] sessionId;

        public String claimant;

        public BigInteger step;
    }

    public static class NewResponseEventResponse {
        public Log log;

        public byte[] sessionId;

        public String challenger;
    }

    public static class ChallengerConvictedEventResponse {
        public Log log;

        public byte[] sessionId;

        public String challenger;
    }

    public static class ClaimantConvictedEventResponse {
        public Log log;

        public byte[] sessionId;

        public String claimant;
    }

    public static class SessionErrorEventResponse {
        public Log log;

        public byte[] sessionId;

        public BigInteger err;
    }

    public static class DepositMadeEventResponse {
        public Log log;

        public String who;

        public BigInteger amount;
    }

    public static class DepositWithdrawnEventResponse {
        public Log log;

        public String who;

        public BigInteger amount;
    }
}
