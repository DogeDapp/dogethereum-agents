package org.dogethereum.dogesubmitter.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.3.1.
 */
public class DogeClaimManager extends Contract {
    private static final String BINARY = "0x6080604052600060025560016003556005600455610e1060055534801561002557600080fd5b506040516020806138e5833981016040525160078054600160a060020a031916600160a060020a03909216919091179055613880806100656000396000f30060806040526004361061012f5763ffffffff60e060020a6000350416630b9f6863811461013a57806318a10ca61461015a5780631defb7651461019057806329118a9b146101c15780632a4febe4146101e5578063312f6307146101fd57806333289a461461021257806333337b831461022a5780633352f1a41461026757806340732c891461029357806341b3d1851461029b57806344983f1a146102b057806349d83b1c146102c857806351c54446146103285780635292a5901461033d57806355e4286b14610355578063795ea18e1461036d5780637dbd2832146103855780639c57588f146103dc578063d1daeede14610400578063db1ee9031461033d578063e1254fba1461042a578063e1bafb911461044b578063f1afcfa61461046c578063fc7e286d14610481575b6101376104a2565b50005b34801561014657600080fd5b506101586004356024356044356104c3565b005b34801561016657600080fd5b5061017e600435600160a060020a03602435166105e4565b60408051918252519081900360200190f35b34801561019c57600080fd5b506101a5610821565b60408051600160a060020a039092168252519081900360200190f35b3480156101cd57600080fd5b5061017e600435600160a060020a0360243516610830565b3480156101f157600080fd5b50610158600435610967565b34801561020957600080fd5b5061017e6109c8565b34801561021e57600080fd5b5061017e6004356109ce565b34801561023657600080fd5b5061024e600435602435604435606435608435610a7a565b6040805192835260208301919091528051918290030190f35b34801561027357600080fd5b5061027f600435610dee565b604080519115158252519081900360200190f35b61017e6104a2565b3480156102a757600080fd5b5061017e6112a9565b3480156102bc57600080fd5b5061027f6004356112af565b3480156102d457600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526101589482359460248035953695946064949201919081908401838280828437509497506115ab9650505050505050565b34801561033457600080fd5b5061017e6117bf565b34801561034957600080fd5b5061017e6004356117c5565b34801561036157600080fd5b5061024e6004356117cb565b34801561037957600080fd5b5061017e600435611bab565b34801561039157600080fd5b5061039d600435611c87565b604080519687526020870195909552600160a060020a0393841686860152919092166060850152608084019190915260a0830152519081900360c00190f35b3480156103e857600080fd5b5061017e600435600160a060020a0360243516611cc9565b34801561040c57600080fd5b5061017e600435600160a060020a0360243581169060443516611cf5565b34801561043657600080fd5b5061017e600160a060020a0360043516611eb2565b34801561045757600080fd5b50610158600160a060020a0360043516611ecd565b34801561047857600080fd5b5061017e611f28565b34801561048d57600080fd5b5061017e600160a060020a0360043516611f2e565b60006104ae3334611f40565b50336000908152602081905260409020545b90565b600083815260016020526040812060030154819081908690600160a060020a031633146104ef57600080fd5b6000878152600160208190526040822090810154909550935091508515156105695761051a83611fb5565b6002850154604080518a8152600160a060020a03909216602083015280519294507f0b8108033caf17f40e9893d8595eadc1ed7f7ec73b632df565d517fee8c7a96692918290030190a16105ce565b85600114156105ce5761057c838661200c565b6002850154604080518a8152600160a060020a039092166020830152818101889052519193507f6ee9dcacd7fd10862d15833c896a092733cc9d79ac047f101942773acc8713a3919081900360600190a15b81156105db574360058501555b50505050505050565b60008281526006602090815260408083208151610200810183528154600160a060020a031681526001820154818501526002820154818401526003820154606082015260048201805484518187028101870190955280855292948694610780948793608086019390919083018282801561068757602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610669575b5050509183525050600782810154602083015260098301546040830152600a83015460ff8082161515606085015261010082048116151560808501526201000082048116151560a085015260c090930192630100000090910416908111156106eb57fe5b60078111156106f657fe5b8152602001600b820180548060200260200160405190810160405280929190818152602001828054801561074a57602002820191906000526020600020905b81548152600190910190602001808311610735575b50505050508152602001600c8201548152602001600d8201548152602001600f82015481526020016010820154815250506120f3565b151561078b57600080fd5b600a82015460ff6101009091041615156001146107a757600080fd5b50600160a060020a0383166000818152600683016020908152604080832080549084905583835292819020805484019055805188815291820193909352808301829052915190917faafcd902e5217659ba924addbacae78ebf6a7c77409df0d0065b9ebca0129873919081900360600190a1949350505050565b600854600160a060020a031681565b60008281526006602090815260408083208151610200810183528154600160a060020a0316815260018201548185015260028201548184015260038201546060820152600482018054845181870281018701909552808552929461093794929386936080860193909290919083018282801561068757602002820191906000526020600020908154600160a060020a03168152600190910190602001808311610669575050509183525050600782810154602083015260098301546040830152600a83015460ff8082161515606085015261010082048116151560808501526201000082048116151560a085015260c090930192630100000090910416908111156106eb57fe5b151561094257600080fd5b600160a060020a038316600090815260068201602052604090205491505b5092915050565b60008181526001602081905260409091209081015461098581612102565b156109a95760038201546109a4908490600160a060020a03168361242f565b6109c3565b60028201546109c3908490600160a060020a0316836124b3565b505050565b60025481565b336000908152602081905260408120548211156109ea57600080fd5b33600081815260208190526040808220805486900390555184156108fc0291859190818181858888f19350505050158015610a29573d6000803e3d6000fd5b50604080513381526020810184905281517f4482101800a5c2e900f4156e57e05e19ffd7b366cde579553d723fd3abb2180e929181900390910190a150503360009081526020819052604090205490565b60075460009081908190819081908190600160a060020a03161515610a9e57600080fd5b600354336000908152602081905260409020541015610af057604080516000815261c38c60208201528151600080516020613835833981519152929181900390910190a161c38c955060009450610de0565b600754604080517fb8558d12000000000000000000000000000000000000000000000000000000008152600481018e9052602481018d9052604481018c9052606481018b9052608481018a90523360a48201528151600160a060020a039093169263b8558d129260c4808401939192918290030181600087803b158015610b7657600080fd5b505af1158015610b8a573d6000803e3d6000fd5b505050506040513d6040811015610ba057600080fd5b50805160209091015190945092508315610be85760408051848152602081018690528151600080516020613835833981519152929181900390910190a1838395509550610de0565b50506000818152600660209081526040918290208251610200810184528154600160a060020a031681526001820154818401526002820154818501526003820154606082015260048201805485518186028101860190965280865286959394610cf29486936080860193919290919083018282801561068757602002820191906000526020600020908154600160a060020a03168152600190910190602001808311610669575050509183525050600782810154602083015260098301546040830152600a83015460ff8082161515606085015261010082048116151560808501526201000082048116151560a085015260c090930192630100000090910416908111156106eb57fe5b15610d2e576040805183815261c3a060208201528151600080516020613835833981519152929181900390910190a161c3a08295509550610de0565b805473ffffffffffffffffffffffffffffffffffffffff191633908117825560006007830155600a8201805462ffffff198116825543600285018190556004540160098501556001840186905563ffffffff1916905560038083018b905554610d98918491612537565b506040805183815233602082015280820185905290517fd861ddd0a177fc2f7e05d851f42663399d0759ad0e74e2ab7b79570f0979e2929181900360600190a1600083955095505b505050509550959350505050565b60008181526006602090815260408083208151610200810183528154600160a060020a03168152600182015481850152600282015481840152600382015460608201526004820180548451818702810187019095528085529294610ef594929386936080860193909290919083018282801561068757602002820191906000526020600020908154600160a060020a03168152600190910190602001808311610669575050509183525050600782810154602083015260098301546040830152600a83015460ff8082161515606085015261010082048116151560808501526201000082048116151560a085015260c090930192630100000090910416908111156106eb57fe5b1515610f2e576040805184815261c3a060208201528151600080516020613835833981519152929181900390910190a1600091506112a3565b600a81015460ff1615610f6e576040805184815261c3aa60208201528151600080516020613835833981519152929181900390910190a1600091506112a3565b60098101544311610fac576040805184815261c36e60208201528151600080516020613835833981519152929181900390910190a1600091506112a3565b600481015460078201541015610fef576040805184815261c3aa60208201528151600080516020613835833981519152929181900390910190a1600091506112a3565b600a8101805461ff001916610100179081905562010000900460ff16156110fa576007546001820154604080517f69ecc3cf00000000000000000000000000000000000000000000000000000000815260048101929092528051600160a060020a03909316926369ecc3cf9260248082019392918290030181600087803b15801561107957600080fd5b505af115801561108d573d6000803e3d6000fd5b505050506040513d60408110156110a357600080fd5b50508054600182015460408051868152600160a060020a03909316602084015282810191909152517f68e40e41ba461c4741bd7c670fcb849251f74cd1a4a945ced513e85ceaf4b8eb9181900360600190a161129e565b600481015415156111a0576007546001820154604080517f797af62700000000000000000000000000000000000000000000000000000000815260048101929092528051600160a060020a039093169263797af6279260248082019392918290030181600087803b15801561116e57600080fd5b505af1158015611182573d6000803e3d6000fd5b505050506040513d604081101561119857600080fd5b506112369050565b6007546001820154604080517fd93a05e700000000000000000000000000000000000000000000000000000000815260048101929092528051600160a060020a039093169263d93a05e79260248082019392918290030181600087803b15801561120957600080fd5b505af115801561121d573d6000803e3d6000fd5b505050506040513d604081101561123357600080fd5b50505b805461124c908490600160a060020a03166105e4565b508054600182015460408051868152600160a060020a03909316602084015282810191909152517f1dc10db1a6fc712a92bf5ec914a579635a58ab4afbef2890cc90404d6753cef89181900360600190a15b600191505b50919050565b60035481565b60008181526006602090815260408083208151610200810183528154600160a060020a0316815260018201548185015260028201548184015260038201546060820152600482018054845181870281018701909552808552929486946113b4948793608086019390919083018282801561068757602002820191906000526020600020908154600160a060020a03168152600190910190602001808311610669575050509183525050600782810154602083015260098301546040830152600a83015460ff8082161515606085015261010082048116151560808501526201000082048116151560a085015260c090930192630100000090910416908111156106eb57fe5b15156113ed576040805185815261c3a060208201528151600080516020613835833981519152929181900390910190a1600092506115a4565b600a820154610100900460ff1615611432576040805185815261c3b460208201528151600080516020613835833981519152929181900390910190a1600092506115a4565b600a82015460ff1615611472576040805185815261c3aa60208201528151600080516020613835833981519152929181900390910190a1600092506115a4565b60048201546007830154101561159f576114bb8483600401846007015481548110151561149b57fe5b6000918252602090912001548454600160a060020a039182169116611cf5565b9050808260080160008460040185600701548154811015156114d957fe5b6000918252602080832090910154600160a060020a039081168452908301939093526040909101902091909155825460078401546004850180547f6d3b2a0e9b0833bfb42336839231773ea07aed87bb2fdee34c960696ea11f849948994169290811061154257fe5b6000918252602091829020015460408051948552600160a060020a0393841692850192909252919091168282015260608201849052519081900360800190a1600a8201805460ff1916600190811790915560078301805490910190555b600192505b5050919050565b600083815260016020526040812060020154819081908690600160a060020a031633146115d757600080fd5b6000878152600160208190526040822090810154909550935091508515156116d6576116038386612700565b915081156116d157600384015460408051898152600160a060020a039092166020808401829052606092840183815289519385019390935288517fc8b0f1a477e43865b7a270a945092403d72e7951dc3dacdb3af59ff84aebe620948c948b939192909160808401919085019080838360005b8381101561168e578181015183820152602001611676565b50505050905090810190601f1680156116bb5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a14360048501555b6105db565b85600114156105db576116e98386612b1c565b915081156105db57600384015460408051898152600160a060020a039092166020808401829052606092840183815289519385019390935288517f170f574a52fe7519343a4c389c193e3444944361e61380268dafc301c83d57b9948c948b939192909160808401919085019080838360005b8381101561177457818101518382015260200161175c565b50505050905090810190601f1680156117a15780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a143600485015550505050505050565b60045481565b50600090565b6007546000908190819081908190600160a060020a031615156117ed57600080fd5b6000868152600660209081526040918290208251610200810184528154600160a060020a03168152600182015481840152600282015481850152600382015460608201526004820180548551818602810186019096528086528b98509296506118f694919387936080860193929183018282801561068757602002820191906000526020600020908154600160a060020a03168152600190910190602001808311610669575050509183525050600782810154602083015260098301546040830152600a83015460ff8082161515606085015261010082048116151560808501526201000082048116151560a085015260c090930192630100000090910416908111156106eb57fe5b1515611933576040805184815261c3a060208201528151600080516020613835833981519152929181900390910190a161c3a08394509450611ba3565b600a820154610100900460ff161561197c576040805184815261c3b460208201528151600080516020613835833981519152929181900390910190a161c3b48394509450611ba3565b6003543360009081526020819052604090205410156119cc576040805184815261c38c60208201528151600080516020613835833981519152929181900390910190a161c38c8394509450611ba3565b33600090815260058301602052604090205415611a1a576040805184815261c3be60208201528151600080516020613835833981519152929181900390910190a161c3be8394509450611ba3565b600754604080517fcffd46dc000000000000000000000000000000000000000000000000000000008152600481018990528151600160a060020a039093169263cffd46dc926024808401939192918290030181600087803b158015611a7e57600080fd5b505af1158015611a92573d6000803e3d6000fd5b505050506040513d6040811015611aa857600080fd5b505190508015611ae75760408051848152602081018390528151600080516020613835833981519152929181900390910190a193506000925083611ba3565b611af48333600354612537565b506004805460098401805490910190558201805460018101825560008281526020808220909201805473ffffffffffffffffffffffffffffffffffffffff191633908117909155925483825260058601835260409182902055600a8501805463ff0000001916630100000017905580518681529182019290925281517f4e4ec862758a1fd984d86a07836cbea0bb7aec069cc98cd7a543266b270e42e4929181900390910190a1600083945094505b505050915091565b600081815260016020819052604082209081015460048201546005830154118015611bdc5750600582600501540143115b15611c04576002820154611bfb908590600160a060020a0316836124b3565b600092506115a4565b8160050154826004015410158015611c225750600582600401540143115b15611c41576003820154611bfb908590600160a060020a03168361242f565b6040805185815261c36e602082015281517f9ef9211bc259194e13c8ea0c5eaa84f4ea7ee397793b93a8c3b4962e503045de929181900390910190a161c36e92506115a4565b60016020819052600091825260409091208054918101546002820154600383015460048401546005909401549293600160a060020a0392831693929091169186565b6000828152600660209081526040808320600160a060020a038516845260080190915290205492915050565b600254604080516020808201879052338284015260608083019490945282518083039094018452608090910191829052825160009384938493919290918291908401908083835b60208310611d5b5780518252601f199092019160209182019101611d3c565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020915060016000836000191660001916815260200190815260200160002090508181600001816000191690555085816001018160001916905550838160020160006101000a815481600160a060020a030219169083600160a060020a03160217905550848160030160006101000a815481600160a060020a030219169083600160a060020a0316021790555043816004018190555043816005018190555060016002600082825401925050819055507f389e5c47177785f5b4206b5ddf96c41970bd23c868249b4074ac4f7be5d2690382858760405180846000191660001916815260200183600160a060020a0316600160a060020a0316815260200182600160a060020a0316600160a060020a03168152602001935050505060405180910390a150949350505050565b600160a060020a031660009081526020819052604090205490565b600854600160a060020a0316158015611eee5750600160a060020a03811615155b1515611ef957600080fd5b6008805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60055481565b60006020819052908152604090205481565b600160a060020a0382166000908152602081905260409020805482019081905530311015611f6d57600080fd5b60408051600160a060020a03841681526020810183905281517fd15c9547ea5c06670c0010ce19bc32d54682a4b3801ece7f3ab0c3f17106b4bb929181900390910190a15050565b60008181526006602052604081206001600a8201546301000000900460ff166007811115611fdf57fe5b141561200357600a8101805463ff00000019166302000000179055600191506112a3565b50600092915050565b6000828152600660205260408120600c81015415801561204557506003600a8201546301000000900460ff16600781111561204357fe5b145b806120785750600081600c015411801561207857506005600a8201546301000000900460ff16600781111561207657fe5b145b156120e957600b810154600c8201541061209157600080fd5b6000838152600e82016020526040902054156120ac57600080fd5b600c8101805460019081019091556000848152600e830160205260409020819055600a8201805463ff000000191663040000001790559150610960565b5060009392505050565b51600160a060020a0316151590565b600081815260066020819052604082209082908190819081908190600a8701546301000000900460ff16600781111561213757fe5b141561241f57856001015494508560100154600014158015612160575085600301548660100154145b151561216b57600080fd5b600754604080517ff2854e34000000000000000000000000000000000000000000000000000000008152600481018890529051600160a060020a039092169163f2854e34916024808201926020929091908290030181600087803b1580156121d257600080fd5b505af11580156121e6573d6000803e3d6000fd5b505050506040513d60208110156121fc57600080fd5b5051600754604080517f55e018ce000000000000000000000000000000000000000000000000000000008152600481018990529051929650600160a060020a03909116916355e018ce916024808201926020929091908290030181600087803b15801561226857600080fd5b505af115801561227c573d6000803e3d6000fd5b505050506040513d602081101561229257600080fd5b5051600754604080517ff2854e34000000000000000000000000000000000000000000000000000000008152600481018490529051929550600160a060020a039091169163f2854e34916024808201926020929091908290030181600087803b1580156122fe57600080fd5b505af1158015612312573d6000803e3d6000fd5b505050506040513d602081101561232857600080fd5b5051600f8701549092508201841461233f57600080fd5b600754604080517f3ce90e8f000000000000000000000000000000000000000000000000000000008152600481018890529051600160a060020a0390921691633ce90e8f916024808201926020929091908290030181600087803b1580156123a657600080fd5b505af11580156123ba573d6000803e3d6000fd5b505050506040513d60208110156123d057600080fd5b5051600b870180549192509060001981019081106123ea57fe5b600091825260209091200154811461240157600080fd5b600a8601805463ff0000001916630700000017905560019650612424565b600096505b505050505050919050565b6000838152600160205260409020600281015460038201546124619186918591600160a060020a039081169116612fe7565b61246a846131ad565b60408051858152600160a060020a038516602082015281517f5041edcbe6f9da739af8efbf617847a61f49fa62473db9fc291b595c36f24769929181900390910190a150505050565b6000838152600160205260409020600381015460028201546124e59186918591600160a060020a039081169116612fe7565b6124ee846131ad565b60408051858152600160a060020a038516602082015281517faa6a47cdecdfea65fed4efdf45440a6349c10a8eab99978bcc5a9e74e74a883c929181900390910190a150505050565b60008381526006602090815260408083208151610200810183528154600160a060020a0316815260018201548185015260028201548184015260038201546060820152600482018054845181870281018701909552808552929461263e94929386936080860193909290919083018282801561068757602002820191906000526020600020908154600160a060020a03168152600190910190602001808311610669575050509183525050600782810154602083015260098301546040830152600a83015460ff8082161515606085015261010082048116151560808501526201000082048116151560a085015260c090930192630100000090910416908111156106eb57fe5b151561264957600080fd5b600160a060020a03841660009081526020819052604090205483111561266e57600080fd5b600160a060020a0384166000818152602081815260408083208054889003905560068501825291829020805487019055815188815290810192909252818101859052517ff49b89a01f8b7e79e855801f268b5df3d7c88c4bc61293934fc1f9c52ddfeb319181900360600190a1600160a060020a03841660009081526006820160205260409020549150509392505050565b6000828152600660205260408120600b810154829081901561272157600080fd5b6002600a8401546301000000900460ff16600781111561273d57fe5b1415612b0e57600a8301805463ff000000191663030000001790556040517f27043d9800000000000000000000000000000000000000000000000000000000815260206004820181815287516024840152875173__DogeTx________________________________936327043d98938a939283926044019185019080838360005b838110156127d65781810151838201526020016127be565b50505050905090810190601f1680156128035780820380516001836020036101000a031916815260200191505b509250505060006040518083038186803b15801561282057600080fd5b505af4158015612834573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561285d57600080fd5b81019080805164010000000081111561287557600080fd5b8201602081018481111561288857600080fd5b81518560208202830111640100000000821117156128a557600080fd5b505080516128c09450600b88019350602090910191506137cd565b506007546001840154604080517f3ce90e8f000000000000000000000000000000000000000000000000000000008152600481019290925251600160a060020a0390921691633ce90e8f916024808201926020929091908290030181600087803b15801561292d57600080fd5b505af1158015612941573d6000803e3d6000fd5b505050506040513d602081101561295757600080fd5b5051600b8401805491935090600019810190811061297157fe5b600091825260209091200154821461298857600080fd5b6040517ff9b5d7c0000000000000000000000000000000000000000000000000000000008152602060048201908152600b850180546024840181905273__DogeTx________________________________9363f9b5d7c0939182916044019084908015612a1557602002820191906000526020600020905b81548152600190910190602001808311612a00575b50509250505060206040518083038186803b158015612a3357600080fd5b505af4158015612a47573d6000803e3d6000fd5b505050506040513d6020811015612a5d57600080fd5b50516007546001850154604080517f642ed988000000000000000000000000000000000000000000000000000000008152600481019290925251929350600160a060020a039091169163642ed988916024808201926020929091908290030181600087803b158015612ace57600080fd5b505af1158015612ae2573d6000803e3d6000fd5b505050506040513d6020811015612af857600080fd5b50518114612b0557600080fd5b60019350612b13565b600093505b50505092915050565b6000828152600660205260408120818080808080806004600a8901546301000000900460ff166007811115612b4d57fe5b1415612fd457612b608a60206050613200565b6000818152600e8a016020526040902054909750600114612b8057600080fd5b6000878152600e89016020908152604090912060029055600d890180546001019055612bb0908b906064906132c3565b95506005548860030154811515612bc357fe5b0460055487811515612bd157fe5b041115612bdd57600080fd5b60016005548960030154811515612bf057fe5b040360055487811515612bff57fe5b041015612c0b57600080fd5b612c188a606860206132c3565b9450612c2b612c26866135e4565b613607565b600f890180549091019055612c418a6000613639565b935073__DogeTx________________________________63fa7199a18b6020808e510388600190046040518563ffffffff1660e060020a0281526004018080602001858152602001848152602001838152602001828103825286818151815260200191508051906020019080838360005b83811015612cca578181015183820152602001612cb2565b50505050905090810190601f168015612cf75780820380516001836020036101000a031916815260200191505b509550505050505060606040518083038186803b158015612d1757600080fd5b505af4158015612d2b573d6000803e3d6000fd5b505050506040513d6060811015612d4157600080fd5b508051602082015160409092015190945090925090508215612d6257600080fd5b612d6d8a6020613641565b15612e6e576008548a51600160a060020a03909116906366ffaaab90612d9a908d90604f19810190613660565b60405160e060020a63ffffffff84160281526024810188905260006044820181905230606483018190526080600484019081528451608485015284518b94829160a4909101906020880190808383895b83811015612e02578181015183820152602001612dea565b50505050905090810190601f168015612e2f5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015612e5157600080fd5b505af1158015612e65573d6000803e3d6000fd5b50505050612f5c565b600854600160a060020a03166366ffaaab612e8c8c60206070613660565b60405160e060020a63ffffffff84160281526024810188905260006044820181905230606483018190526080600484019081528451608485015284518b94829160a4909101906020880190808383895b83811015612ef4578181015183820152602001612edc565b50505050905090810190601f168015612f215780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015612f4357600080fd5b505af1158015612f57573d6000803e3d6000fd5b505050505b600b880180546000198101908110612f7057fe5b600091825260209091200154871415612f8b57601088018690555b600b880154600d8901541415612fb557600a8801805463ff00000019166306000000179055612fcb565b600a8801805463ff000000191663050000001790555b60019850612fd9565b600098505b505050505050505092915050565b6000838152600660209081526040918290208251610200810184528154600160a060020a031681526001820154818401526002820154818501526003820154606082015260048201805485518186028101860190965280865292946130ec94929386936080860193919083018282801561068757602002820191906000526020600020908154600160a060020a03168152600190910190602001808311610669575050509183525050600782810154602083015260098301546040830152600a83015460ff8082161515606085015261010082048116151560808501526201000082048116151560a085015260c090930192630100000090910416908111156106eb57fe5b15156130f757600080fd5b600a8101805460ff191690558054600160a060020a038381169116141561313a57600a8101805462ff0000191662010000179055613134846112af565b5061315d565b8054600160a060020a038481169116141561315857613134846112af565b600080fd5b60408051868152600160a060020a03808616602083015284168183015290517f3ed70ed22cfbf21e1bdfa13940bfb497d1d2652c3df69e4997bf7e6deba6b33b9181900360600190a15050505050565b6000908152600160208190526040822082815590810182905560028101805473ffffffffffffffffffffffffffffffffffffffff1990811690915560038201805490911690556004810182905560050155565b60006132b960026132128686866136c0565b6040805160208082019390935281518082038401815290820191829052805190928291908401908083835b6020831061325c5780518252601f19909201916020918201910161323d565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af115801561329d573d6000803e3d6000fd5b5050506040513d60208110156132b257600080fd5b50516136e7565b90505b9392505050565b600081600814156133005783838151811015156132dc57fe5b90602001015160f860020a900460f860020a0260f860020a900460ff1690506132bc565b816010141561336c57838360010181518110151561331a57fe5b90602001015160f860020a900460f860020a0260f860020a900461010002848481518110151561334657fe5b90602001015160f860020a900460f860020a0260f860020a90040161ffff1690506132bc565b816020141561343d57838360030181518110151561338657fe5b90602001015160f860020a900460f860020a0260f860020a900463010000000284846002018151811015156133b757fe5b90602001015160f860020a900460f860020a0260f860020a9004620100000285856001018151811015156133e757fe5b90602001015160f860020a900460f860020a0260f860020a900461010002868681518110151561341357fe5b90602001015160f860020a900460f860020a0260f860020a900401010163ffffffff1690506132bc565b81604014156132bc57838360070181518110151561345757fe5b90602001015160f860020a900460f860020a0260f860020a900467010000000000000002848460060181518110151561348c57fe5b90602001015160f860020a900460f860020a0260f860020a900466010000000000000285856005018151811015156134c057fe5b90602001015160f860020a900460f860020a0260f860020a9004650100000000000286866004018151811015156134f357fe5b90602001015160f860020a900460f860020a0260f860020a900464010000000002878760030181518110151561352557fe5b90602001015160f860020a900460f860020a0260f860020a9004630100000002888860020181518110151561355657fe5b90602001015160f860020a900460f860020a0260f860020a90046201000002898960010181518110151561358657fe5b90602001015160f860020a900460f860020a0260f860020a9004610100028a8a8151811015156135b257fe5b90602001015160f860020a900460f860020a0260f860020a90040101010101010167ffffffffffffffff1690506132bc565b62ffffff8116630100000063ffffffff92831604909116600219016101000a0290565b6000817d0fffff00000000000000000000000000000000000000000000000000000081151561363257fe5b0492915050565b016020015190565b60006101006136508484613712565b1663ffffffff1615159392505050565b6060600060608484039150816040519080825280601f01601f191660200182016040528015613699578160200160208202803883390190505b5090508160208201838760208a010160045afa15156136b757600080fd5b95945050505050565b60006040516020818486602089010160025afa15156136de57600080fd5b51949350505050565b600060405160005b602081101561370a578381601f031a818301536001016136ef565b505192915050565b6000828260030181518110151561372557fe5b90602001015160f860020a900460f860020a0260f860020a9004630100000002838360020181518110151561375657fe5b90602001015160f860020a900460f860020a0260f860020a90046201000002848460010181518110151561378657fe5b90602001015160f860020a900460f860020a0260f860020a90046101000285858151811015156137b257fe5b016020015160f860020a908190048102040101019392505050565b82805482825590600052602060002090810192821561380a579160200282015b8281111561380a57825182556020909201916001909101906137ed565b5061381692915061381a565b5090565b6104c091905b808211156138165760008155600101613820560094bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa33a165627a7a72305820e77b9299cbaa2762a5a9c1abe9a4abf34a327531c3d16c906a193979f58144880029";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<>();
        _addresses.put("1528817613108", "0x3aabb5c42d93e3e621eca0269ad6a080142e0131");
    }

    protected DogeClaimManager(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DogeClaimManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<DepositBondedEventResponse> getDepositBondedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("DepositBonded", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<DepositBondedEventResponse> responses = new ArrayList<DepositBondedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositBondedEventResponse typedResponse = new DepositBondedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<DepositBondedEventResponse> depositBondedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("DepositBonded", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, DepositBondedEventResponse>() {
            @Override
            public DepositBondedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                DepositBondedEventResponse typedResponse = new DepositBondedEventResponse();
                typedResponse.log = log;
                typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<DepositUnbondedEventResponse> getDepositUnbondedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("DepositUnbonded", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<DepositUnbondedEventResponse> responses = new ArrayList<DepositUnbondedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositUnbondedEventResponse typedResponse = new DepositUnbondedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<DepositUnbondedEventResponse> depositUnbondedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("DepositUnbonded", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, DepositUnbondedEventResponse>() {
            @Override
            public DepositUnbondedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                DepositUnbondedEventResponse typedResponse = new DepositUnbondedEventResponse();
                typedResponse.log = log;
                typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<SuperblockClaimCreatedEventResponse> getSuperblockClaimCreatedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("SuperblockClaimCreated", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<SuperblockClaimCreatedEventResponse> responses = new ArrayList<SuperblockClaimCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimCreatedEventResponse typedResponse = new SuperblockClaimCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.superblockId = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SuperblockClaimCreatedEventResponse> superblockClaimCreatedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("SuperblockClaimCreated", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, SuperblockClaimCreatedEventResponse>() {
            @Override
            public SuperblockClaimCreatedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                SuperblockClaimCreatedEventResponse typedResponse = new SuperblockClaimCreatedEventResponse();
                typedResponse.log = log;
                typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.superblockId = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<SuperblockClaimChallengedEventResponse> getSuperblockClaimChallengedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("SuperblockClaimChallenged", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<SuperblockClaimChallengedEventResponse> responses = new ArrayList<SuperblockClaimChallengedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimChallengedEventResponse typedResponse = new SuperblockClaimChallengedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SuperblockClaimChallengedEventResponse> superblockClaimChallengedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("SuperblockClaimChallenged", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, SuperblockClaimChallengedEventResponse>() {
            @Override
            public SuperblockClaimChallengedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                SuperblockClaimChallengedEventResponse typedResponse = new SuperblockClaimChallengedEventResponse();
                typedResponse.log = log;
                typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<SessionDecidedEventResponse> getSessionDecidedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("SessionDecided", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<SessionDecidedEventResponse> responses = new ArrayList<SessionDecidedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SessionDecidedEventResponse typedResponse = new SessionDecidedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.winner = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.loser = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SessionDecidedEventResponse> sessionDecidedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("SessionDecided", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, SessionDecidedEventResponse>() {
            @Override
            public SessionDecidedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                SessionDecidedEventResponse typedResponse = new SessionDecidedEventResponse();
                typedResponse.log = log;
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.winner = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.loser = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<SuperblockClaimSuccessfulEventResponse> getSuperblockClaimSuccessfulEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("SuperblockClaimSuccessful", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<SuperblockClaimSuccessfulEventResponse> responses = new ArrayList<SuperblockClaimSuccessfulEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimSuccessfulEventResponse typedResponse = new SuperblockClaimSuccessfulEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.superblockId = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SuperblockClaimSuccessfulEventResponse> superblockClaimSuccessfulEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("SuperblockClaimSuccessful", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, SuperblockClaimSuccessfulEventResponse>() {
            @Override
            public SuperblockClaimSuccessfulEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                SuperblockClaimSuccessfulEventResponse typedResponse = new SuperblockClaimSuccessfulEventResponse();
                typedResponse.log = log;
                typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.superblockId = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<SuperblockClaimFailedEventResponse> getSuperblockClaimFailedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("SuperblockClaimFailed", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<SuperblockClaimFailedEventResponse> responses = new ArrayList<SuperblockClaimFailedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimFailedEventResponse typedResponse = new SuperblockClaimFailedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.superblockId = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SuperblockClaimFailedEventResponse> superblockClaimFailedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("SuperblockClaimFailed", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, SuperblockClaimFailedEventResponse>() {
            @Override
            public SuperblockClaimFailedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                SuperblockClaimFailedEventResponse typedResponse = new SuperblockClaimFailedEventResponse();
                typedResponse.log = log;
                typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.superblockId = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<VerificationGameStartedEventResponse> getVerificationGameStartedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("VerificationGameStarted", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<VerificationGameStartedEventResponse> responses = new ArrayList<VerificationGameStartedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VerificationGameStartedEventResponse typedResponse = new VerificationGameStartedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<VerificationGameStartedEventResponse> verificationGameStartedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("VerificationGameStarted", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, VerificationGameStartedEventResponse>() {
            @Override
            public VerificationGameStartedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                VerificationGameStartedEventResponse typedResponse = new VerificationGameStartedEventResponse();
                typedResponse.log = log;
                typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public List<ErrorClaimEventResponse> getErrorClaimEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("ErrorClaim", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<ErrorClaimEventResponse> responses = new ArrayList<ErrorClaimEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ErrorClaimEventResponse typedResponse = new ErrorClaimEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.err = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ErrorClaimEventResponse> errorClaimEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("ErrorClaim", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ErrorClaimEventResponse>() {
            @Override
            public ErrorClaimEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                ErrorClaimEventResponse typedResponse = new ErrorClaimEventResponse();
                typedResponse.log = log;
                typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.err = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<NewSessionEventResponse> getNewSessionEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("NewSession", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<NewSessionEventResponse> responses = new ArrayList<NewSessionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewSessionEventResponse typedResponse = new NewSessionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewSessionEventResponse> newSessionEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("NewSession", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewSessionEventResponse>() {
            @Override
            public NewSessionEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                NewSessionEventResponse typedResponse = new NewSessionEventResponse();
                typedResponse.log = log;
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<ChallengerConvictedEventResponse> getChallengerConvictedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("ChallengerConvicted", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<ChallengerConvictedEventResponse> responses = new ArrayList<ChallengerConvictedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ChallengerConvictedEventResponse typedResponse = new ChallengerConvictedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ChallengerConvictedEventResponse> challengerConvictedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("ChallengerConvicted", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ChallengerConvictedEventResponse>() {
            @Override
            public ChallengerConvictedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                ChallengerConvictedEventResponse typedResponse = new ChallengerConvictedEventResponse();
                typedResponse.log = log;
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<ClaimantConvictedEventResponse> getClaimantConvictedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("ClaimantConvicted", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<ClaimantConvictedEventResponse> responses = new ArrayList<ClaimantConvictedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ClaimantConvictedEventResponse typedResponse = new ClaimantConvictedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ClaimantConvictedEventResponse> claimantConvictedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("ClaimantConvicted", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ClaimantConvictedEventResponse>() {
            @Override
            public ClaimantConvictedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                ClaimantConvictedEventResponse typedResponse = new ClaimantConvictedEventResponse();
                typedResponse.log = log;
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<QueryMerkleRootHashesEventResponse> getQueryMerkleRootHashesEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("QueryMerkleRootHashes", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<QueryMerkleRootHashesEventResponse> responses = new ArrayList<QueryMerkleRootHashesEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            QueryMerkleRootHashesEventResponse typedResponse = new QueryMerkleRootHashesEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<QueryMerkleRootHashesEventResponse> queryMerkleRootHashesEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("QueryMerkleRootHashes", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, QueryMerkleRootHashesEventResponse>() {
            @Override
            public QueryMerkleRootHashesEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                QueryMerkleRootHashesEventResponse typedResponse = new QueryMerkleRootHashesEventResponse();
                typedResponse.log = log;
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<RespondMerkleRootHashesEventResponse> getRespondMerkleRootHashesEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("RespondMerkleRootHashes", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicBytes>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<RespondMerkleRootHashesEventResponse> responses = new ArrayList<RespondMerkleRootHashesEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RespondMerkleRootHashesEventResponse typedResponse = new RespondMerkleRootHashesEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.data = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RespondMerkleRootHashesEventResponse> respondMerkleRootHashesEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("RespondMerkleRootHashes", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicBytes>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, RespondMerkleRootHashesEventResponse>() {
            @Override
            public RespondMerkleRootHashesEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                RespondMerkleRootHashesEventResponse typedResponse = new RespondMerkleRootHashesEventResponse();
                typedResponse.log = log;
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.data = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<QueryBlockHeaderEventResponse> getQueryBlockHeaderEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("QueryBlockHeader", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<QueryBlockHeaderEventResponse> responses = new ArrayList<QueryBlockHeaderEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            QueryBlockHeaderEventResponse typedResponse = new QueryBlockHeaderEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.blockHash = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<QueryBlockHeaderEventResponse> queryBlockHeaderEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("QueryBlockHeader", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, QueryBlockHeaderEventResponse>() {
            @Override
            public QueryBlockHeaderEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                QueryBlockHeaderEventResponse typedResponse = new QueryBlockHeaderEventResponse();
                typedResponse.log = log;
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.blockHash = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<RespondBlockHeaderEventResponse> getRespondBlockHeaderEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("RespondBlockHeader", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicBytes>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<RespondBlockHeaderEventResponse> responses = new ArrayList<RespondBlockHeaderEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RespondBlockHeaderEventResponse typedResponse = new RespondBlockHeaderEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.data = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RespondBlockHeaderEventResponse> respondBlockHeaderEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("RespondBlockHeader", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicBytes>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, RespondBlockHeaderEventResponse>() {
            @Override
            public RespondBlockHeaderEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                RespondBlockHeaderEventResponse typedResponse = new RespondBlockHeaderEventResponse();
                typedResponse.log = log;
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.data = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<SessionErrorEventResponse> getSessionErrorEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("SessionError", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<SessionErrorEventResponse> responses = new ArrayList<SessionErrorEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SessionErrorEventResponse typedResponse = new SessionErrorEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.err = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SessionErrorEventResponse> sessionErrorEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("SessionError", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, SessionErrorEventResponse>() {
            @Override
            public SessionErrorEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                SessionErrorEventResponse typedResponse = new SessionErrorEventResponse();
                typedResponse.log = log;
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.err = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<DepositMadeEventResponse> getDepositMadeEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("DepositMade", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<DepositMadeEventResponse> responses = new ArrayList<DepositMadeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositMadeEventResponse typedResponse = new DepositMadeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.who = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<DepositMadeEventResponse> depositMadeEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("DepositMade", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, DepositMadeEventResponse>() {
            @Override
            public DepositMadeEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                DepositMadeEventResponse typedResponse = new DepositMadeEventResponse();
                typedResponse.log = log;
                typedResponse.who = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<DepositWithdrawnEventResponse> getDepositWithdrawnEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("DepositWithdrawn", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<DepositWithdrawnEventResponse> responses = new ArrayList<DepositWithdrawnEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositWithdrawnEventResponse typedResponse = new DepositWithdrawnEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.who = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<DepositWithdrawnEventResponse> depositWithdrawnEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("DepositWithdrawn", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, DepositWithdrawnEventResponse>() {
            @Override
            public DepositWithdrawnEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                DepositWithdrawnEventResponse typedResponse = new DepositWithdrawnEventResponse();
                typedResponse.log = log;
                typedResponse.who = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<TransactionReceipt> query(byte[] sessionId, BigInteger step, byte[] data) {
        final Function function = new Function(
                "query", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(sessionId), 
                new org.web3j.abi.datatypes.generated.Uint256(step), 
                new org.web3j.abi.datatypes.generated.Bytes32(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> scryptChecker() {
        final Function function = new Function("scryptChecker", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> performVerification(byte[] sessionId) {
        final Function function = new Function(
                "performVerification", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(sessionId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> sessionsCount() {
        final Function function = new Function("sessionsCount", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> withdrawDeposit(BigInteger amount) {
        final Function function = new Function(
                "withdrawDeposit", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> makeDeposit(BigInteger weiValue) {
        final Function function = new Function(
                "makeDeposit", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<BigInteger> minDeposit() {
        final Function function = new Function("minDeposit", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> respond(byte[] sessionId, BigInteger step, byte[] data) {
        final Function function = new Function(
                "respond", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(sessionId), 
                new org.web3j.abi.datatypes.generated.Uint256(step), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> challengeTimeout() {
        final Function function = new Function("challengeTimeout", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> timeout(byte[] sessionId) {
        final Function function = new Function(
                "timeout", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(sessionId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple6<byte[], byte[], String, String, BigInteger, BigInteger>> sessions(byte[] param0) {
        final Function function = new Function("sessions", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple6<byte[], byte[], String, String, BigInteger, BigInteger>>(
                new Callable<Tuple6<byte[], byte[], String, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple6<byte[], byte[], String, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<byte[], byte[], String, String, BigInteger, BigInteger>(
                                (byte[]) results.get(0).getValue(), 
                                (byte[]) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> beginBattleSession(byte[] claimId, String challenger, String claimant) {
        final Function function = new Function(
                "beginBattleSession", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(claimId), 
                new org.web3j.abi.datatypes.Address(challenger), 
                new org.web3j.abi.datatypes.Address(claimant)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getDeposit(String who) {
        final Function function = new Function("getDeposit", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(who)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> superblockDuration() {
        final Function function = new Function("superblockDuration", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> deposits(String param0) {
        final Function function = new Function("deposits", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public static RemoteCall<DogeClaimManager> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _superblocks) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_superblocks)));
        return deployRemoteCall(DogeClaimManager.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<DogeClaimManager> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _superblocks) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_superblocks)));
        return deployRemoteCall(DogeClaimManager.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public RemoteCall<TransactionReceipt> setScryptChecker(String _scryptChecker) {
        final Function function = new Function(
                "setScryptChecker", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_scryptChecker)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getBondedDeposit(byte[] claimId, String account) {
        final Function function = new Function("getBondedDeposit", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(claimId), 
                new org.web3j.abi.datatypes.Address(account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> unbondDeposit(byte[] claimId, String account) {
        final Function function = new Function(
                "unbondDeposit", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(claimId), 
                new org.web3j.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> proposeSuperblock(byte[] _blocksMerkleRoot, BigInteger _accumulatedWork, BigInteger _timestamp, byte[] _lastHash, byte[] _parentHash) {
        final Function function = new Function(
                "proposeSuperblock", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_blocksMerkleRoot), 
                new org.web3j.abi.datatypes.generated.Uint256(_accumulatedWork), 
                new org.web3j.abi.datatypes.generated.Uint256(_timestamp), 
                new org.web3j.abi.datatypes.generated.Bytes32(_lastHash), 
                new org.web3j.abi.datatypes.generated.Bytes32(_parentHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> challengeSuperblock(byte[] superblockId) {
        final Function function = new Function(
                "challengeSuperblock", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> runNextBattleSession(byte[] claimId) {
        final Function function = new Function(
                "runNextBattleSession", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(claimId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> checkClaimFinished(byte[] claimId) {
        final Function function = new Function(
                "checkClaimFinished", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(claimId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<byte[]> getSession(byte[] claimId, String challenger) {
        final Function function = new Function("getSession", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(claimId), 
                new org.web3j.abi.datatypes.Address(challenger)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<TransactionReceipt> scryptVerified(byte[] _proposalId) {
        final Function function = new Function(
                "scryptVerified", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_proposalId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> scryptFailed(byte[] _proposalId) {
        final Function function = new Function(
                "scryptFailed", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_proposalId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static DogeClaimManager load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DogeClaimManager(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static DogeClaimManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DogeClaimManager(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class DepositBondedEventResponse {
        public Log log;

        public byte[] claimId;

        public String account;

        public BigInteger amount;
    }

    public static class DepositUnbondedEventResponse {
        public Log log;

        public byte[] claimId;

        public String account;

        public BigInteger amount;
    }

    public static class SuperblockClaimCreatedEventResponse {
        public Log log;

        public byte[] claimId;

        public String claimant;

        public byte[] superblockId;
    }

    public static class SuperblockClaimChallengedEventResponse {
        public Log log;

        public byte[] claimId;

        public String challenger;
    }

    public static class SessionDecidedEventResponse {
        public Log log;

        public byte[] sessionId;

        public String winner;

        public String loser;
    }

    public static class SuperblockClaimSuccessfulEventResponse {
        public Log log;

        public byte[] claimId;

        public String claimant;

        public byte[] superblockId;
    }

    public static class SuperblockClaimFailedEventResponse {
        public Log log;

        public byte[] claimId;

        public String claimant;

        public byte[] superblockId;
    }

    public static class VerificationGameStartedEventResponse {
        public Log log;

        public byte[] claimId;

        public String claimant;

        public String challenger;

        public byte[] sessionId;
    }

    public static class ErrorClaimEventResponse {
        public Log log;

        public byte[] claimId;

        public BigInteger err;
    }

    public static class NewSessionEventResponse {
        public Log log;

        public byte[] sessionId;

        public String claimant;

        public String challenger;
    }

    public static class ChallengerConvictedEventResponse {
        public Log log;

        public byte[] sessionId;

        public String challenger;
    }

    public static class ClaimantConvictedEventResponse {
        public Log log;

        public byte[] sessionId;

        public String claimant;
    }

    public static class QueryMerkleRootHashesEventResponse {
        public Log log;

        public byte[] sessionId;

        public String claimant;
    }

    public static class RespondMerkleRootHashesEventResponse {
        public Log log;

        public byte[] sessionId;

        public String challenger;

        public byte[] data;
    }

    public static class QueryBlockHeaderEventResponse {
        public Log log;

        public byte[] sessionId;

        public String claimant;

        public byte[] blockHash;
    }

    public static class RespondBlockHeaderEventResponse {
        public Log log;

        public byte[] sessionId;

        public String challenger;

        public byte[] data;
    }

    public static class SessionErrorEventResponse {
        public Log log;

        public byte[] sessionId;

        public BigInteger err;
    }

    public static class DepositMadeEventResponse {
        public Log log;

        public String who;

        public BigInteger amount;
    }

    public static class DepositWithdrawnEventResponse {
        public Log log;

        public String who;

        public BigInteger amount;
    }
}
