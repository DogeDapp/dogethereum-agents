package org.dogethereum.dogesubmitter.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.StaticArray9;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.3.1.
 */
public class DogeRelay extends Contract {
    private static final String BINARY = "0x608060405234801561001057600080fd5b50604051602080613ea88339810180604052810190808051906020019092919050505080600560006101000a81548160ff0219169083600281111561005157fe5b021790555050613e42806100666000396000f3006080604052600436106100ba576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631defb765146100bf57806349347272146101165780635292a59014610141578063541e9cd7146101865780636e2a8e7c146101fb5780637037c95d14610282578063922407ca1461034f5780639be7076a146103a2578063aa863036146103cd578063b88da759146104a1578063c32e6af0146104e2578063e1bafb91146105d6575b600080fd5b3480156100cb57600080fd5b506100d4610619565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561012257600080fd5b5061012b61063f565b6040518082815260200191505060405180910390f35b34801561014d57600080fd5b506101706004803603810190808035600019169060200190929190505050610649565b6040518082815260200191505060405180910390f35b34801561019257600080fd5b506101e160048036038101908080359060200190929190803567ffffffffffffffff16906020019092919080356fffffffffffffffffffffffffffffffff169060200190929190505050610d3b565b604051808215151515815260200191505060405180910390f35b34801561020757600080fd5b5061026c600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190505050610d80565b6040518082815260200191505060405180910390f35b34801561028e57600080fd5b50610339600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190505050610d98565b6040518082815260200191505060405180910390f35b34801561035b57600080fd5b50610364610e08565b6040518082600960200280838360005b8381101561038f578082015181840152602081019050610374565b5050505090500191505060405180910390f35b3480156103ae57600080fd5b506103b7610e96565b6040518082815260200191505060405180910390f35b3480156103d957600080fd5b5061048b600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001909291908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190929190505050610eb2565b6040518082815260200191505060405180910390f35b3480156104ad57600080fd5b506104cc60048036038101908080359060200190929190505050610f49565b6040518082815260200191505060405180910390f35b3480156104ee57600080fd5b506105c0600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001909291908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f82565b6040518082815260200191505060405180910390f35b3480156105e257600080fd5b50610617600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611168565b005b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600354905090565b600080600080600080600080600080600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610705577f6080b2cdc7fc4777ed1e1066af5de1df45ae9186adbdb7aec21fde27a3e17e4c60006001026127426040518083600019166000191681526020018281526020019250505060405180910390a160009950610d2d565b600660008c6001900481526020019081526020016000209850886000016001015497508860000160020154965061073b87611216565b95506000866fffffffffffffffffffffffffffffffff1614156107ad577f6080b2cdc7fc4777ed1e1066af5de1df45ae9186adbdb7aec21fde27a3e17e4c8860010261272e6040518083600019166000191681526020018281526020019250505060405180910390a160009950610d2d565b60006107b889611216565b6fffffffffffffffffffffffffffffffff16141515610826577f6080b2cdc7fc4777ed1e1066af5de1df45ae9186adbdb7aec21fde27a3e17e4c886001026127386040518083600019166000191681526020018281526020019250505060405180910390a160009950610d2d565b8860000160000160089054906101000a900463ffffffff16945061084987611254565b60010167ffffffffffffffff16935061086187611298565b925060028081111561086f57fe5b600560009054906101000a900460ff16600281111561088a57fe5b141515610a83576000600160009054906101000a900463ffffffff1663ffffffff161415610934578263ffffffff168563ffffffff16141580156108d5575060008363ffffffff1614155b1561092f577f6080b2cdc7fc4777ed1e1066af5de1df45ae9186adbdb7aec21fde27a3e17e4c8860010261271a6040518083600019166000191681526020018281526020019250505060405180910390a160009950610d2d565b610a82565b60018060009054906101000a900463ffffffff1663ffffffff16141561095957610a81565b61098961096d610968896112cb565b6112ee565b63ffffffff1661097c896112ee565b63ffffffff160384611321565b91506001600281111561099857fe5b600560009054906101000a900460ff1660028111156109b357fe5b1480156109e7575060786109c6886112ee565b8a60000160000160049054906101000a900463ffffffff160363ffffffff16115b80156109f657506202673c8410155b15610a0357631e0fffff91505b8163ffffffff168563ffffffff1614158015610a26575060008263ffffffff1614155b15610a80577f6080b2cdc7fc4777ed1e1066af5de1df45ae9186adbdb7aec21fde27a3e17e4c886001026127246040518083600019166000191681526020018281526020019250505060405180910390a160009950610d2d565b5b5b5b88600260008a815260200190815260200160002060008201816000016000820160009054906101000a900463ffffffff168160000160006101000a81548163ffffffff021916908363ffffffff1602179055506000820160049054906101000a900463ffffffff168160000160046101000a81548163ffffffff021916908363ffffffff1602179055506000820160089054906101000a900463ffffffff168160000160086101000a81548163ffffffff021916908363ffffffff16021790555060008201600c9054906101000a900463ffffffff1681600001600c6101000a81548163ffffffff021916908363ffffffff16021790555060018201548160010155600282015481600201556003820154816003015550506004820154816004015560058201548160050155905050610bbc8888611423565b600660008c6001900481526020019081526020016000206000808201600080820160006101000a81549063ffffffff02191690556000820160046101000a81549063ffffffff02191690556000820160086101000a81549063ffffffff021916905560008201600c6101000a81549063ffffffff02191690556001820160009055600282016000905560038201600090555050600482016000905560058201600090555050610c6a85611580565b7d0fffff000000000000000000000000000000000000000000000000000000811515610c9257fe5b0486019050610ca188826115c4565b600454816fffffffffffffffffffffffffffffffff16101515610cdf5787600381905550806fffffffffffffffffffffffffffffffff166004819055505b7f6080b2cdc7fc4777ed1e1066af5de1df45ae9186adbdb7aec21fde27a3e17e4c88600102856040518083600019166000191681526020018281526020019250505060405180910390a18399505b505050505050505050919050565b600080600454141515610d515760009050610d79565b600160048190555083600381905550610d6a848461160d565b610d7484836115c4565b600190505b9392505050565b6000610d90836000855185611656565b905092915050565b600080600080600080935060009250600091505b85821015610dfd57610dbe8885611d2b565b63ffffffff169050600484019350610de5888583610ddc8b88611f40565b60019004611656565b94508084019350602083019250600182019150610dac565b505050509392505050565b610e10613d48565b600080600354915081836000600981101515610e2857fe5b602002018181525050600090505b6008811015610e8e57600080610e4c8484611f56565b63ffffffff1663ffffffff168152602001908152602001600020548360018301600981101515610e7857fe5b6020020181815250508080600101915050610e36565b829250505090565b6000610ea3600354611254565b67ffffffffffffffff16905090565b600080610ebe86611fa7565b9050604086511415610f1f577f65bd72698b9ffcfb3c7cb4c7414e13225cabd57fb690e183ae8c01c8ec268ebd81600102614e526040518083600019166000191681526020018281526020019250505060405180910390a160009150610f40565b6001610f2d828787876120b9565b1415610f3b57809150610f40565b600091505b50949350505050565b60006002600083815260200190815260200160002060000160000160009054906101000a900463ffffffff1663ffffffff169050919050565b6000806000610f9388888888610eb2565b915060008214151561110a578373ffffffffffffffffffffffffffffffffffffffff16631c0b636789846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561102e578082015181840152602081019050611013565b50505050905090810190601f16801561105b5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561107b57600080fd5b505af115801561108f573d6000803e3d6000fd5b505050506040513d60208110156110a557600080fd5b810190808051906020019092919050505090507f4e64138cc499eb1adf9edff9ef69bd45c56ac4bfd307540952e4c9d51eab55c182600102826040518083600019166000191681526020018281526020019250505060405180910390a180925061115d565b7f4e64138cc499eb1adf9edff9ef69bd45c56ac4bfd307540952e4c9d51eab55c1600060010261753a6040518083600019166000191681526020018281526020019250505060405180910390a161753a92505b505095945050505050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480156111c7575060008173ffffffffffffffffffffffffffffffffffffffff1614155b15156111d257600080fd5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60007001000000000000000000000000000000008060026000858152602001908152602001600020600401540281151561124c57fe5b049050919050565b60007801000000000000000000000000000000000000000000000000600260008481526020019081526020016000206004015481151561129057fe5b049050919050565b60006002600083815260200190815260200160002060000160000160089054906101000a900463ffffffff169050919050565b600060026000838152602001908152602001600020600001600201549050919050565b60006002600083815260200190815260200160002060000160000160049054906101000a900463ffffffff169050919050565b600080600080600080603c9450879350600860070b85850360070b81151561134557fe5b0585019350600460070b8560070b81151561135c57fe5b0585039250600260070b8560070b81151561137357fe5b05850191508260070b8460070b121561138e578293506113a1565b8160070b8460070b13156113a0578193505b5b6113aa87611580565b90508360070b810290508460070b818115156113c257fe5b0490507d0fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81111561140d577d0fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90505b6114168161224d565b9550505050505092915050565b60008060008085600080600160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020019081526020016000208190555061147a86600160009054906101000a900463ffffffff166122f3565b60018060008282829054906101000a900463ffffffff160192506101000a81548163ffffffff021916908363ffffffff1602179055506114c58660016114bf88611254565b0161160d565b600093506114d285612347565b92506114e084600085612396565b93506114eb86611254565b67ffffffffffffffff169150600190505b600881101561155d576001611510826123d3565b8381151561151a57fe5b0614156115365761152f848260040285612396565b9350611550565b61154d84826004026115488885611f56565b612396565b93505b80806001019150506114fc565b836002600088815260200190815260200160002060050181905550505050505050565b600080600063010000008463ffffffff1681151561159a57fe5b0463ffffffff16915062ffffff841663ffffffff169050600382036101000a810292505050919050565b6000600260008481526020019081526020016000206004015490506115eb816010846123e0565b9050806002600085815260200190815260200160002060040181905550505050565b600060026000848152602001908152602001600020600401549050611634816000846124a1565b9050806002600085815260200190815260200160002060040181905550505050565b6000806000611663613d6c565b600060508710156116c4577f6080b2cdc7fc4777ed1e1066af5de1df45ae9186adbdb7aec21fde27a3e17e4c60006001026127426040518083600019166000191681526020018281526020019250505060405180910390a160009450611d1f565b6007600081546001019190508190555060066000600754815260200190815260200160002093506116f5898961250a565b8460000160008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160086101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001600c6101000a81548163ffffffff021916908363ffffffff1602179055506080820151816001015560a0820151816002015560c082015181600301559050508360000160010154925061188e8460000160e060405190810160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160089054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201600c9054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600182015481526020016002820154815260200160038201548152505061261e565b15611b1f576118a86118a38a8a8a8c01612639565b6126a1565b91506118ca8460000160000160089054906101000a900463ffffffff16611580565b6118d783600001516128f0565b1115611932577f6080b2cdc7fc4777ed1e1066af5de1df45ae9186adbdb7aec21fde27a3e17e4c836001026127926040518083600019166000191681526020018281526020019250505060405180910390a160009450611d1f565b61193c8383612921565b905060018114151561199b577f6080b2cdc7fc4777ed1e1066af5de1df45ae9186adbdb7aec21fde27a3e17e4c83600102826040518083600019166000191681526020018281526020019250505060405180910390a160009450611d1f565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634754efd06119eb8b60508b8d01038b8d01612639565b8460000151600102336007546001026040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200185600019166000191681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018360001916600019168152602001828103825286818151815260200191508051906020019080838360005b83811015611ab3578082015181840152602081019050611a98565b50505050905090810190601f168015611ae05780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015611b0257600080fd5b505af1158015611b16573d6000803e3d6000fd5b50505050611d1a565b611b3f8460000160000160089054906101000a900463ffffffff16611580565b611b48876128f0565b1115611ba3577f6080b2cdc7fc4777ed1e1066af5de1df45ae9186adbdb7aec21fde27a3e17e4c836001026127926040518083600019166000191681526020018281526020019250505060405180910390a160009450611d1f565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634754efd0611bee8b60006050612639565b88600102336007546001026040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200185600019166000191681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018360001916600019168152602001828103825286818151815260200191508051906020019080838360005b83811015611cb2578082015181840152602081019050611c97565b50505050905090810190601f168015611cdf5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015611d0157600080fd5b505af1158015611d15573d6000803e3d6000fd5b505050505b600194505b50505050949350505050565b60008260038301815181101515611d3e57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090046101008460028501815181101515611dc057fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900402620100008560018601815181101515611e4457fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090040263010000008686815181101515611ec657fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900402010101905092915050565b6000808260208501015190508091505092915050565b60007c01000000000000000000000000000000000000000000000000000000008260200260020a600260008681526020019081526020016000206005015402811515611f9e57fe5b04905092915050565b60006120b2600280846040518082805190602001908083835b602083101515611fe55780518252602082019150602081019050602083039250611fc0565b6001836020036101000a0380198251168184511680821785525050505050509050019150506020604051808303816000865af1158015612029573d6000803e3d6000fd5b5050506040513d602081101561203e57600080fd5b81019080805190602001909291905050506040518082600019166000191681526020019150506020604051808303816000865af1158015612083573d6000803e3d6000fd5b5050506040513d602081101561209857600080fd5b8101908080519060200190929190505050600190046128f0565b9050919050565b60006120c48261299f565b1561211f577f65bd72698b9ffcfb3c7cb4c7414e13225cabd57fb690e183ae8c01c8ec268ebd85600102614e346040518083600019166000191681526020018281526020019250505060405180910390a1614e349050612245565b612128826129ea565b1515612184577f65bd72698b9ffcfb3c7cb4c7414e13225cabd57fb690e183ae8c01c8ec268ebd85600102614e3e6040518083600019166000191681526020018281526020019250505060405180910390a1614e3e9050612245565b61218d82612a28565b612198868686612a4b565b1415156121f5577f65bd72698b9ffcfb3c7cb4c7414e13225cabd57fb690e183ae8c01c8ec268ebd85600102614e486040518083600019166000191681526020018281526020019250505060405180910390a1614e489050612245565b7f65bd72698b9ffcfb3c7cb4c7414e13225cabd57fb690e183ae8c01c8ec268ebd8560010260016040518083600019166000191681526020018281526020019250505060405180910390a1600190505b949350505050565b6000806000612268600761226086612aeb565b016003612b19565b9150600090506003821115156122945761228d62ffffff851683600303600802612b32565b90506122af565b6122a48460038403600802612b19565b905062ffffff811690505b600062800000821663ffffffff1611156122dd576122d48163ffffffff166008612b19565b90506001820191505b6122e8826018612b32565b811792505050919050565b600080600260008581526020019081526020016000206004015491508263ffffffff169050612324826008836124a1565b915081600260008681526020019081526020016000206004018190555050505050565b600078010000000000000000000000000000000000000000000000006801000000000000000060026000858152602001908152602001600020600401540281151561238e57fe5b049050919050565b600060405184815282601c1a8482015382601d1a6001850182015382601e1a6002850182015382601f1a6003850182015380519150509392505050565b60008160050a9050919050565b60006040518481528260101a848201538260111a600185018201538260121a600285018201538260131a600385018201538260141a600485018201538260151a600585018201538260161a600685018201538260171a600785018201538260181a600885018201538260191a6009850182015382601a1a600a850182015382601b1a600b850182015382601c1a600c850182015382601d1a600d850182015382601e1a600e850182015382601f1a600f850182015380519150509392505050565b60006040518481528260181a848201538260191a6001850182015382601a1a6002850182015382601b1a6003850182015382601c1a6004850182015382601d1a6005850182015382601e1a6006850182015382601f1a6007850182015380519150509392505050565b612512613dc0565b61251c8383612b42565b816000019063ffffffff16908163ffffffff168152505061253d8383612b76565b816020019063ffffffff16908163ffffffff168152505061255e8383612baa565b816040019063ffffffff16908163ffffffff16815250506125e9600261258685856050612bde565b6040518082600019166000191681526020019150506020604051808303816000865af11580156125ba573d6000803e3d6000fd5b5050506040513d60208110156125cf57600080fd5b8101908080519060200190929190505050600190046128f0565b8160800181815250506125fc8383612c08565b8160a001818152505061260f8383612c26565b8160c001818152505092915050565b60008061010083600001511663ffffffff1614159050919050565b6060600060608484039150816040519080825280601f01601f1916602001820160405280156126775781602001602082028038833980820191505090505b5090508160208201838760208a010160045afa151561269557600080fd5b80925050509392505050565b6126a9613d6c565b600080600060606000605094506126c08786612c44565b80945081955050506126d3878686612639565b91506127de600280846040518082805190602001908083835b60208310151561271157805182526020820191506020810190506020830392506126ec565b6001836020036101000a0380198251168184511680821785525050505050509050019150506020604051808303816000865af1158015612755573d6000803e3d6000fd5b5050506040513d602081101561276a57600080fd5b81019080805190602001909291905050506040518082600019166000191681526020019150506020604051808303816000865af11580156127af573d6000803e3d6000fd5b5050506040513d60208110156127c457600080fd5b8101908080519060200190929190505050600190046128f0565b8660200181815250508394506127f48786612c79565b86600001818152505060208501945061280f87866000612d38565b8191508760e001819750829052505061282a87866020612e06565b8661010001818152505060048501945061284687866000612d38565b81915087606001819750829052505061286187866020612e06565b86608001818152505060288501945061287a8786612c79565b8660c001818152505060288501945061289587866020612e06565b866101200181815250506128a88761361b565b886040018960a001828152508294508381525050505060148382031180156128d4575060018660a00151145b156128e6576127748660a00181815250505b5050505050919050565b600060405160005b6020811015612916578381601f031a818301536001810190506128f8565b508051915050919050565b60008082610100015114151561293b5761274c9050612999565b60018260a00151141515612955578160a001519050612999565b81604001516129648484613951565b1415156129755761277e9050612999565b8160c001516129838361396e565b141515612994576127889050612999565b600190505b92915050565b60008060006003549150600090505b60068110156129de57818414156129c857600192506129e3565b6129d1826112cb565b91506001810190506129ae565b600092505b5050919050565b6000806129f683611254565b67ffffffffffffffff1690506000811415612a145760009150612a22565b82612a1e82613997565b1491505b50919050565b600060026000838152602001908152602001600020600001600301549050919050565b6000806000806000806000899550600094505b8751851015612adb578785815181101515612a7557fe5b906020019060200201519350600289811515612a8d57fe5b0692506001831415612aa457839150859050612ab5565b6000831415612ab4578591508390505b5b612abf8282613a38565b9550600289811515612acd57fe5b049850600185019450612a5e565b8596505050505050509392505050565b6000808290505b6000811115612b1357612b06816001612b19565b9050600182019150612af2565b50919050565b60008160020a83811515612b2957fe5b04905092915050565b60008160020a8302905092915050565b600081600484010151630100000081601b1a026201000082601a1a02016101008260191a02018160181a0191505092915050565b600081604c84010151630100000081601b1a026201000082601a1a02016101008260191a02018160181a0191505092915050565b600081605084010151630100000081601b1a026201000082601a1a02016101008260191a02018160181a0191505092915050565b60006040516020818486602089010160025afa1515612bfc57600080fd5b80519150509392505050565b600080826024850101519050612c1d816128f0565b91505092915050565b600080826044850101519050612c3b816128f0565b91505092915050565b600080612c5684600485016000613b16565b8092508193505050612c6a84836000613bac565b91506004820191509250929050565b600080600090505b6020811015612d315783518382011015612d245780601f0360080284848301815181101515612cac57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090049060020a02820191505b8080600101915050612c81565b5092915050565b6060600080600060606000612d4d8989613c2a565b80995081955050506000871480612d6357508387115b15612d7057839250612d74565b8692505b82604051908082528060200260200182016040528015612da35781602001602082028038833980820191505090505b509150600090505b82811015612df457612dc5612dc08a8a612c79565b6128f0565b8282815181101515612dd357fe5b90602001906020020181815250506020880197508080600101915050612dab565b81889550955050505050935093915050565b60006008821415612e97578383815181101515612e1f57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900460ff169050613614565b6010821415612fab576101008460018501815181101515612eb457fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004028484815181101515612f3157fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090040161ffff169050613614565b60208214156131cc5763010000008460038501815181101515612fca57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090040262010000856002860181518110151561304e57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090040261010086600187018151811015156130d157fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900402868681518110151561314e57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900401010163ffffffff169050613614565b60408214156136135767010000000000000084600785018151811015156131ef57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004026601000000000000856006860181518110151561327757fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004026501000000000086600587018151811015156132fe57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900402640100000000876004880181518110151561338457fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004026301000000886003890181518110151561340957fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900402620100008960028a0181518110151561348d57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004026101008a60018b0181518110151561351057fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004028a8a81518110151561358d57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090040101010101010167ffffffffffffffff169050613614565b5b9392505050565b60008060008060008060009150600090505b865181101561390f5760fa7f010000000000000000000000000000000000000000000000000000000000000002878281518110151561366857fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148015613781575060be7f010000000000000000000000000000000000000000000000000000000000000002876001830181518110151561371257fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b801561382c5750606d7f01000000000000000000000000000000000000000000000000000000000000000287600283018151811015156137bd57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80156138d75750606d7f010000000000000000000000000000000000000000000000000000000000000002876003830181518110151561386857fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b156139045781156138f957600060048403612760829250955095509550613947565b600191506004810192505b80600101905061362d565b81151561392d5760006004840361276a829250955095509550613947565b6139378784612c79565b6004840360018090509550955095505b5050509193909250565b60006139668383608001518460600151612a4b565b905092915050565b600061399061398b83602001518461010001518560e00151612a4b565b6128f0565b9050919050565b60008060006003549150600160080390505b836139b383611254565b67ffffffffffffffff161115613a2e575b6139cd816123d3565b846139d784611254565b67ffffffffffffffff16031080156139ef5750600081115b156139ff576001810390506139c4565b600080613a0c8484611f56565b63ffffffff1663ffffffff1681526020019081526020016000205491506139a9565b8192505050919050565b6000613b0e600280613a49866128f0565b613a52866128f0565b60405180838152602001828152602001925050506020604051808303816000865af1158015613a85573d6000803e3d6000fd5b5050506040513d6020811015613a9a57600080fd5b81019080805190602001909291905050506040518082600019166000191681526020019150506020604051808303816000865af1158015613adf573d6000803e3d6000fd5b5050506040513d6020811015613af457600080fd5b8101908080519060200190929190505050600190046128f0565b905092915050565b6000806000806000806000613b2b8a8a613c2a565b809a5081955050506000881480613b4157508388115b15613b4e57839250613b52565b8792505b600090505b82811015613b9957602489019850613b6f8a8a613c2a565b809a5081935050506000811415613b84578894505b60048201890198508080600101915050613b57565b8885965096505050505050935093915050565b6000806000806000613bbe8888613c2a565b80985081955050506000861480613bd457508386115b15613be157839250613be5565b8592505b600090505b82811015613c1c57600887019650613c028888613c2a565b809850819350505081870196508080600101915050613bea565b869450505050509392505050565b60008060008484815181101515613c3d57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004905060018401935060fd8160ff161015613cd05780848160ff16915092509250613d40565b60fd8160ff161415613cf557613ce885856010612e06565b6002850192509250613d40565b60fe8160ff161415613d1a57613d0d85856020612e06565b6004850192509250613d40565b60ff8160ff161415613d3f57613d3285856040612e06565b6008850192509250613d40565b5b509250929050565b61012060405190810160405280600990602082028038833980820191505090505090565b61014060405190810160405280600081526020016000815260200160008152602001606081526020016000815260200160008152602001600081526020016060815260200160008152602001600081525090565b60e060405190810160405280600063ffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff16815260200160008152602001600081526020016000815250905600a165627a7a723058204281eeb454c2fe239d095344ab420a0c5642a72004fba7c445d05298f60cbfb40029";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<>();
        _addresses.put("1525278125684", "0x3079e252dc469bfacb01830c4ed9d6d04b068884");
    }

    protected DogeRelay(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DogeRelay(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<StoreHeaderEventResponse> getStoreHeaderEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("StoreHeader", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<StoreHeaderEventResponse> responses = new ArrayList<StoreHeaderEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            StoreHeaderEventResponse typedResponse = new StoreHeaderEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.blockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<StoreHeaderEventResponse> storeHeaderEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("StoreHeader", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, StoreHeaderEventResponse>() {
            @Override
            public StoreHeaderEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                StoreHeaderEventResponse typedResponse = new StoreHeaderEventResponse();
                typedResponse.log = log;
                typedResponse.blockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<GetHeaderEventResponse> getGetHeaderEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("GetHeader", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<GetHeaderEventResponse> responses = new ArrayList<GetHeaderEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            GetHeaderEventResponse typedResponse = new GetHeaderEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.blockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<GetHeaderEventResponse> getHeaderEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("GetHeader", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, GetHeaderEventResponse>() {
            @Override
            public GetHeaderEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                GetHeaderEventResponse typedResponse = new GetHeaderEventResponse();
                typedResponse.log = log;
                typedResponse.blockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<VerifyTransactionEventResponse> getVerifyTransactionEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("VerifyTransaction", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<VerifyTransactionEventResponse> responses = new ArrayList<VerifyTransactionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VerifyTransactionEventResponse typedResponse = new VerifyTransactionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.txHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<VerifyTransactionEventResponse> verifyTransactionEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("VerifyTransaction", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, VerifyTransactionEventResponse>() {
            @Override
            public VerifyTransactionEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                VerifyTransactionEventResponse typedResponse = new VerifyTransactionEventResponse();
                typedResponse.log = log;
                typedResponse.txHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<RelayTransactionEventResponse> getRelayTransactionEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("RelayTransaction", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<RelayTransactionEventResponse> responses = new ArrayList<RelayTransactionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RelayTransactionEventResponse typedResponse = new RelayTransactionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.txHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RelayTransactionEventResponse> relayTransactionEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("RelayTransaction", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, RelayTransactionEventResponse>() {
            @Override
            public RelayTransactionEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                RelayTransactionEventResponse typedResponse = new RelayTransactionEventResponse();
                typedResponse.log = log;
                typedResponse.txHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<String> scryptChecker() {
        final Function function = new Function("scryptChecker", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public static RemoteCall<DogeRelay> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger _network) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(_network)));
        return deployRemoteCall(DogeRelay.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<DogeRelay> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger _network) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(_network)));
        return deployRemoteCall(DogeRelay.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public RemoteCall<TransactionReceipt> setScryptChecker(String _scryptChecker) {
        final Function function = new Function(
                "setScryptChecker", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_scryptChecker)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setInitialParent(BigInteger _blockHash, BigInteger _height, BigInteger _chainWork) {
        final Function function = new Function(
                "setInitialParent", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_blockHash), 
                new org.web3j.abi.datatypes.generated.Uint64(_height), 
                new org.web3j.abi.datatypes.generated.Uint128(_chainWork)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> storeBlockHeader(byte[] _blockHeaderBytes, BigInteger _proposedScryptBlockHash) {
        final Function function = new Function(
                "storeBlockHeader", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(_blockHeaderBytes), 
                new org.web3j.abi.datatypes.generated.Uint256(_proposedScryptBlockHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> scryptVerified(byte[] _proposalId) {
        final Function function = new Function(
                "scryptVerified", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_proposalId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> bulkStoreHeaders(byte[] _headersBytes, byte[] _hashesBytes, BigInteger count) {
        final Function function = new Function(
                "bulkStoreHeaders", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(_headersBytes), 
                new org.web3j.abi.datatypes.DynamicBytes(_hashesBytes), 
                new org.web3j.abi.datatypes.generated.Uint256(count)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> verifyTx(byte[] _txBytes, BigInteger _txIndex, List<BigInteger> _siblings, BigInteger _txBlockHash) {
        final Function function = new Function(
                "verifyTx", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(_txBytes), 
                new org.web3j.abi.datatypes.generated.Uint256(_txIndex), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(_siblings, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(_txBlockHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> relayTx(byte[] _txBytes, BigInteger _txIndex, List<BigInteger> _siblings, BigInteger _txBlockHash, String _targetContract) {
        final Function function = new Function(
                "relayTx", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(_txBytes), 
                new org.web3j.abi.datatypes.generated.Uint256(_txIndex), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(_siblings, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(_txBlockHash), 
                new org.web3j.abi.datatypes.Address(_targetContract)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<List> getBlockLocator() {
        final Function function = new Function("getBlockLocator", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray9<Uint256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<BigInteger> getBestBlockHeight() {
        final Function function = new Function("getBestBlockHeight", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getBestBlockHash() {
        final Function function = new Function("getBestBlockHash", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getVersion(BigInteger _blockHash) {
        final Function function = new Function("getVersion", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_blockHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public static DogeRelay load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DogeRelay(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static DogeRelay load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DogeRelay(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class StoreHeaderEventResponse {
        public Log log;

        public byte[] blockHash;

        public BigInteger returnCode;
    }

    public static class GetHeaderEventResponse {
        public Log log;

        public byte[] blockHash;

        public BigInteger returnCode;
    }

    public static class VerifyTransactionEventResponse {
        public Log log;

        public byte[] txHash;

        public BigInteger returnCode;
    }

    public static class RelayTransactionEventResponse {
        public Log log;

        public byte[] txHash;

        public BigInteger returnCode;
    }
}
