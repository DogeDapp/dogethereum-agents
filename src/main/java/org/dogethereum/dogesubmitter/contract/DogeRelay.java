package org.dogethereum.dogesubmitter.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.StaticArray9;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.3.1.
 */
public class DogeRelay extends Contract {
    private static final String BINARY = "0x608060405234801561001057600080fd5b506040516020806200462c8339810180604052810190808051906020019092919050505080600560006101000a81548160ff0219169083600281111561005257fe5b0217905550506145c480620000686000396000f3006080604052600436106100db576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630574fef2146100e05780631defb765146102755780632a02fa00146102cc57806349347272146103235780635292a5901461034e578063541e9cd7146103935780636e2a8e7c146104085780637037c95d1461048f578063865bc7101461055c578063922407ca1461059f5780639be7076a146105f2578063aa8630361461061d578063b88da759146106f1578063c11818a114610732578063e1bafb9114610850575b600080fd5b3480156100ec57600080fd5b5061025f600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192908035906020019092919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192908035906020019092919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803590602001909291908035600019169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610893565b6040518082815260200191505060405180910390f35b34801561028157600080fd5b5061028a610cdd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102d857600080fd5b506102e1610d03565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561032f57600080fd5b50610338610d29565b6040518082815260200191505060405180910390f35b34801561035a57600080fd5b5061037d6004803603810190808035600019169060200190929190505050610d33565b6040518082815260200191505060405180910390f35b34801561039f57600080fd5b506103ee60048036038101908080359060200190929190803567ffffffffffffffff16906020019092919080356fffffffffffffffffffffffffffffffff169060200190929190505050611425565b604051808215151515815260200191505060405180910390f35b34801561041457600080fd5b50610479600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192908035906020019092919050505061146a565b6040518082815260200191505060405180910390f35b34801561049b57600080fd5b50610546600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190505050611482565b6040518082815260200191505060405180910390f35b34801561056857600080fd5b5061059d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114f2565b005b3480156105ab57600080fd5b506105b46115a0565b6040518082600960200280838360005b838110156105df5780820151818401526020810190506105c4565b5050505090500191505060405180910390f35b3480156105fe57600080fd5b5061060761162e565b6040518082815260200191505060405180910390f35b34801561062957600080fd5b506106db600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192908035906020019092919050505061164a565b6040518082815260200191505060405180910390f35b3480156106fd57600080fd5b5061071c600480360381019080803590602001909291905050506116e1565b6040518082815260200191505060405180910390f35b34801561073e57600080fd5b5061083a600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192908035906020019092919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803560001916906020019092919050505061171a565b6040518082815260200191505060405180910390f35b34801561085c57600080fd5b50610891600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506117b3565b005b6000806000806108a28a611861565b9250600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663642ed988876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15801561093d57600080fd5b505af1158015610951573d6000803e3d6000fd5b505050506040513d602081101561096757600080fd5b810190808051906020019092919050505060001916610987848b8b611973565b60010260001916141515610af657600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663642ed988876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b158015610a2e57600080fd5b505af1158015610a42573d6000803e3d6000fd5b505050506040513d6020811015610a5857600080fd5b810190808051906020019092919050505060001916610a78848b8b611973565b60010260405180826000191660001916815260200191505060405180910390a17f65bd72698b9ffcfb3c7cb4c7414e13225cabd57fb690e183ae8c01c8ec268ebd610ac28e611861565b600102614e486040518083600019166000191681526020018281526020019250505060405180910390a1614e489350610ccd565b610b038d8d8d8d8a61171a565b9150600082141515610c7a578473ffffffffffffffffffffffffffffffffffffffff16631c0b63678e846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825284818151815260200191508051906020019080838360005b83811015610b9e578082015181840152602081019050610b83565b50505050905090810190601f168015610bcb5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015610beb57600080fd5b505af1158015610bff573d6000803e3d6000fd5b505050506040513d6020811015610c1557600080fd5b810190808051906020019092919050505090507f4e64138cc499eb1adf9edff9ef69bd45c56ac4bfd307540952e4c9d51eab55c182600102826040518083600019166000191681526020018281526020019250505060405180910390a1809350610ccd565b7f4e64138cc499eb1adf9edff9ef69bd45c56ac4bfd307540952e4c9d51eab55c1600060010261753a6040518083600019166000191681526020018281526020019250505060405180910390a161753a93505b5050509998505050505050505050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600354905090565b600080600080600080600080600080600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610def577f6080b2cdc7fc4777ed1e1066af5de1df45ae9186adbdb7aec21fde27a3e17e4c60006001026127426040518083600019166000191681526020018281526020019250505060405180910390a160009950611417565b600660008c60019004815260200190815260200160002098508860000160010154975088600001600201549650610e2587611a13565b95506000866fffffffffffffffffffffffffffffffff161415610e97577f6080b2cdc7fc4777ed1e1066af5de1df45ae9186adbdb7aec21fde27a3e17e4c8860010261272e6040518083600019166000191681526020018281526020019250505060405180910390a160009950611417565b6000610ea289611a13565b6fffffffffffffffffffffffffffffffff16141515610f10577f6080b2cdc7fc4777ed1e1066af5de1df45ae9186adbdb7aec21fde27a3e17e4c886001026127386040518083600019166000191681526020018281526020019250505060405180910390a160009950611417565b8860000160000160089054906101000a900463ffffffff169450610f3387611a51565b60010167ffffffffffffffff169350610f4b87611a95565b9250600280811115610f5957fe5b600560009054906101000a900460ff166002811115610f7457fe5b14151561116d576000600160009054906101000a900463ffffffff1663ffffffff16141561101e578263ffffffff168563ffffffff1614158015610fbf575060008363ffffffff1614155b15611019577f6080b2cdc7fc4777ed1e1066af5de1df45ae9186adbdb7aec21fde27a3e17e4c8860010261271a6040518083600019166000191681526020018281526020019250505060405180910390a160009950611417565b61116c565b60018060009054906101000a900463ffffffff1663ffffffff1614156110435761116b565b61107361105761105289611ac8565b611aeb565b63ffffffff1661106689611aeb565b63ffffffff160384611b1e565b91506001600281111561108257fe5b600560009054906101000a900460ff16600281111561109d57fe5b1480156110d1575060786110b088611aeb565b8a60000160000160049054906101000a900463ffffffff160363ffffffff16115b80156110e057506202673c8410155b156110ed57631e0fffff91505b8163ffffffff168563ffffffff1614158015611110575060008263ffffffff1614155b1561116a577f6080b2cdc7fc4777ed1e1066af5de1df45ae9186adbdb7aec21fde27a3e17e4c886001026127246040518083600019166000191681526020018281526020019250505060405180910390a160009950611417565b5b5b5b88600260008a815260200190815260200160002060008201816000016000820160009054906101000a900463ffffffff168160000160006101000a81548163ffffffff021916908363ffffffff1602179055506000820160049054906101000a900463ffffffff168160000160046101000a81548163ffffffff021916908363ffffffff1602179055506000820160089054906101000a900463ffffffff168160000160086101000a81548163ffffffff021916908363ffffffff16021790555060008201600c9054906101000a900463ffffffff1681600001600c6101000a81548163ffffffff021916908363ffffffff160217905550600182015481600101556002820154816002015560038201548160030155505060048201548160040155600582015481600501559050506112a68888611c20565b600660008c6001900481526020019081526020016000206000808201600080820160006101000a81549063ffffffff02191690556000820160046101000a81549063ffffffff02191690556000820160086101000a81549063ffffffff021916905560008201600c6101000a81549063ffffffff0219169055600182016000905560028201600090556003820160009055505060048201600090556005820160009055505061135485611d7d565b7d0fffff00000000000000000000000000000000000000000000000000000081151561137c57fe5b048601905061138b8882611dc1565b600454816fffffffffffffffffffffffffffffffff161015156113c95787600381905550806fffffffffffffffffffffffffffffffff166004819055505b7f6080b2cdc7fc4777ed1e1066af5de1df45ae9186adbdb7aec21fde27a3e17e4c88600102856040518083600019166000191681526020018281526020019250505060405180910390a18399505b505050505050505050919050565b60008060045414151561143b5760009050611463565b6001600481905550836003819055506114548484611e0a565b61145e8483611dc1565b600190505b9392505050565b600061147a836000855185611e53565b905092915050565b600080600080600080935060009250600091505b858210156114e7576114a8888561251e565b63ffffffff1690506004840193506114cf8885836114c68b88612733565b60019004611e53565b94508084019350602083019250600182019150611496565b505050509392505050565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148015611551575060008173ffffffffffffffffffffffffffffffffffffffff1614155b151561155c57600080fd5b80600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6115a86144ca565b6000806003549150818360006009811015156115c057fe5b602002018181525050600090505b6008811015611626576000806115e48484612749565b63ffffffff1663ffffffff16815260200190815260200160002054836001830160098110151561161057fe5b60200201818152505080806001019150506115ce565b829250505090565b600061163b600354611a51565b67ffffffffffffffff16905090565b60008061165686611861565b90506040865114156116b7577f65bd72698b9ffcfb3c7cb4c7414e13225cabd57fb690e183ae8c01c8ec268ebd81600102614e5c6040518083600019166000191681526020018281526020019250505060405180910390a1600091506116d8565b60016116c58287878761279a565b14156116d3578091506116d8565b600091505b50949350505050565b60006002600083815260200190815260200160002060000160000160009054906101000a900463ffffffff1663ffffffff169050919050565b60008061172687611861565b9050604087511415611787577f65bd72698b9ffcfb3c7cb4c7414e13225cabd57fb690e183ae8c01c8ec268ebd81600102614e5c6040518083600019166000191681526020018281526020019250505060405180910390a1600091506117a9565b6001611796828888888861292e565b14156117a4578091506117a9565b600091505b5095945050505050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148015611812575060008173ffffffffffffffffffffffffffffffffffffffff1614155b151561181d57600080fd5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600061196c600280846040518082805190602001908083835b60208310151561189f578051825260208201915060208101905060208303925061187a565b6001836020036101000a0380198251168184511680821785525050505050509050019150506020604051808303816000865af11580156118e3573d6000803e3d6000fd5b5050506040513d60208110156118f857600080fd5b81019080805190602001909291905050506040518082600019166000191681526020019150506020604051808303816000865af115801561193d573d6000803e3d6000fd5b5050506040513d602081101561195257600080fd5b810190808051906020019092919050505060019004612b64565b9050919050565b6000806000806000806000899550600094505b8751851015611a0357878581518110151561199d57fe5b9060200190602002015193506002898115156119b557fe5b06925060018314156119cc578391508590506119dd565b60008314156119dc578591508390505b5b6119e78282612b95565b95506002898115156119f557fe5b049850600185019450611986565b8596505050505050509392505050565b600070010000000000000000000000000000000080600260008581526020019081526020016000206004015402811515611a4957fe5b049050919050565b600078010000000000000000000000000000000000000000000000006002600084815260200190815260200160002060040154811515611a8d57fe5b049050919050565b60006002600083815260200190815260200160002060000160000160089054906101000a900463ffffffff169050919050565b600060026000838152602001908152602001600020600001600201549050919050565b60006002600083815260200190815260200160002060000160000160049054906101000a900463ffffffff169050919050565b600080600080600080603c9450879350600860070b85850360070b811515611b4257fe5b0585019350600460070b8560070b811515611b5957fe5b0585039250600260070b8560070b811515611b7057fe5b05850191508260070b8460070b1215611b8b57829350611b9e565b8160070b8460070b1315611b9d578193505b5b611ba787611d7d565b90508360070b810290508460070b81811515611bbf57fe5b0490507d0fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811115611c0a577d0fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90505b611c1381612c73565b9550505050505092915050565b60008060008085600080600160009054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002081905550611c7786600160009054906101000a900463ffffffff16612d19565b60018060008282829054906101000a900463ffffffff160192506101000a81548163ffffffff021916908363ffffffff160217905550611cc2866001611cbc88611a51565b01611e0a565b60009350611ccf85612d6d565b9250611cdd84600085612dbc565b9350611ce886611a51565b67ffffffffffffffff169150600190505b6008811015611d5a576001611d0d82612df9565b83811515611d1757fe5b061415611d3357611d2c848260040285612dbc565b9350611d4d565b611d4a8482600402611d458885612749565b612dbc565b93505b8080600101915050611cf9565b836002600088815260200190815260200160002060050181905550505050505050565b600080600063010000008463ffffffff16811515611d9757fe5b0463ffffffff16915062ffffff841663ffffffff169050600382036101000a810292505050919050565b600060026000848152602001908152602001600020600401549050611de881601084612e06565b9050806002600085815260200190815260200160002060040181905550505050565b600060026000848152602001908152602001600020600401549050611e3181600084612ec7565b9050806002600085815260200190815260200160002060040181905550505050565b6000806000611e606144ee565b60006050871015611ec1577f6080b2cdc7fc4777ed1e1066af5de1df45ae9186adbdb7aec21fde27a3e17e4c60006001026127426040518083600019166000191681526020018281526020019250505060405180910390a160009450612512565b600760008154600101919050819055506006600060075481526020019081526020016000209350611ef28989612f30565b8460000160008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160086101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001600c6101000a81548163ffffffff021916908363ffffffff1602179055506080820151816001015560a0820151816002015560c082015181600301559050508360000160010154925061208b8460000160e060405190810160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160089054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201600c9054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016001820154815260200160028201548152602001600382015481525050612fdc565b156123125761209b898989612ff7565b91506120bd8460000160000160089054906101000a900463ffffffff16611d7d565b6120ca8360000151612b64565b1115612125577f6080b2cdc7fc4777ed1e1066af5de1df45ae9186adbdb7aec21fde27a3e17e4c836001026127926040518083600019166000191681526020018281526020019250505060405180910390a160009450612512565b61212f838361313b565b905060018114151561218e577f6080b2cdc7fc4777ed1e1066af5de1df45ae9186adbdb7aec21fde27a3e17e4c83600102826040518083600019166000191681526020018281526020019250505060405180910390a160009450612512565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634754efd06121de8b60508b8d01038b8d016131b9565b8460000151600102336007546001026040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200185600019166000191681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018360001916600019168152602001828103825286818151815260200191508051906020019080838360005b838110156122a657808201518184015260208101905061228b565b50505050905090810190601f1680156122d35780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1580156122f557600080fd5b505af1158015612309573d6000803e3d6000fd5b5050505061250d565b6123328460000160000160089054906101000a900463ffffffff16611d7d565b61233b87612b64565b1115612396577f6080b2cdc7fc4777ed1e1066af5de1df45ae9186adbdb7aec21fde27a3e17e4c836001026127926040518083600019166000191681526020018281526020019250505060405180910390a160009450612512565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634754efd06123e18b600060506131b9565b88600102336007546001026040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200185600019166000191681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018360001916600019168152602001828103825286818151815260200191508051906020019080838360005b838110156124a557808201518184015260208101905061248a565b50505050905090810190601f1680156124d25780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1580156124f457600080fd5b505af1158015612508573d6000803e3d6000fd5b505050505b600194505b50505050949350505050565b6000826003830181518110151561253157fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900461010084600285018151811015156125b357fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090040262010000856001860181518110151561263757fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900402630100000086868151811015156126b957fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900402010101905092915050565b6000808260208501015190508091505092915050565b60007c01000000000000000000000000000000000000000000000000000000008260200260020a60026000868152602001908152602001600020600501540281151561279157fe5b04905092915050565b60006127a582613221565b15612800577f65bd72698b9ffcfb3c7cb4c7414e13225cabd57fb690e183ae8c01c8ec268ebd85600102614e346040518083600019166000191681526020018281526020019250505060405180910390a1614e349050612926565b6128098561326c565b1515612865577f65bd72698b9ffcfb3c7cb4c7414e13225cabd57fb690e183ae8c01c8ec268ebd85600102614e3e6040518083600019166000191681526020018281526020019250505060405180910390a1614e3e9050612926565b61286e826132aa565b612879868686611973565b1415156128d6577f65bd72698b9ffcfb3c7cb4c7414e13225cabd57fb690e183ae8c01c8ec268ebd85600102614e526040518083600019166000191681526020018281526020019250505060405180910390a1614e529050612926565b7f65bd72698b9ffcfb3c7cb4c7414e13225cabd57fb690e183ae8c01c8ec268ebd8560010260016040518083600019166000191681526020018281526020019250505060405180910390a1600190505b949350505050565b600080600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166348aefc32846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b1580156129ca57600080fd5b505af11580156129de573d6000803e3d6000fd5b505050506040513d60208110156129f457600080fd5b81019080805190602001909291905050501515612a61577f65bd72698b9ffcfb3c7cb4c7414e13225cabd57fb690e183ae8c01c8ec268ebd87600102614e3e6040518083600019166000191681526020018281526020019250505060405180910390a1614e3e9150612b5a565b612a6c8460006132cd565b905080612a7a888888611973565b141515612b0a578060010260001916612a94888888611973565b60010260405180826000191660001916815260200191505060405180910390a17f65bd72698b9ffcfb3c7cb4c7414e13225cabd57fb690e183ae8c01c8ec268ebd87600102614e526040518083600019166000191681526020018281526020019250505060405180910390a1614e529150612b5a565b7f65bd72698b9ffcfb3c7cb4c7414e13225cabd57fb690e183ae8c01c8ec268ebd8760010260016040518083600019166000191681526020018281526020019250505060405180910390a1600191505b5095945050505050565b600060405160005b6020811015612b8a578381601f031a81830153600181019050612b6c565b508051915050919050565b6000612c6b600280612ba686612b64565b612baf86612b64565b60405180838152602001828152602001925050506020604051808303816000865af1158015612be2573d6000803e3d6000fd5b5050506040513d6020811015612bf757600080fd5b81019080805190602001909291905050506040518082600019166000191681526020019150506020604051808303816000865af1158015612c3c573d6000803e3d6000fd5b5050506040513d6020811015612c5157600080fd5b810190808051906020019092919050505060019004612b64565b905092915050565b6000806000612c8e6007612c86866132eb565b016003613319565b915060009050600382111515612cba57612cb362ffffff851683600303600802613332565b9050612cd5565b612cca8460038403600802613319565b905062ffffff811690505b600062800000821663ffffffff161115612d0357612cfa8163ffffffff166008613319565b90506001820191505b612d0e826018613332565b811792505050919050565b600080600260008581526020019081526020016000206004015491508263ffffffff169050612d4a82600883612ec7565b915081600260008681526020019081526020016000206004018190555050505050565b6000780100000000000000000000000000000000000000000000000068010000000000000000600260008581526020019081526020016000206004015402811515612db457fe5b049050919050565b600060405184815282601c1a8482015382601d1a6001850182015382601e1a6002850182015382601f1a6003850182015380519150509392505050565b60008160050a9050919050565b60006040518481528260101a848201538260111a600185018201538260121a600285018201538260131a600385018201538260141a600485018201538260151a600585018201538260161a600685018201538260171a600785018201538260181a600885018201538260191a6009850182015382601a1a600a850182015382601b1a600b850182015382601c1a600c850182015382601d1a600d850182015382601e1a600e850182015382601f1a600f850182015380519150509392505050565b60006040518481528260181a848201538260191a6001850182015382601a1a6002850182015382601b1a6003850182015382601c1a6004850182015382601d1a6005850182015382601e1a6006850182015382601f1a6007850182015380519150509392505050565b612f38614542565b612f428383613342565b816000019063ffffffff16908163ffffffff1681525050612f638383613376565b816020019063ffffffff16908163ffffffff1681525050612f8483836133aa565b816040019063ffffffff16908163ffffffff1681525050612fa7838360506133de565b816080018181525050612fba838361345c565b8160a0018181525050612fcd83836132cd565b8160c001818152505092915050565b60008061010083600001511663ffffffff1614159050919050565b612fff6144ee565b6000806000605086019550613014878761347a565b809350819450505061302987878886036133de565b84602001818152505082955061303f87876134af565b84600001818152505060208601955061305a8787600061356e565b8191508560e00181985082905250506130758787602061363c565b846101000181815250506004860195506130918787600061356e565b8191508560600181985082905250506130ac8787602061363c565b8460800181815250506028860195506130c587876134af565b8460c00181815250506028860195506130e08787602061363c565b846101200181815250506130f387613e51565b866040018760a0018281525082945083815250505050601482820311801561311f575060018460a00151145b15613131576127748460a00181815250505b5050509392505050565b6000808261010001511415156131555761274c90506131b3565b60018260a0015114151561316f578160a0015190506131b3565b816040015161317e8484614187565b14151561318f5761277e90506131b3565b8160c0015161319d836141a4565b1415156131ae5761278890506131b3565b600190505b92915050565b6060600060608484039150816040519080825280601f01601f1916602001820160405280156131f75781602001602082028038833980820191505090505b5090508160208201838760208a010160045afa151561321557600080fd5b80925050509392505050565b60008060006003549150600090505b6006811015613260578184141561324a5760019250613265565b61325382611ac8565b9150600181019050613230565b600092505b5050919050565b60008061327883611a51565b67ffffffffffffffff169050600081141561329657600091506132a4565b826132a0826141cd565b1491505b50919050565b600060026000838152602001908152602001600020600001600301549050919050565b6000808260448501015190506132e281612b64565b91505092915050565b6000808290505b600081111561331357613306816001613319565b90506001820191506132f2565b50919050565b60008160020a8381151561332957fe5b04905092915050565b60008160020a8302905092915050565b600081600484010151630100000081601b1a026201000082601a1a02016101008260191a02018160181a0191505092915050565b600081604c84010151630100000081601b1a026201000082601a1a02016101008260191a02018160181a0191505092915050565b600081605084010151630100000081601b1a026201000082601a1a02016101008260191a02018160181a0191505092915050565b600061345360026133f086868661426e565b6040518082600019166000191681526020019150506020604051808303816000865af1158015613424573d6000803e3d6000fd5b5050506040513d602081101561343957600080fd5b810190808051906020019092919050505060019004612b64565b90509392505050565b60008082602485010151905061347181612b64565b91505092915050565b60008061348c84600485016000614298565b80925081935050506134a08483600061432e565b91506004820191509250929050565b600080600090505b6020811015613567578351838201101561355a5780601f03600802848483018151811015156134e257fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090049060020a02820191505b80806001019150506134b7565b5092915050565b606060008060006060600061358389896143ac565b8099508195505050600087148061359957508387115b156135a6578392506135aa565b8692505b826040519080825280602002602001820160405280156135d95781602001602082028038833980820191505090505b509150600090505b8281101561362a576135fb6135f68a8a6134af565b612b64565b828281518110151561360957fe5b906020019060200201818152505060208801975080806001019150506135e1565b81889550955050505050935093915050565b600060088214156136cd57838381518110151561365557fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900460ff169050613e4a565b60108214156137e15761010084600185018151811015156136ea57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900402848481518110151561376757fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090040161ffff169050613e4a565b6020821415613a02576301000000846003850181518110151561380057fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090040262010000856002860181518110151561388457fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900402610100866001870181518110151561390757fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900402868681518110151561398457fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900401010163ffffffff169050613e4a565b6040821415613e49576701000000000000008460078501815181101515613a2557fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090040266010000000000008560068601815181101515613aad57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900402650100000000008660058701815181101515613b3457fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004026401000000008760048801815181101515613bba57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090040263010000008860038901815181101515613c3f57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900402620100008960028a01815181101515613cc357fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004026101008a60018b01815181101515613d4657fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004028a8a815181101515613dc357fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090040101010101010167ffffffffffffffff169050613e4a565b5b9392505050565b60008060008060008060009150600090505b86518110156141455760fa7f0100000000000000000000000000000000000000000000000000000000000000028782815181101515613e9e57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148015613fb7575060be7f0100000000000000000000000000000000000000000000000000000000000000028760018301815181101515613f4857fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80156140625750606d7f0100000000000000000000000000000000000000000000000000000000000000028760028301815181101515613ff357fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b801561410d5750606d7f010000000000000000000000000000000000000000000000000000000000000002876003830181518110151561409e57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b1561413a57811561412f5760006004840361276082925095509550955061417d565b600191506004810192505b806001019050613e63565b8115156141635760006004840361276a82925095509550955061417d565b61416d87846134af565b6004840360018090509550955095505b5050509193909250565b600061419c8383608001518460600151611973565b905092915050565b60006141c66141c183602001518461010001518560e00151611973565b612b64565b9050919050565b60008060006003549150600160080390505b836141e983611a51565b67ffffffffffffffff161115614264575b61420381612df9565b8461420d84611a51565b67ffffffffffffffff16031080156142255750600081115b15614235576001810390506141fa565b6000806142428484612749565b63ffffffff1663ffffffff1681526020019081526020016000205491506141df565b8192505050919050565b60006040516020818486602089010160025afa151561428c57600080fd5b80519150509392505050565b60008060008060008060006142ad8a8a6143ac565b809a50819550505060008814806142c357508388115b156142d0578392506142d4565b8792505b600090505b8281101561431b576024890198506142f18a8a6143ac565b809a5081935050506000811415614306578894505b600482018901985080806001019150506142d9565b8885965096505050505050935093915050565b600080600080600061434088886143ac565b8098508195505050600086148061435657508386115b1561436357839250614367565b8592505b600090505b8281101561439e5760088701965061438488886143ac565b80985081935050508187019650808060010191505061436c565b869450505050509392505050565b600080600084848151811015156143bf57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004905060018401935060fd8160ff1610156144525780848160ff169150925092506144c2565b60fd8160ff1614156144775761446a8585601061363c565b60028501925092506144c2565b60fe8160ff16141561449c5761448f8585602061363c565b60048501925092506144c2565b60ff8160ff1614156144c1576144b48585604061363c565b60088501925092506144c2565b5b509250929050565b61012060405190810160405280600990602082028038833980820191505090505090565b61014060405190810160405280600081526020016000815260200160008152602001606081526020016000815260200160008152602001600081526020016060815260200160008152602001600081525090565b60e060405190810160405280600063ffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff16815260200160008152602001600081526020016000815250905600a165627a7a723058204deac100df700c31d59d3dbb80ba6310ae8043383e725cd9af4288ca39af86d10029";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<>();
        _addresses.put("1528132973147", "0x15dd936401d350b57e6112059f72d9ea524ab006");
    }

    protected DogeRelay(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DogeRelay(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<StoreHeaderEventResponse> getStoreHeaderEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("StoreHeader", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<StoreHeaderEventResponse> responses = new ArrayList<StoreHeaderEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            StoreHeaderEventResponse typedResponse = new StoreHeaderEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.blockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<StoreHeaderEventResponse> storeHeaderEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("StoreHeader", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, StoreHeaderEventResponse>() {
            @Override
            public StoreHeaderEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                StoreHeaderEventResponse typedResponse = new StoreHeaderEventResponse();
                typedResponse.log = log;
                typedResponse.blockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<GetHeaderEventResponse> getGetHeaderEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("GetHeader", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<GetHeaderEventResponse> responses = new ArrayList<GetHeaderEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            GetHeaderEventResponse typedResponse = new GetHeaderEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.blockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<GetHeaderEventResponse> getHeaderEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("GetHeader", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, GetHeaderEventResponse>() {
            @Override
            public GetHeaderEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                GetHeaderEventResponse typedResponse = new GetHeaderEventResponse();
                typedResponse.log = log;
                typedResponse.blockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<VerifyTransactionEventResponse> getVerifyTransactionEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("VerifyTransaction", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<VerifyTransactionEventResponse> responses = new ArrayList<VerifyTransactionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VerifyTransactionEventResponse typedResponse = new VerifyTransactionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.txHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<VerifyTransactionEventResponse> verifyTransactionEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("VerifyTransaction", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, VerifyTransactionEventResponse>() {
            @Override
            public VerifyTransactionEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                VerifyTransactionEventResponse typedResponse = new VerifyTransactionEventResponse();
                typedResponse.log = log;
                typedResponse.txHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<RelayTransactionEventResponse> getRelayTransactionEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("RelayTransaction", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<RelayTransactionEventResponse> responses = new ArrayList<RelayTransactionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RelayTransactionEventResponse typedResponse = new RelayTransactionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.txHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RelayTransactionEventResponse> relayTransactionEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("RelayTransaction", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, RelayTransactionEventResponse>() {
            @Override
            public RelayTransactionEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                RelayTransactionEventResponse typedResponse = new RelayTransactionEventResponse();
                typedResponse.log = log;
                typedResponse.txHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<String> scryptChecker() {
        final Function function = new Function("scryptChecker", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> superblocks() {
        final Function function = new Function("superblocks", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public static RemoteCall<DogeRelay> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger _network) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(_network)));
        return deployRemoteCall(DogeRelay.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<DogeRelay> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger _network) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(_network)));
        return deployRemoteCall(DogeRelay.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public RemoteCall<TransactionReceipt> setScryptChecker(String _scryptChecker) {
        final Function function = new Function(
                "setScryptChecker", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_scryptChecker)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setSuperblocks(String _claimManager) {
        final Function function = new Function(
                "setSuperblocks", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_claimManager)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setInitialParent(BigInteger _blockHash, BigInteger _height, BigInteger _chainWork) {
        final Function function = new Function(
                "setInitialParent", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_blockHash), 
                new org.web3j.abi.datatypes.generated.Uint64(_height), 
                new org.web3j.abi.datatypes.generated.Uint128(_chainWork)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> storeBlockHeader(byte[] _blockHeaderBytes, BigInteger _proposedScryptBlockHash) {
        final Function function = new Function(
                "storeBlockHeader", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(_blockHeaderBytes), 
                new org.web3j.abi.datatypes.generated.Uint256(_proposedScryptBlockHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> scryptVerified(byte[] _proposalId) {
        final Function function = new Function(
                "scryptVerified", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_proposalId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> scryptFailed(byte[] _proposalId) {
        final Function function = new Function(
                "scryptFailed", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_proposalId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> bulkStoreHeaders(byte[] _headersBytes, byte[] _hashesBytes, BigInteger count) {
        final Function function = new Function(
                "bulkStoreHeaders", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(_headersBytes), 
                new org.web3j.abi.datatypes.DynamicBytes(_hashesBytes), 
                new org.web3j.abi.datatypes.generated.Uint256(count)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> verifyTx(byte[] _txBytes, BigInteger _txIndex, List<BigInteger> _siblings, byte[] _txBlockHeaderBytes, byte[] _txSuperblockHash) {
        final Function function = new Function(
                "verifyTx", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(_txBytes), 
                new org.web3j.abi.datatypes.generated.Uint256(_txIndex), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(_siblings, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicBytes(_txBlockHeaderBytes), 
                new org.web3j.abi.datatypes.generated.Bytes32(_txSuperblockHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> verifyTx(byte[] _txBytes, BigInteger _txIndex, List<BigInteger> _siblings, BigInteger _txBlockHash) {
        final Function function = new Function(
                "verifyTx", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(_txBytes), 
                new org.web3j.abi.datatypes.generated.Uint256(_txIndex), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(_siblings, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(_txBlockHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> relayTx(byte[] _txBytes, BigInteger _txIndex, List<BigInteger> _txSiblings, byte[] _dogeBlockHeader, BigInteger _dogeBlockIndex, List<BigInteger> _dogeBlockSiblings, BigInteger _superblockMerkleRoot, byte[] _superblockId, String _targetContract) {
        final Function function = new Function(
                "relayTx", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(_txBytes), 
                new org.web3j.abi.datatypes.generated.Bytes20(operatorPublicKeyHash), 
                new org.web3j.abi.datatypes.generated.Uint256(_txIndex), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(_txSiblings, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicBytes(_dogeBlockHeader), 
                new org.web3j.abi.datatypes.generated.Uint256(_dogeBlockIndex), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(_dogeBlockSiblings, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockMerkleRoot), 
                new org.web3j.abi.datatypes.generated.Bytes32(_superblockId), 
                new org.web3j.abi.datatypes.Address(_targetContract)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<List> getBlockLocator() {
        final Function function = new Function("getBlockLocator", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray9<Uint256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<BigInteger> getBestBlockHeight() {
        final Function function = new Function("getBestBlockHeight", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getBestBlockHash() {
        final Function function = new Function("getBestBlockHash", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getVersion(BigInteger _blockHash) {
        final Function function = new Function("getVersion", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_blockHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public static DogeRelay load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DogeRelay(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static DogeRelay load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DogeRelay(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class StoreHeaderEventResponse {
        public Log log;

        public byte[] blockHash;

        public BigInteger returnCode;
    }

    public static class GetHeaderEventResponse {
        public Log log;

        public byte[] blockHash;

        public BigInteger returnCode;
    }

    public static class VerifyTransactionEventResponse {
        public Log log;

        public byte[] txHash;

        public BigInteger returnCode;
    }

    public static class RelayTransactionEventResponse {
        public Log log;

        public byte[] txHash;

        public BigInteger returnCode;
    }
}
