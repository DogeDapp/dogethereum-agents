package org.dogethereum.dogesubmitter.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.StaticArray9;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.3.1.
 */
public class DogeRelay extends Contract {
    private static final String BINARY = "0x6060604052610100600860146101000a81548163ffffffff021916908363ffffffff160217905550341561003257600080fd5b604051602080613d378339810160405280805190602001909190505080600560006101000a81548160ff0219169083600281111561006c57fe5b021790555050613cb6806100816000396000f3006060604052600436106100c5576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631defb765146100ca578063493472721461011f5780634b50c399146101485780635292a59014610183578063541e9cd7146101be5780636e2a8e7c146102275780637037c95d146102a1578063922407ca1461035e5780639be7076a146103af578063aa863036146103d8578063b88da7591461049b578063c32e6af0146104d2578063e1bafb91146105b4575b600080fd5b34156100d557600080fd5b6100dd6105ed565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561012a57600080fd5b610132610613565b6040518082815260200191505060405180910390f35b341561015357600080fd5b610169600480803590602001909190505061061d565b604051808215151515815260200191505060405180910390f35b341561018e57600080fd5b6101a860048080356000191690602001909190505061066d565b6040518082815260200191505060405180910390f35b34156101c957600080fd5b61020d600480803590602001909190803567ffffffffffffffff169060200190919080356fffffffffffffffffffffffffffffffff16906020019091905050610d5f565b604051808215151515815260200191505060405180910390f35b341561023257600080fd5b61028b600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091908035906020019091905050610da4565b6040518082815260200191505060405180910390f35b34156102ac57600080fd5b610348600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091908035906020019091905050610dbc565b6040518082815260200191505060405180910390f35b341561036957600080fd5b610371610e2c565b6040518082600960200280838360005b8381101561039c578082015181840152602081019050610381565b5050505090500191505060405180910390f35b34156103ba57600080fd5b6103c2610eba565b6040518082815260200191505060405180910390f35b34156103e357600080fd5b610485600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001909190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091908035906020019091905050610ed6565b6040518082815260200191505060405180910390f35b34156104a657600080fd5b6104bc6004808035906020019091905050610f6d565b6040518082815260200191505060405180910390f35b34156104dd57600080fd5b61059e600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080359060200190919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509190803590602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610fa6565b6040518082815260200191505060405180910390f35b34156105bf57600080fd5b6105eb600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611167565b005b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600354905090565b600080600860149054906101000a900463ffffffff166002600085815260200190815260200160002060000160000160009054906101000a900463ffffffff161663ffffffff1614159050919050565b600080600080600080600080600080600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610729577f6080b2cdc7fc4777ed1e1066af5de1df45ae9186adbdb7aec21fde27a3e17e4c60006001026127426040518083600019166000191681526020018281526020019250505060405180910390a160009950610d51565b600660008c6001900481526020019081526020016000209850886000016001015497508860000160020154965061075f87611215565b95506000866fffffffffffffffffffffffffffffffff1614156107d1577f6080b2cdc7fc4777ed1e1066af5de1df45ae9186adbdb7aec21fde27a3e17e4c8860010261272e6040518083600019166000191681526020018281526020019250505060405180910390a160009950610d51565b60006107dc89611215565b6fffffffffffffffffffffffffffffffff1614151561084a577f6080b2cdc7fc4777ed1e1066af5de1df45ae9186adbdb7aec21fde27a3e17e4c886001026127386040518083600019166000191681526020018281526020019250505060405180910390a160009950610d51565b8860000160000160089054906101000a900463ffffffff16945061086d87611253565b60010167ffffffffffffffff16935061088587611297565b925060028081111561089357fe5b600560009054906101000a900460ff1660028111156108ae57fe5b141515610aa7576000600160009054906101000a900463ffffffff1663ffffffff161415610958578263ffffffff168563ffffffff16141580156108f9575060008363ffffffff1614155b15610953577f6080b2cdc7fc4777ed1e1066af5de1df45ae9186adbdb7aec21fde27a3e17e4c8860010261271a6040518083600019166000191681526020018281526020019250505060405180910390a160009950610d51565b610aa6565b60018060009054906101000a900463ffffffff1663ffffffff16141561097d57610aa5565b6109ad61099161098c896112ca565b6112ed565b63ffffffff166109a0896112ed565b63ffffffff160384611320565b9150600160028111156109bc57fe5b600560009054906101000a900460ff1660028111156109d757fe5b148015610a0b575060786109ea886112ed565b8a60000160000160049054906101000a900463ffffffff160363ffffffff16115b8015610a1a57506202673c8410155b15610a2757631e0fffff91505b8163ffffffff168563ffffffff1614158015610a4a575060008263ffffffff1614155b15610aa4577f6080b2cdc7fc4777ed1e1066af5de1df45ae9186adbdb7aec21fde27a3e17e4c886001026127246040518083600019166000191681526020018281526020019250505060405180910390a160009950610d51565b5b5b5b88600260008a815260200190815260200160002060008201816000016000820160009054906101000a900463ffffffff168160000160006101000a81548163ffffffff021916908363ffffffff1602179055506000820160049054906101000a900463ffffffff168160000160046101000a81548163ffffffff021916908363ffffffff1602179055506000820160089054906101000a900463ffffffff168160000160086101000a81548163ffffffff021916908363ffffffff16021790555060008201600c9054906101000a900463ffffffff1681600001600c6101000a81548163ffffffff021916908363ffffffff16021790555060018201548160010155600282015481600201556003820154816003015550506004820154816004015560058201548160050155905050610be08888611422565b600660008c6001900481526020019081526020016000206000808201600080820160006101000a81549063ffffffff02191690556000820160046101000a81549063ffffffff02191690556000820160086101000a81549063ffffffff021916905560008201600c6101000a81549063ffffffff02191690556001820160009055600282016000905560038201600090555050600482016000905560058201600090555050610c8e8561157f565b7d0fffff000000000000000000000000000000000000000000000000000000811515610cb657fe5b0486019050610cc588826115c3565b600454816fffffffffffffffffffffffffffffffff16101515610d035787600381905550806fffffffffffffffffffffffffffffffff166004819055505b7f6080b2cdc7fc4777ed1e1066af5de1df45ae9186adbdb7aec21fde27a3e17e4c88600102856040518083600019166000191681526020018281526020019250505060405180910390a18399505b505050505050505050919050565b600080600454141515610d755760009050610d9d565b600160048190555083600381905550610d8e848461160c565b610d9884836115c3565b600190505b9392505050565b6000610db4836000855185611655565b905092915050565b600080600080600080935060009250600091505b85821015610e2157610de28885611c4c565b63ffffffff169050600484019350610e09888583610e008b88611e61565b60019004611655565b94508084019350602083019250600182019150610dd0565b505050509392505050565b610e34613b6f565b600080600354915081836000600981101515610e4c57fe5b602002018181525050600090505b6008811015610eb257600080610e708484611e77565b63ffffffff1663ffffffff168152602001908152602001600020548360018301600981101515610e9c57fe5b6020020181815250508080600101915050610e5a565b829250505090565b6000610ec7600354611253565b67ffffffffffffffff16905090565b600080610ee286611ec8565b9050604086511415610f43577f65bd72698b9ffcfb3c7cb4c7414e13225cabd57fb690e183ae8c01c8ec268ebd81600102614e526040518083600019166000191681526020018281526020019250505060405180910390a160009150610f64565b6001610f5182878787611f94565b1415610f5f57809150610f64565b600091505b50949350505050565b60006002600083815260200190815260200160002060000160000160009054906101000a900463ffffffff1663ffffffff169050919050565b6000806000610fb788888888610ed6565b9150600082141515611109578373ffffffffffffffffffffffffffffffffffffffff16631c0b636789846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825284818151815260200191508051906020019080838360005b83811015611052578082015181840152602081019050611037565b50505050905090810190601f16801561107f5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b151561109e57600080fd5b5af115156110ab57600080fd5b5050506040518051905090507f4e64138cc499eb1adf9edff9ef69bd45c56ac4bfd307540952e4c9d51eab55c182600102826040518083600019166000191681526020018281526020019250505060405180910390a180925061115c565b7f4e64138cc499eb1adf9edff9ef69bd45c56ac4bfd307540952e4c9d51eab55c1600060010261753a6040518083600019166000191681526020018281526020019250505060405180910390a161753a92505b505095945050505050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480156111c6575060008173ffffffffffffffffffffffffffffffffffffffff1614155b15156111d157600080fd5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60007001000000000000000000000000000000008060026000858152602001908152602001600020600401540281151561124b57fe5b049050919050565b60007801000000000000000000000000000000000000000000000000600260008481526020019081526020016000206004015481151561128f57fe5b049050919050565b60006002600083815260200190815260200160002060000160000160089054906101000a900463ffffffff169050919050565b600060026000838152602001908152602001600020600001600201549050919050565b60006002600083815260200190815260200160002060000160000160049054906101000a900463ffffffff169050919050565b600080600080600080603c9450879350600860070b85850360070b81151561134457fe5b0585019350600460070b8560070b81151561135b57fe5b0585039250600260070b8560070b81151561137257fe5b05850191508260070b8460070b121561138d578293506113a0565b8160070b8460070b131561139f578193505b5b6113a98761157f565b90508360070b810290508460070b818115156113c157fe5b0490507d0fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81111561140c577d0fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90505b61141581612128565b9550505050505092915050565b60008060008085600080600160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020019081526020016000208190555061147986600160009054906101000a900463ffffffff166121ce565b60018060008282829054906101000a900463ffffffff160192506101000a81548163ffffffff021916908363ffffffff1602179055506114c48660016114be88611253565b0161160c565b600093506114d185612222565b92506114df84600085612271565b93506114ea86611253565b67ffffffffffffffff169150600190505b600881101561155c57600161150f826122ae565b8381151561151957fe5b0614156115355761152e848260040285612271565b935061154f565b61154c84826004026115478885611e77565b612271565b93505b80806001019150506114fb565b836002600088815260200190815260200160002060050181905550505050505050565b600080600063010000008463ffffffff1681151561159957fe5b0463ffffffff16915062ffffff841663ffffffff169050600382036101000a810292505050919050565b6000600260008481526020019081526020016000206004015490506115ea816010846122bb565b9050806002600085815260200190815260200160002060040181905550505050565b6000600260008481526020019081526020016000206004015490506116338160008461237c565b9050806002600085815260200190815260200160002060040181905550505050565b6000806000611662613b98565b600060508710156116c3577f6080b2cdc7fc4777ed1e1066af5de1df45ae9186adbdb7aec21fde27a3e17e4c60006001026127426040518083600019166000191681526020018281526020019250505060405180910390a160009450611c40565b6007600081546001019190508190555060066000600754815260200190815260200160002093506116f489896123e5565b8460000160008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160086101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001600c6101000a81548163ffffffff021916908363ffffffff1602179055506080820151816001015560a0820151816002015560c0820151816003015590505083600001600101549250600015611a49576117db6117d68a8a8a8c016124d6565b612539565b91506117fd8460000160000160089054906101000a900463ffffffff1661157f565b61180a8360000151612748565b1115611865577f6080b2cdc7fc4777ed1e1066af5de1df45ae9186adbdb7aec21fde27a3e17e4c836001026127926040518083600019166000191681526020018281526020019250505060405180910390a160009450611c40565b61186f8383612779565b90506001811415156118ce577f6080b2cdc7fc4777ed1e1066af5de1df45ae9186adbdb7aec21fde27a3e17e4c83600102826040518083600019166000191681526020018281526020019250505060405180910390a160009450611c40565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634754efd061191e8b60508b8d01038b8d016124d6565b8460000151600102336007546001026040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200185600019166000191681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018360001916600019168152602001828103825286818151815260200191508051906020019080838360005b838110156119e65780820151818401526020810190506119cb565b50505050905090810190601f168015611a135780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1515611a3457600080fd5b5af11515611a4157600080fd5b505050611c3b565b611a698460000160000160089054906101000a900463ffffffff1661157f565b611a7287612748565b1115611acd577f6080b2cdc7fc4777ed1e1066af5de1df45ae9186adbdb7aec21fde27a3e17e4c836001026127926040518083600019166000191681526020018281526020019250505060405180910390a160009450611c40565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634754efd0611b188b600060506124d6565b88600102336007546001026040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200185600019166000191681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018360001916600019168152602001828103825286818151815260200191508051906020019080838360005b83811015611bdc578082015181840152602081019050611bc1565b50505050905090810190601f168015611c095780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1515611c2a57600080fd5b5af11515611c3757600080fd5b5050505b600194505b50505050949350505050565b60008260038301815181101515611c5f57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090046101008460028501815181101515611ce157fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900402620100008560018601815181101515611d6557fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090040263010000008686815181101515611de757fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900402010101905092915050565b6000808260208501015190508091505092915050565b60007c01000000000000000000000000000000000000000000000000000000008260200260020a600260008681526020019081526020016000206005015402811515611ebf57fe5b04905092915050565b6000611f8d600280846040518082805190602001908083835b602083101515611f065780518252602082019150602081019050602083039250611ee1565b6001836020036101000a0380198251168184511680821785525050505050509050019150506020604051808303816000865af11515611f4457600080fd5b5050604051805190506040518082600019166000191681526020019150506020604051808303816000865af11515611f7b57600080fd5b50506040518051905060019004612748565b9050919050565b6000611f9f82612811565b15611ffa577f65bd72698b9ffcfb3c7cb4c7414e13225cabd57fb690e183ae8c01c8ec268ebd85600102614e346040518083600019166000191681526020018281526020019250505060405180910390a1614e349050612120565b6120038261285c565b151561205f577f65bd72698b9ffcfb3c7cb4c7414e13225cabd57fb690e183ae8c01c8ec268ebd85600102614e3e6040518083600019166000191681526020018281526020019250505060405180910390a1614e3e9050612120565b6120688261289a565b6120738686866128bd565b1415156120d0577f65bd72698b9ffcfb3c7cb4c7414e13225cabd57fb690e183ae8c01c8ec268ebd85600102614e486040518083600019166000191681526020018281526020019250505060405180910390a1614e489050612120565b7f65bd72698b9ffcfb3c7cb4c7414e13225cabd57fb690e183ae8c01c8ec268ebd8560010260016040518083600019166000191681526020018281526020019250505060405180910390a1600190505b949350505050565b6000806000612143600761213b8661295d565b01600361298b565b91506000905060038211151561216f5761216862ffffff8516836003036008026129a4565b905061218a565b61217f846003840360080261298b565b905062ffffff811690505b600062800000821663ffffffff1611156121b8576121af8163ffffffff16600861298b565b90506001820191505b6121c38260186129a4565b811792505050919050565b600080600260008581526020019081526020016000206004015491508263ffffffff1690506121ff8260088361237c565b915081600260008681526020019081526020016000206004018190555050505050565b600078010000000000000000000000000000000000000000000000006801000000000000000060026000858152602001908152602001600020600401540281151561226957fe5b049050919050565b600060405184815282601c1a8482015382601d1a6001850182015382601e1a6002850182015382601f1a6003850182015380519150509392505050565b60008160050a9050919050565b60006040518481528260101a848201538260111a600185018201538260121a600285018201538260131a600385018201538260141a600485018201538260151a600585018201538260161a600685018201538260171a600785018201538260181a600885018201538260191a6009850182015382601a1a600a850182015382601b1a600b850182015382601c1a600c850182015382601d1a600d850182015382601e1a600e850182015382601f1a600f850182015380519150509392505050565b60006040518481528260181a848201538260191a6001850182015382601a1a6002850182015382601b1a6003850182015382601c1a6004850182015382601d1a6005850182015382601e1a6006850182015382601f1a6007850182015380519150509392505050565b6123ed613bf8565b6123f783836129b4565b816000019063ffffffff16908163ffffffff168152505061241883836129e8565b816020019063ffffffff16908163ffffffff16815250506124398383612a1c565b816040019063ffffffff16908163ffffffff16815250506124a1600261246185856050612a50565b6040518082600019166000191681526020019150506020604051808303816000865af1151561248f57600080fd5b50506040518051905060019004612748565b8160800181815250506124b48383612a7a565b8160a00181815250506124c78383612a98565b8160c001818152505092915050565b6124de613c4e565b60006124e8613c4e565b8484039150816040518059106124fb5750595b9080825280601f01601f191660200182016040525090508160208201838760208a010160045afa151561252d57600080fd5b80925050509392505050565b612541613b98565b600080600061254e613c4e565b60006050945061255e8786612ab6565b80945081955050506125718786866124d6565b9150612636600280846040518082805190602001908083835b6020831015156125af578051825260208201915060208101905060208303925061258a565b6001836020036101000a0380198251168184511680821785525050505050509050019150506020604051808303816000865af115156125ed57600080fd5b5050604051805190506040518082600019166000191681526020019150506020604051808303816000865af1151561262457600080fd5b50506040518051905060019004612748565b86602001818152505083945061264c8786612aeb565b86600001818152505060208501945061266787866000612baa565b8191508760e001819750829052505061268287866020612c73565b8661010001818152505060048501945061269e87866000612baa565b8191508760600181975082905250506126b987866020612c73565b8660800181815250506028850194506126d28786612aeb565b8660c00181815250506028850194506126ed87866020612c73565b8661012001818152505061270087613488565b886040018960a0018281525082945083815250505050601483820311801561272c575060018660a00151145b1561273e576127748660a00181815250505b5050505050919050565b600060405160005b602081101561276e578381601f031a81830153600181019050612750565b508051915050919050565b60006127848361061d565b151561279457612756905061280b565b60008261010001511415156127ad5761274c905061280b565b60018260a001511415156127c7578160a00151905061280b565b81604001516127d684846137be565b1415156127e75761277e905061280b565b8160c001516127f5836137db565b14151561280657612788905061280b565b600190505b92915050565b60008060006003549150600090505b6006811015612850578184141561283a5760019250612855565b612843826112ca565b9150600181019050612820565b600092505b5050919050565b60008061286883611253565b67ffffffffffffffff16905060008114156128865760009150612894565b8261289082613804565b1491505b50919050565b600060026000838152602001908152602001600020600001600301549050919050565b6000806000806000806000899550600094505b875185101561294d5787858151811015156128e757fe5b9060200190602002015193506002898115156128ff57fe5b069250600183141561291657839150859050612927565b6000831415612926578591508390505b5b61293182826138a5565b955060028981151561293f57fe5b0498506001850194506128d0565b8596505050505050509392505050565b6000808290505b60008111156129855761297881600161298b565b9050600182019150612964565b50919050565b60008160020a8381151561299b57fe5b04905092915050565b60008160020a8302905092915050565b600081600484010151630100000081601b1a026201000082601a1a02016101008260191a02018160181a0191505092915050565b600081604c84010151630100000081601b1a026201000082601a1a02016101008260191a02018160181a0191505092915050565b600081605084010151630100000081601b1a026201000082601a1a02016101008260191a02018160181a0191505092915050565b60006040516020818486602089010160025afa1515612a6e57600080fd5b80519150509392505050565b600080826024850101519050612a8f81612748565b91505092915050565b600080826044850101519050612aad81612748565b91505092915050565b600080612ac88460048501600061393d565b8092508193505050612adc848360006139d3565b91506004820191509250929050565b600080600090505b6020811015612ba35783518382011015612b965780601f0360080284848301815181101515612b1e57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090049060020a02820191505b8080600101915050612af3565b5092915050565b612bb2613c62565b6000806000612bbf613c62565b6000612bcb8989613a51565b80995081955050506000871480612be157508387115b15612bee57839250612bf2565b8692505b82604051805910612c005750595b90808252806020026020018201604052509150600090505b82811015612c6157612c32612c2d8a8a612aeb565b612748565b8282815181101515612c4057fe5b90602001906020020181815250506020880197508080600101915050612c18565b81889550955050505050935093915050565b60006008821415612d04578383815181101515612c8c57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900460ff169050613481565b6010821415612e18576101008460018501815181101515612d2157fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004028484815181101515612d9e57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090040161ffff169050613481565b60208214156130395763010000008460038501815181101515612e3757fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900402620100008560028601815181101515612ebb57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004026101008660018701815181101515612f3e57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004028686815181101515612fbb57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900401010163ffffffff169050613481565b604082141561348057670100000000000000846007850181518110151561305c57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900402660100000000000085600686018151811015156130e457fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090040265010000000000866005870181518110151561316b57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090040264010000000087600488018151811015156131f157fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004026301000000886003890181518110151561327657fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900402620100008960028a018151811015156132fa57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004026101008a60018b0181518110151561337d57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004028a8a8151811015156133fa57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090040101010101010167ffffffffffffffff169050613481565b5b9392505050565b60008060008060008060009150600090505b865181101561377c5760fa7f01000000000000000000000000000000000000000000000000000000000000000287828151811015156134d557fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480156135ee575060be7f010000000000000000000000000000000000000000000000000000000000000002876001830181518110151561357f57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80156136995750606d7f010000000000000000000000000000000000000000000000000000000000000002876002830181518110151561362a57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80156137445750606d7f01000000000000000000000000000000000000000000000000000000000000000287600383018151811015156136d557fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b15613771578115613766576000600484036127608292509550955095506137b4565b600191506004810192505b80600101905061349a565b81151561379a5760006004840361276a8292509550955095506137b4565b6137a48784612aeb565b6004840360018090509550955095505b5050509193909250565b60006137d383836080015184606001516128bd565b905092915050565b60006137fd6137f883602001518461010001518560e001516128bd565b612748565b9050919050565b60008060006003549150600160080390505b8361382083611253565b67ffffffffffffffff16111561389b575b61383a816122ae565b8461384484611253565b67ffffffffffffffff160310801561385c5750600081115b1561386c57600181039050613831565b6000806138798484611e77565b63ffffffff1663ffffffff168152602001908152602001600020549150613816565b8192505050919050565b60006139356002806138b686612748565b6138bf86612748565b60405180838152602001828152602001925050506020604051808303816000865af115156138ec57600080fd5b5050604051805190506040518082600019166000191681526020019150506020604051808303816000865af1151561392357600080fd5b50506040518051905060019004612748565b905092915050565b60008060008060008060006139528a8a613a51565b809a508195505050600088148061396857508388115b1561397557839250613979565b8792505b600090505b828110156139c0576024890198506139968a8a613a51565b809a50819350505060008114156139ab578894505b6004820189019850808060010191505061397e565b8885965096505050505050935093915050565b60008060008060006139e58888613a51565b809850819550505060008614806139fb57508386115b15613a0857839250613a0c565b8592505b600090505b82811015613a4357600887019650613a298888613a51565b809850819350505081870196508080600101915050613a11565b869450505050509392505050565b60008060008484815181101515613a6457fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004905060018401935060fd8160ff161015613af75780848160ff16915092509250613b67565b60fd8160ff161415613b1c57613b0f85856010612c73565b6002850192509250613b67565b60fe8160ff161415613b4157613b3485856020612c73565b6004850192509250613b67565b60ff8160ff161415613b6657613b5985856040612c73565b6008850192509250613b67565b5b509250929050565b610120604051908101604052806009905b6000815260200190600190039081613b805790505090565b61014060405190810160405280600081526020016000815260200160008152602001613bc2613c76565b8152602001600081526020016000815260200160008152602001613be4613c76565b815260200160008152602001600081525090565b60e060405190810160405280600063ffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff1681526020016000815260200160008152602001600081525090565b602060405190810160405280600081525090565b602060405190810160405280600081525090565b6020604051908101604052806000815250905600a165627a7a723058206001bbff603a1935e8d1991c6d2d47071c17e7a939bf2a3066777ed03dbbdcec0029";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<>();
        _addresses.put("1523477880516", "0x57fbd8debd1651c3676ef8fcb9d4145b6d83b6ce");
    }

    protected DogeRelay(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DogeRelay(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<StoreHeaderEventResponse> getStoreHeaderEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("StoreHeader", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<StoreHeaderEventResponse> responses = new ArrayList<StoreHeaderEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            StoreHeaderEventResponse typedResponse = new StoreHeaderEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.blockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<StoreHeaderEventResponse> storeHeaderEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("StoreHeader", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, StoreHeaderEventResponse>() {
            @Override
            public StoreHeaderEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                StoreHeaderEventResponse typedResponse = new StoreHeaderEventResponse();
                typedResponse.log = log;
                typedResponse.blockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<GetHeaderEventResponse> getGetHeaderEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("GetHeader", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<GetHeaderEventResponse> responses = new ArrayList<GetHeaderEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            GetHeaderEventResponse typedResponse = new GetHeaderEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.blockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<GetHeaderEventResponse> getHeaderEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("GetHeader", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, GetHeaderEventResponse>() {
            @Override
            public GetHeaderEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                GetHeaderEventResponse typedResponse = new GetHeaderEventResponse();
                typedResponse.log = log;
                typedResponse.blockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<VerifyTransactionEventResponse> getVerifyTransactionEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("VerifyTransaction", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<VerifyTransactionEventResponse> responses = new ArrayList<VerifyTransactionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VerifyTransactionEventResponse typedResponse = new VerifyTransactionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.txHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<VerifyTransactionEventResponse> verifyTransactionEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("VerifyTransaction", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, VerifyTransactionEventResponse>() {
            @Override
            public VerifyTransactionEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                VerifyTransactionEventResponse typedResponse = new VerifyTransactionEventResponse();
                typedResponse.log = log;
                typedResponse.txHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<RelayTransactionEventResponse> getRelayTransactionEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("RelayTransaction", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<RelayTransactionEventResponse> responses = new ArrayList<RelayTransactionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RelayTransactionEventResponse typedResponse = new RelayTransactionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.txHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RelayTransactionEventResponse> relayTransactionEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("RelayTransaction", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, RelayTransactionEventResponse>() {
            @Override
            public RelayTransactionEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                RelayTransactionEventResponse typedResponse = new RelayTransactionEventResponse();
                typedResponse.log = log;
                typedResponse.txHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<String> scryptChecker() {
        final Function function = new Function("scryptChecker", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public static RemoteCall<DogeRelay> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger _network) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(_network)));
        return deployRemoteCall(DogeRelay.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<DogeRelay> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger _network) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(_network)));
        return deployRemoteCall(DogeRelay.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public RemoteCall<TransactionReceipt> setScryptChecker(String _scryptChecker) {
        final Function function = new Function(
                "setScryptChecker", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_scryptChecker)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setInitialParent(BigInteger _blockHash, BigInteger _height, BigInteger _chainWork) {
        final Function function = new Function(
                "setInitialParent", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_blockHash), 
                new org.web3j.abi.datatypes.generated.Uint64(_height), 
                new org.web3j.abi.datatypes.generated.Uint128(_chainWork)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> storeBlockHeader(byte[] _blockHeaderBytes, BigInteger _proposedScryptBlockHash) {
        final Function function = new Function(
                "storeBlockHeader", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(_blockHeaderBytes), 
                new org.web3j.abi.datatypes.generated.Uint256(_proposedScryptBlockHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> scryptVerified(byte[] _proposalId) {
        final Function function = new Function(
                "scryptVerified", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_proposalId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> bulkStoreHeaders(byte[] _headersBytes, byte[] _hashesBytes, BigInteger count) {
        final Function function = new Function(
                "bulkStoreHeaders", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(_headersBytes), 
                new org.web3j.abi.datatypes.DynamicBytes(_hashesBytes), 
                new org.web3j.abi.datatypes.generated.Uint256(count)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> verifyTx(byte[] _txBytes, BigInteger _txIndex, List<BigInteger> _siblings, BigInteger _txBlockHash) {
        final Function function = new Function(
                "verifyTx", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(_txBytes), 
                new org.web3j.abi.datatypes.generated.Uint256(_txIndex), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(_siblings, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(_txBlockHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> relayTx(byte[] _txBytes, BigInteger _txIndex, List<BigInteger> _siblings, BigInteger _txBlockHash, String _targetContract) {
        final Function function = new Function(
                "relayTx", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(_txBytes), 
                new org.web3j.abi.datatypes.generated.Uint256(_txIndex), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(_siblings, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(_txBlockHash), 
                new org.web3j.abi.datatypes.Address(_targetContract)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<List> getBlockLocator() {
        final Function function = new Function("getBlockLocator", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray9<Uint256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<BigInteger> getBestBlockHeight() {
        final Function function = new Function("getBestBlockHeight", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getBestBlockHash() {
        final Function function = new Function("getBestBlockHash", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> isMergeMined(BigInteger _blockHash) {
        final Function function = new Function(
                "isMergeMined", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_blockHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> getVersion(BigInteger _blockHash) {
        final Function function = new Function(
                "getVersion", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_blockHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static DogeRelay load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DogeRelay(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static DogeRelay load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DogeRelay(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class StoreHeaderEventResponse {
        public Log log;

        public byte[] blockHash;

        public BigInteger returnCode;
    }

    public static class GetHeaderEventResponse {
        public Log log;

        public byte[] blockHash;

        public BigInteger returnCode;
    }

    public static class VerifyTransactionEventResponse {
        public Log log;

        public byte[] txHash;

        public BigInteger returnCode;
    }

    public static class RelayTransactionEventResponse {
        public Log log;

        public byte[] txHash;

        public BigInteger returnCode;
    }
}
