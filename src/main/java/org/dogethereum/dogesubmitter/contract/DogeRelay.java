package org.dogethereum.dogesubmitter.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.StaticArray9;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.3.1.
 */
public class DogeRelay extends Contract {
    private static final String BINARY = "0x608060405234801561001057600080fd5b5060405160208061280883398101604052516005805482919060ff1916600183600281111561003b57fe5b0217905550506127b8806100506000396000f3006080604052600436106100d75763ffffffff60e060020a6000350416631defb76581146100dc5780632a02fa001461010d57806349347272146101225780635292a59014610149578063541e9cd71461016157806355c90a7c146101af5780636e2a8e7c146102705780637037c95d146102cb578063865bc71014610364578063922407ca146103875780639be7076a146103d5578063aa863036146103ea578063b88da75914610485578063c11818a11461049d578063d095090a14610576578063db1ee9031461069e578063e1bafb91146106b6575b600080fd5b3480156100e857600080fd5b506100f16106d7565b60408051600160a060020a039092168252519081900360200190f35b34801561011957600080fd5b506100f16106e6565b34801561012e57600080fd5b506101376106f5565b60408051918252519081900360200190f35b34801561015557600080fd5b506101376004356106fb565b34801561016d57600080fd5b5061019b60043567ffffffffffffffff602435166fffffffffffffffffffffffffffffffff60443516610b8c565b604080519115158252519081900360200190f35b3480156101bb57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101379436949293602493928401919081908401838280828437505060408051818801358901803560208181028481018201909552818452989b6bffffffffffffffffffffffff198b35169b8a8c01359b919a909950606090910197509295509082019350918291850190849080828437509497505084359550505050602090910135600160a060020a03169050610bc8565b34801561027c57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101379436949293602493928401919081908401838280828437509497505093359450610d619350505050565b3480156102d757600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261013794369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497505093359450610d719350505050565b34801561037057600080fd5b50610385600160a060020a0360043516610dd0565b005b34801561039357600080fd5b5061039c610e2b565b604051808261012080838360005b838110156103c25781810151838201526020016103aa565b5050505090500191505060405180910390f35b3480156103e157600080fd5b50610137610e8a565b3480156103f657600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261013794369492936024939284019190819084018382808284375050604080516020808901358a01803580830284810184018652818552999c8b359c909b909a9501985092965081019450909250829190850190849080828437509497505093359450610ea69350505050565b34801561049157600080fd5b50610137600435610f1b565b3480156104a957600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261013794369492936024939284019190819084018382808284375050604080516020808901358a01803580830284810184018652818552999c8b359c909b909a95019850929650810194509092508291908501908490808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497505093359450610f339350505050565b34801561058257600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261013794369492936024939284019190819084018382808284375050604080516020808901358a01803580830284810184018652818552999c8b359c909b909a95019850929650810194509092508291908501908490808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020808901358a01803580830284810184018652818552999c8b359c909b909a9501985092965081019450909250829190850190849080828437509497505084359550505050602090910135600160a060020a03169050610faa565b3480156106aa57600080fd5b5061013760043561111e565b3480156106c257600080fd5b50610385600160a060020a0360043516611124565b600854600160a060020a031681565b600954600160a060020a031681565b60035490565b600854600090819081908190819081908190819081908190600160a060020a031633146107565760408051600081526127426020820152815160008051602061276d833981519152929181900390910190a160009950610b7e565b60008b815260066020526040902060018101546002820154919a509850965061077e8761117f565b95506fffffffffffffffffffffffffffffffff861615156107cc576040805189815261272e6020820152815160008051602061276d833981519152929181900390910190a160009950610b7e565b6107d58861117f565b6fffffffffffffffffffffffffffffffff161561081f57604080518981526127386020820152815160008051602061276d833981519152929181900390910190a160009950610b7e565b885468010000000000000000900463ffffffff16945061083e876111ae565b60010167ffffffffffffffff169350610856876111e0565b9250600260055460ff16600281111561086b57fe5b146109d85760015463ffffffff1615156108dd578263ffffffff168563ffffffff16141580156108a0575063ffffffff831615155b156108d8576040805189815261271a6020820152815160008051602061276d833981519152929181900390910190a160009950610b7e565b6109d8565b6001805463ffffffff1614156108f2576109d8565b61092261090661090189611204565b61121a565b63ffffffff166109158961121a565b63ffffffff16038461123a565b9150600160055460ff16600281111561093757fe5b1480156109635750607861094a8861121a565b8a5463ffffffff64010000000090910481169190910316115b801561097257506202673c8410155b1561097f57631e0fffff91505b8163ffffffff168563ffffffff16141580156109a0575063ffffffff821615155b156109d857604080518981526127246020820152815160008051602061276d833981519152929181900390910190a160009950610b7e565b60008881526002602081905260409091208a54815463ffffffff191663ffffffff918216178083558c546401000000009081900483160267ffffffff0000000019909116178083558c5468010000000000000000908190048316026bffffffff000000000000000019909116178083558c546c01000000000000000000000000908190049092169091026fffffffff000000000000000000000000199091161781556001808c015490820155818b0154918101919091556003808b0154908201556004808b0154908201556005808b0154910155610ab688886112fd565b60008b815260066020526040812080546fffffffffffffffffffffffffffffffff191681556001810182905560028101829055600381018290556004810182905560050155610b0c610b078661140d565b611439565b86019050610b1a8882611464565b6004546fffffffffffffffffffffffffffffffff821610610b515760038890556fffffffffffffffffffffffffffffffff81166004555b6040805189815260208101869052815160008051602061276d833981519152929181900390910190a18399505b505050505050505050919050565b60045460009015610b9f57506000610bc1565b60016004556003849055610bb3848461149c565b610bbd8483611464565b5060015b9392505050565b6000806000610bd989888888610ea6565b91508115610d24576040517ff997d47f000000000000000000000000000000000000000000000000000000008152602481018390526bffffffffffffffffffffffff19891660448201526060600482019081528a5160648301528a51600160a060020a0387169263f997d47f928d9287928e9291829160840190602087019080838360005b83811015610c76578181015183820152602001610c5e565b50505050905090810190601f168015610ca35780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b158015610cc457600080fd5b505af1158015610cd8573d6000803e3d6000fd5b505050506040513d6020811015610cee57600080fd5b50516040805184815260208101839052815192935060008051602061272d833981519152929081900390910190a1809250610d55565b604080516000815261753a6020820152815160008051602061272d833981519152929181900390910190a161753a92505b50509695505050505050565b6000610bc18360008551856114bb565b6000808080805b85821015610dc557610d8a88856119b2565b63ffffffff169050600484019350610dad888583610da88b88611a77565b6114bb565b94508084019350602083019250600182019150610d78565b505050509392505050565b600954600160a060020a0316158015610df15750600160a060020a03811615155b1515610dfc57600080fd5b6009805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b610e336126d0565b60035480825260005b6008811015610e8557600080610e528484611a7f565b63ffffffff168152602081019190915260400160002054836001830160098110610e7857fe5b6020020152600101610e3c565b505090565b6000610e976003546111ae565b67ffffffffffffffff16905090565b600080610eb286611aa9565b9050855160401415610ef15760408051828152614e5c6020820152815160008051602061274d833981519152929181900390910190a160009150610f12565b610efd81868686611c4c565b60011415610f0d57809150610f12565b600091505b50949350505050565b60009081526002602052604090205463ffffffff1690565b600080610f3f87611aa9565b9050865160401415610f7e5760408051828152614e5c6020820152815160008051602061274d833981519152929181900390910190a160009150610fa0565b610f8b8187878787611d52565b60011415610f9b57809150610fa0565b600091505b5095945050505050565b6000806000610fb888611aa9565b600954604080517f642ed988000000000000000000000000000000000000000000000000000000008152600481018990529051929450600160a060020a039091169163642ed988916024808201926020929091908290030181600087803b15801561102257600080fd5b505af1158015611036573d6000803e3d6000fd5b505050506040513d602081101561104c57600080fd5b5051611059838989611fbb565b146110985760008051602061274d8339815191526110768c611aa9565b60408051918252614e4860208301528051918290030190a1614e489250611110565b6110a58b8b8b8b89610f33565b905080156110df576040805182815260006020820152815160008051602061272d833981519152929181900390910190a160009250611110565b604080516000815261753a6020820152815160008051602061272d833981519152929181900390910190a161753a92505b505098975050505050505050565b50600090565b600854600160a060020a03161580156111455750600160a060020a03811615155b151561115057600080fd5b6008805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000818152600260205260408120600401547001000000000000000000000000000000009081025b0492915050565b6000818152600260205260408120600401547801000000000000000000000000000000000000000000000000906111a7565b60009081526002602052604090205468010000000000000000900463ffffffff1690565b6000908152600260208190526040909120015490565b600090815260026020526040902054640100000000900463ffffffff1690565b6000603c6008603b198501600790810b91909105820190602d90605a90859084900b83131561126b5782935061127d565b8160070b8460070b131561127d578193505b6112868761140d565b90508360070b810290508460070b8181151561129e57fe5b0490507d0fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8111156112e857507d0fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b6112f181612038565b98975050505050505050565b6001805463ffffffff9081166000908152602081905260408120859055915482918291829161132e918891166120d0565b6001805463ffffffff80821683011663ffffffff1990911617905561135e86611356876111ae565b60010161149c565b6000935061136b85612110565b92506113798460008561214d565b9350611384866111ae565b67ffffffffffffffff169150600190505b60088110156113f1576113a781612187565b828115156113b157fe5b06600114156113cf576113c884826004028561214d565b93506113e9565b6113e684826004026113e18885611a7f565b61214d565b93505b600101611395565b5050506000928352600260205260409092206005019190915550565b62ffffff8116630100000063ffffffff838116919091041660021981016101000a8202915b5050919050565b6000817d0fffff0000000000000000000000000000000000000000000000000000008115156111a757fe5b6000828152600260205260409020600401546114828160108461218d565b600093845260026020526040909320600401929092555050565b600082815260026020526040812060040154906114829082908461224b565b600080600080600060508710156115005760408051600081526127426020820152815160008051602061276d833981519152929181900390910190a1600094506119a6565b60078054600101908190556000908152600660205260409020935061152589896122b1565b80518554602080840151604080860151606087015163ffffffff9081166c01000000000000000000000000026fffffffff0000000000000000000000001992821668010000000000000000026bffffffff0000000000000000199583166401000000000267ffffffff00000000199390991663ffffffff19909816979097179190911696909617929092169390931716929092178755608080840151600189015560a0840151600289015560c0909301516003880155517ffa7199a1000000000000000000000000000000000000000000000000000000008152602481018b9052604481018a905260648101899052600481019283528b5160848201528b5173__DogeTx________________________________9363fa7199a1938e938e938e938e939092839260a49091019188019080838360005b8381101561167357818101518382015260200161165b565b50505050905090810190601f1680156116a05780820380516001836020036101000a031916815260200191505b509550505050505060606040518083038186803b1580156116c057600080fd5b505af41580156116d4573d6000803e3d6000fd5b505050506040513d60608110156116ea57600080fd5b508051602082015160409092015190945090925090508215611738576040805183815260208101859052815160008051602061276d833981519152929181900390910190a1600094506119a6565b6040805160e081018252855463ffffffff80821683526401000000008204811660208401526801000000000000000082048116938301939093526c010000000000000000000000009004909116606082015260018501546080820152600285015460a0820152600385015460c08201526117b19061232a565b156118b057600854600160a060020a03166366ffaaab6117d98b8a8c01604f19810190612334565b60075460405160e060020a63ffffffff851602815260248101869052604481018290523360648201819052608060048301908152845160848401528451889493829160a490910190602088019080838360005b8381101561184457818101518382015260200161182c565b50505050905090810190601f1680156118715780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561189357600080fd5b505af11580156118a7573d6000803e3d6000fd5b505050506119a1565b600854600160a060020a03166366ffaaab6118ce8b60006050612334565b60075460405160e060020a63ffffffff8516028152602481018b90526044810182905233606482018190526080600483019081528451608484015284518d9493829160a490910190602088019080838360005b83811015611939578181015183820152602001611921565b50505050905090810190601f1680156119665780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561198857600080fd5b505af115801561199c573d6000803e3d6000fd5b505050505b600194505b50505050949350505050565b600082826003018151811015156119c557fe5b90602001015160f860020a900460f860020a0260f860020a900483836002018151811015156119f057fe5b90602001015160f860020a900460f860020a0260f860020a9004610100028484600101815181101515611a1f57fe5b90602001015160f860020a900460f860020a0260f860020a900462010000028585815181101515611a4c57fe5b90602001015160f860020a900460f860020a0260f860020a9004630100000002010101905092915050565b016020015190565b600082815260026020818152604083206005015460e060020a9291850290910a025b049392505050565b6000611c46600280846040516020018082805190602001908083835b60208310611ae45780518252601f199092019160209182019101611ac5565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310611b475780518252601f199092019160209182019101611b28565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af1158015611b88573d6000803e3d6000fd5b5050506040513d6020811015611b9d57600080fd5b50516040805160208181019390935281518082038401815290820191829052805190928291908401908083835b60208310611be95780518252601f199092019160209182019101611bca565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af1158015611c2a573d6000803e3d6000fd5b5050506040513d6020811015611c3f57600080fd5b5051612394565b92915050565b6000611c57826123bf565b15611c8f5760408051868152614e346020820152815160008051602061274d833981519152929181900390910190a150614e34611d4a565b611c98826123fe565b1515611cd15760408051868152614e3e6020820152815160008051602061274d833981519152929181900390910190a150614e3e611d4a565b611cda8261243a565b611ce5868686611fbb565b14611d1d5760408051868152614e526020820152815160008051602061274d833981519152929181900390910190a150614e52611d4a565b6040805186815260016020820152815160008051602061274d833981519152929181900390910190a15060015b949350505050565b600954604080517f48aefc320000000000000000000000000000000000000000000000000000000081526004810184905290516000928392600160a060020a03909116916348aefc329160248082019260209290919082900301818787803b158015611dbd57600080fd5b505af1158015611dd1573d6000803e3d6000fd5b505050506040513d6020811015611de757600080fd5b50511515611e235760408051888152614e3e6020820152815160008051602061274d833981519152929181900390910190a1614e3e9150610fa0565b604080517fd2db98720000000000000000000000000000000000000000000000000000000081526000602482018190526004820192835286516044830152865173__DogeTx________________________________9363d2db9872938993928291606401906020860190808383885b83811015611eaa578181015183820152602001611e92565b50505050905090810190601f168015611ed75780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b158015611ef557600080fd5b505af4158015611f09573d6000803e3d6000fd5b505050506040513d6020811015611f1f57600080fd5b5051905080611f2f888888611fbb565b14611f855780611f40888888611fbb565b60408051918252519081900360200190a160408051888152614e526020820152815160008051602061274d833981519152929181900390910190a1614e529150610fa0565b6040805188815260016020820152815160008051602061274d833981519152929181900390910190a15060019695505050505050565b60008381808080805b875185101561202a578785815181101515611fdb57fe5b602090810290910101519350600289069250826001141561200057508290508461200d565b82151561200d5750849050825b612017828261244f565b9550600289049850600185019450611fc4565b509398975050505050505050565b6000806000612053612049856124bd565b60070160036124e2565b9150600090506003821161207d576120768462ffffff16836003036008026124f2565b9050612095565b61208d84600384036008026124e2565b62ffffff1690505b600062800000821611156120bd576120b48163ffffffff1660086124e2565b90506001820191505b6120c88260186124f2565b179392505050565b60008281526002602052604090206004015463ffffffff82166120f58260088361224b565b60009485526002602052604090942060040193909355505050565b60008181526002602052604081206004015478010000000000000000000000000000000000000000000000009068010000000000000000026111a7565b600060405184815282601c1a8482015382601d1a6001850182015382601e1a6002850182015382601f1a6003850182015351949350505050565b60050a90565b60006040518481528260101a848201538260111a600185018201538260121a600285018201538260131a600385018201538260141a600485018201538260151a600585018201538260161a600685018201538260171a600785018201538260181a600885018201538260191a6009850182015382601a1a600a850182015382601b1a600b850182015382601c1a600c850182015382601d1a600d850182015382601e1a600e850182015382601f1a600f850182015351949350505050565b60006040518481528260181a848201538260191a6001850182015382601a1a6002850182015382601b1a6003850182015382601c1a6004850182015382601d1a6005850182015382601e1a6006850182015382601f1a6007850182015351949350505050565b6122b96126f0565b6122c383836124f9565b63ffffffff1681526122d5838361252d565b63ffffffff1660208201526122ea8383612561565b63ffffffff16604082015261230183836050612595565b608082015261231083836125f0565b60a082015261231f8383612603565b60c082015292915050565b5161010016151590565b6060600060608484039150816040519080825280601f01601f19166020018201604052801561236d578160200160208202803883390190505b5090508160208201838760208a010160045afa151561238b57600080fd5b95945050505050565b600060405160005b60208110156123b7578381601f031a8183015360010161239c565b505192915050565b600354600090815b60068110156123f457818414156123e15760019250611432565b6123ea82611204565b91506001016123c7565b5060009392505050565b60008061240a836111ae565b67ffffffffffffffff1690508015156124265760009150612434565b8261243082612616565b1491505b50919050565b60009081526002602052604090206003015490565b6000610bc160028061246086612394565b61246986612394565b604051602001808381526020018281526020019250505060405160208183030381529060405260405180828051906020019080838360208310611b475780518252601f199092019160209182019101611b28565b6000815b6000811115612434576124d58160016124e2565b90506001820191506124c1565b60008160020a83811515611aa157fe5b60020a0290565b600081600484010151630100000081601b1a026201000082601a1a02016101008260191a02018160181a0191505092915050565b600081604c84010151630100000081601b1a026201000082601a1a02016101008260191a02018160181a0191505092915050565b600081605084010151630100000081601b1a026201000082601a1a02016101008260191a02018160181a0191505092915050565b6000611d4a60026125a78686866126a9565b60408051602080820193909352815180820384018152908201918290528051909282919084019080838360208310611be95780518252601f199092019160209182019101611bca565b81810160240151600090611d4a81612394565b81810160440151600090611d4a81612394565b60035460009060075b83612629836111ae565b67ffffffffffffffff1611156126a2575b61264381612187565b8461264d846111ae565b67ffffffffffffffff16031080156126655750600081115b15612673576000190161263a565b6000806126808484611a7f565b63ffffffff1663ffffffff16815260200190815260200160002054915061261f565b5092915050565b60006040516020818486602089010160025afa15156126c757600080fd5b51949350505050565b610120604051908101604052806009906020820280388339509192915050565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c08101919091529056004e64138cc499eb1adf9edff9ef69bd45c56ac4bfd307540952e4c9d51eab55c165bd72698b9ffcfb3c7cb4c7414e13225cabd57fb690e183ae8c01c8ec268ebd6080b2cdc7fc4777ed1e1066af5de1df45ae9186adbdb7aec21fde27a3e17e4ca165627a7a72305820b63b03269e62c9cbed8869cc1c447ffa7fd935e8f84e1d95741277ef657325680029";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<>();
        _addresses.put("1528817613108", "0x6f3885459c1b79226280f4c57ac6d2cf27ec79da");
    }

    protected DogeRelay(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DogeRelay(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<StoreHeaderEventResponse> getStoreHeaderEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("StoreHeader", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<StoreHeaderEventResponse> responses = new ArrayList<StoreHeaderEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            StoreHeaderEventResponse typedResponse = new StoreHeaderEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.blockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<StoreHeaderEventResponse> storeHeaderEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("StoreHeader", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, StoreHeaderEventResponse>() {
            @Override
            public StoreHeaderEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                StoreHeaderEventResponse typedResponse = new StoreHeaderEventResponse();
                typedResponse.log = log;
                typedResponse.blockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<GetHeaderEventResponse> getGetHeaderEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("GetHeader", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<GetHeaderEventResponse> responses = new ArrayList<GetHeaderEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            GetHeaderEventResponse typedResponse = new GetHeaderEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.blockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<GetHeaderEventResponse> getHeaderEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("GetHeader", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, GetHeaderEventResponse>() {
            @Override
            public GetHeaderEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                GetHeaderEventResponse typedResponse = new GetHeaderEventResponse();
                typedResponse.log = log;
                typedResponse.blockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<VerifyTransactionEventResponse> getVerifyTransactionEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("VerifyTransaction", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<VerifyTransactionEventResponse> responses = new ArrayList<VerifyTransactionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VerifyTransactionEventResponse typedResponse = new VerifyTransactionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.txHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<VerifyTransactionEventResponse> verifyTransactionEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("VerifyTransaction", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, VerifyTransactionEventResponse>() {
            @Override
            public VerifyTransactionEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                VerifyTransactionEventResponse typedResponse = new VerifyTransactionEventResponse();
                typedResponse.log = log;
                typedResponse.txHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<RelayTransactionEventResponse> getRelayTransactionEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("RelayTransaction", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<RelayTransactionEventResponse> responses = new ArrayList<RelayTransactionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RelayTransactionEventResponse typedResponse = new RelayTransactionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.txHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RelayTransactionEventResponse> relayTransactionEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("RelayTransaction", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, RelayTransactionEventResponse>() {
            @Override
            public RelayTransactionEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                RelayTransactionEventResponse typedResponse = new RelayTransactionEventResponse();
                typedResponse.log = log;
                typedResponse.txHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<String> scryptChecker() {
        final Function function = new Function("scryptChecker", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> superblocks() {
        final Function function = new Function("superblocks", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public static RemoteCall<DogeRelay> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger _network) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(_network)));
        return deployRemoteCall(DogeRelay.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<DogeRelay> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger _network) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(_network)));
        return deployRemoteCall(DogeRelay.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public RemoteCall<TransactionReceipt> setScryptChecker(String _scryptChecker) {
        final Function function = new Function(
                "setScryptChecker", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_scryptChecker)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setSuperblocks(String _claimManager) {
        final Function function = new Function(
                "setSuperblocks", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_claimManager)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setInitialParent(BigInteger _blockHash, BigInteger _height, BigInteger _chainWork) {
        final Function function = new Function(
                "setInitialParent", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_blockHash), 
                new org.web3j.abi.datatypes.generated.Uint64(_height), 
                new org.web3j.abi.datatypes.generated.Uint128(_chainWork)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> storeBlockHeader(byte[] _blockHeaderBytes, BigInteger _proposedScryptBlockHash) {
        final Function function = new Function(
                "storeBlockHeader", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(_blockHeaderBytes), 
                new org.web3j.abi.datatypes.generated.Uint256(_proposedScryptBlockHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> scryptVerified(byte[] _proposalId) {
        final Function function = new Function(
                "scryptVerified", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_proposalId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> scryptFailed(byte[] _proposalId) {
        final Function function = new Function(
                "scryptFailed", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_proposalId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> bulkStoreHeaders(byte[] _headersBytes, byte[] _hashesBytes, BigInteger count) {
        final Function function = new Function(
                "bulkStoreHeaders", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(_headersBytes), 
                new org.web3j.abi.datatypes.DynamicBytes(_hashesBytes), 
                new org.web3j.abi.datatypes.generated.Uint256(count)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> verifyTx(byte[] _txBytes, BigInteger _txIndex, List<BigInteger> _siblings, BigInteger _txBlockHash) {
        final Function function = new Function(
                "verifyTx", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(_txBytes), 
                new org.web3j.abi.datatypes.generated.Uint256(_txIndex), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(_siblings, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(_txBlockHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> verifyTx(byte[] _txBytes, BigInteger _txIndex, List<BigInteger> _siblings, byte[] _txBlockHeaderBytes, byte[] _txSuperblockId) {
        final Function function = new Function(
                "verifyTx", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(_txBytes), 
                new org.web3j.abi.datatypes.generated.Uint256(_txIndex), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(_siblings, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicBytes(_txBlockHeaderBytes), 
                new org.web3j.abi.datatypes.generated.Bytes32(_txSuperblockId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> relayTx(byte[] _txBytes, byte[] operatorPublicKeyHash, BigInteger _txIndex, List<BigInteger> _siblings, BigInteger _txBlockHash, String _targetContract) {
        final Function function = new Function(
                "relayTx", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(_txBytes), 
                new org.web3j.abi.datatypes.generated.Bytes20(operatorPublicKeyHash), 
                new org.web3j.abi.datatypes.generated.Uint256(_txIndex), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(_siblings, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(_txBlockHash), 
                new org.web3j.abi.datatypes.Address(_targetContract)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> relayTx(byte[] _txBytes, BigInteger _txIndex, List<BigInteger> _txSiblings, byte[] _dogeBlockHeader, BigInteger _dogeBlockIndex, List<BigInteger> _dogeBlockSiblings, byte[] _superblockId, String _targetContract) {
        final Function function = new Function(
                "relayTx", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(_txBytes), 
                new org.web3j.abi.datatypes.generated.Uint256(_txIndex), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(_txSiblings, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicBytes(_dogeBlockHeader), 
                new org.web3j.abi.datatypes.generated.Uint256(_dogeBlockIndex), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(_dogeBlockSiblings, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Bytes32(_superblockId), 
                new org.web3j.abi.datatypes.Address(_targetContract)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<List> getBlockLocator() {
        final Function function = new Function("getBlockLocator", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray9<Uint256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<BigInteger> getBestBlockHeight() {
        final Function function = new Function("getBestBlockHeight", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getBestBlockHash() {
        final Function function = new Function("getBestBlockHash", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getVersion(BigInteger _blockHash) {
        final Function function = new Function("getVersion", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_blockHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public static DogeRelay load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DogeRelay(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static DogeRelay load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DogeRelay(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class StoreHeaderEventResponse {
        public Log log;

        public byte[] blockHash;

        public BigInteger returnCode;
    }

    public static class GetHeaderEventResponse {
        public Log log;

        public byte[] blockHash;

        public BigInteger returnCode;
    }

    public static class VerifyTransactionEventResponse {
        public Log log;

        public byte[] txHash;

        public BigInteger returnCode;
    }

    public static class RelayTransactionEventResponse {
        public Log log;

        public byte[] txHash;

        public BigInteger returnCode;
    }
}
