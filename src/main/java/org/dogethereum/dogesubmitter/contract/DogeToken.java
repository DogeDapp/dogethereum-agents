package org.dogethereum.dogesubmitter.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes20;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.3.1.
 */
public class DogeToken extends Contract {
    private static final String BINARY = "0x60c0604052600460808190527f48302e310000000000000000000000000000000000000000000000000000000060a09081526200004091600691906200018e565b503480156200004e57600080fd5b5060405160608062003358833981016040818152825160208085015194830151838501845260098086527f446f6765546f6b656e0000000000000000000000000000000000000000000000838701908152855180870187529182527f444f4745544f4b454e00000000000000000000000000000000000000000000008285015233600090815260019094529483208390558280558551939695919492939192600892620000fe916003916200018e565b506004805460ff191660ff84161790558051620001239060059060208401906200018e565b505060078054600160a060020a03978816600160a060020a0319918216179091556008805460ff909616740100000000000000000000000000000000000000000260a060020a60ff021997909816959091169490941794909416949094179091555062000233915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001d157805160ff191683800117855562000201565b8280016001018555821562000201579182015b8281111562000201578251825591602001919060010190620001e4565b506200020f92915062000213565b5090565b6200023091905b808211156200020f57600081556001016200021a565b90565b61311580620002436000396000f3006080604052600436106101505763ffffffff60e060020a60003504166306fdde038114610155578063095ea7b3146101df57806318160ddd1461021757806323b872dd1461023e578063313ce567146102685780633e9745311461029357806341f7a1f7146102f05780634b48a842146103bd57806354fd4d50146103df57806355569d7f146103f45780635be3b1b91461045f578063636a851514610476578063657857de146104a45780636d440c6b1461053b57806370a082311461055d5780637b837b7a1461057e57806395d89b41146105a35780639ed00316146105b8578063a9059cbb146105d0578063b71311af146105f4578063c0f76faf14610625578063cae9ca511461063d578063d48e6a9a146106a6578063d63ceb46146107b7578063dd62ed3e146107fe578063dd8f13bb14610825578063f5b204001461083a578063f997d47f1461084f575b600080fd5b34801561016157600080fd5b5061016a6108ba565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101a457818101518382015260200161018c565b50505050905090810190601f1680156101d15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101eb57600080fd5b50610203600160a060020a0360043516602435610948565b604080519115158252519081900360200190f35b34801561022357600080fd5b5061022c6109ae565b60408051918252519081900360200190f35b34801561024a57600080fd5b50610203600160a060020a03600435811690602435166044356109b4565b34801561027457600080fd5b5061027d610a81565b6040805160ff9092168252519081900360200190f35b34801561029f57600080fd5b506102b56001606060020a031960043516610a8a565b60408051600160a060020a03909616865260208601949094528484019290925263ffffffff1660608401526080830152519081900360a00190f35b3480156102fc57600080fd5b5061030e63ffffffff60043516610ac9565b60408051600160a060020a038816815290810185905260608101849052608081018390526001606060020a0319821660a082015260c06020808301828152885192840192909252875160e084019189019080838360005b8381101561037d578181015183820152602001610365565b50505050905090810190601f1680156103aa5780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b3480156103c957600080fd5b5061022c6001606060020a031960043516610ba5565b3480156103eb57600080fd5b5061016a610bc4565b34801561040057600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261020394369492936024939284019190819084018382808284375094975050843595505050506020909101356001606060020a0319169050610c1f565b6104746001606060020a031960043516611084565b005b34801561048257600080fd5b5061048b6110e5565b6040805163ffffffff9092168252519081900360200190f35b3480156104b057600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261047494369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375094975061110a9650505050505050565b34801561054757600080fd5b506104746001606060020a031960043516611398565b34801561056957600080fd5b5061022c600160a060020a03600435166114a6565b34801561058a57600080fd5b506104746001606060020a0319600435166024356114c1565b3480156105af57600080fd5b5061016a6115e7565b3480156105c457600080fd5b50610203600435611642565b3480156105dc57600080fd5b50610203600160a060020a03600435166024356116d1565b34801561060057600080fd5b50610609611749565b60408051600160a060020a039092168252519081900360200190f35b34801561063157600080fd5b50610474600435611758565b34801561064957600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610203948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506117749650505050505050565b3480156106b257600080fd5b506106c463ffffffff6004351661190f565b60408051600160a060020a03891681529081018690526060810185905260a081018390526001606060020a0319821660c082015260e0602080830182815289519284019290925288516080840191610100850191908b019080838360005b8381101561073a578181015183820152602001610722565b50505050905090810190601f1680156107675780820380516001836020036101000a031916815260200191505b508381038252865181528651602091820191808901910280838360005b8381101561079c578181015183820152602001610784565b50505050905001995050505050505050505060405180910390f35b3480156107c357600080fd5b506107dc6001606060020a031960043516602435611a8d565b60408051938452602084019290925261ffff1682820152519081900360600190f35b34801561080a57600080fd5b5061022c600160a060020a0360043581169060243516611aef565b34801561083157600080fd5b50610609611b1a565b34801561084657600080fd5b5061022c611b29565b34801561085b57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261022c94369492936024939284019190819084018382808284375094975050843595505050506020909101356001606060020a0319169050611b2f565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156109405780601f1061091557610100808354040283529160200191610940565b820191906000526020600020905b81548152906001019060200180831161092357829003601f168201915b505050505081565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60005481565b600160a060020a03831660009081526001602052604081205482118015906109ff5750600160a060020a03841660009081526002602090815260408083203384529091529020548211155b1515610a0a57600080fd5b600160a060020a03808416600081815260016020908152604080832080548801905593881680835284832080548890039055600282528483203384528252918490208054879003905583518681529351929391926000805160206130ca8339815191529281900390910190a35060015b9392505050565b60045460ff1681565b600b6020526000908152604090208054600182015460028301546004840154600590940154600160a060020a03909316939192909163ffffffff169085565b6009602090815260009182526040918290208054600180830180548651600261010094831615949094026000190190911692909204601f8101869004860283018601909652858252600160a060020a03909216949293909290830182828015610b735780601f10610b4857610100808354040283529160200191610b73565b820191906000526020600020905b815481529060010190602001808311610b5657829003601f168201915b50505050600283015460038401546005850154600690950154939491939092506c010000000000000000000000000286565b6001606060020a0319166000908152600b602052604090206003015490565b6006805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156109405780601f1061091557610100808354040283529160200191610940565b600080606060008060006311e1a300881015610c5d576040805161eab0815290516000805160206130aa8339815191529181900360200190a1611078565b33600090815260016020526040902054881115610c9c576040805161eaba815290516000805160206130aa8339815191529181900360200190a1611078565b6001606060020a031987166000908152600b602052604090208054909550600160a060020a03161515610cf1576040805161eac4815290516000805160206130aa8339815191529181900360200190a1611078565b8785600101541015610d25576040805161eace815290516000805160206130aa8339815191529181900360200190a1611078565b6040805160c0810182528654600160a060020a031681526001870154602080830191909152600288015482840152600388018054845181840281018401909552808552610df6948d94938b936060860193909160009084015b82821015610dce5760008481526020908190206040805160608101825260038602909201805483526001808201548486015260029091015461ffff16918301919091529083529092019101610d7e565b50505090825250600482015463ffffffff166020820152600590910154604090910152611dc2565b9196509450925090508015610e2b576040805182815290516000805160206130aa8339815191529181900360200190a1611078565b33600081815260016020908152604080832080548d9003905580518c815290519293926000805160206130ca833981519152929181900390910190a360085460408051750100000000000000000000000000000000000000000090920463ffffffff1682526001606060020a03198916602083015280517fa452c19abf34fda31e59719208cf19c16be3dc9573465e8bf2ec1e4e89d3fad89281900390910190a16040805160e08101825233815260208082018c81528284018c90524260608401526080830188905260a083018790526001606060020a03198b1660c08401526008547501000000000000000000000000000000000000000000900463ffffffff16600090815260098352939093208251815473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0390911617815592518051929392610f7a9260018501920190612ebc565b50604082015160028201556060820151600382015560808201518051610faa916004840191602090910190612f3a565b5060a0820151600582015560c0909101516006909101805473ffffffffffffffffffffffffffffffffffffffff19166c0100000000000000000000000090920491909117905560018581018054848b019003905560028601805484019055845160048701805463ffffffff19811663ffffffff91821690930181169290921790556008805478ffffffff000000000000000000000000000000000000000000198116750100000000000000000000000000000000000000000091829004841685019093160291909117905595505b50505050509392505050565b6001606060020a031981166000908152600b602052604090208054600160a060020a031633146110d6576040805161ea74815290516000805160206130aa8339815191529181900360200190a16110e1565b600581018054340190555b5050565b6008547501000000000000000000000000000000000000000000900463ffffffff1681565b60008060008060008087600081518110151561112257fe5b90602001015160f860020a900460f860020a02600160f860020a031916600360f860020a0214945060218801519550600280336040516020018082600160a060020a0316600160a060020a03166c010000000000000000000000000281526014019150506040516020818303038152906040526040518082805190602001908083835b602083106111c45780518252601f1990920191602091820191016111a5565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af1158015611205573d6000803e3d6000fd5b5050506040513d602081101561121a57600080fd5b50516040805160208181019390935281518082038401815290820191829052805190928291908401908083835b602083106112665780518252601f199092019160209182019101611247565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af11580156112a7573d6000803e3d6000fd5b5050506040513d60208110156112bc57600080fd5b505193506112ca8488611f1e565b92506112d68686611ff5565b600160a060020a03848116911614611310576040805161ea6a815290516000805160206130aa8339815191529181900360200190a161138e565b61131a8686612109565b6001606060020a031981166000908152600b6020526040902080549193509150600160a060020a031615611370576040805161ea74815290516000805160206130aa8339815191529181900360200190a161138e565b805473ffffffffffffffffffffffffffffffffffffffff1916331781555b5050505050505050565b6001606060020a031981166000908152600b602052604090208054600160a060020a031633146113ea576040805161ea74815290516000805160206130aa8339815191529181900360200190a16110e1565b60018101541515806113ff5750600281015415155b8061140d5750600581015415155b1561143a576040805161ea7e815290516000805160206130aa8339815191529181900360200190a16110e1565b6001606060020a031982166000908152600b60205260408120805473ffffffffffffffffffffffffffffffffffffffff1916815560018101829055600281018290559061148a6003830182612fe5565b5060048101805463ffffffff1916905560006005909101555050565b600160a060020a031660009081526001602052604090205490565b6001606060020a031982166000908152600b602052604090208054600160a060020a03163314611513576040805161ea74815290516000805160206130aa8339815191529181900360200190a16115e2565b8181600501541015611547576040805161ea88815290516000805160206130aa8339815191529181900360200190a16115e2565b600860149054906101000a900460ff1660ff16816002015482600101540102600a548383600501540381151561157957fe5b0410156115a8576040805161ea92815290516000805160206130aa8339815191529181900360200190a16115e2565b6005810180548390039055604051339083156108fc029084906000818181858888f193505050501580156115e0573d6000803e3d6000fd5b505b505050565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156109405780601f1061091557610100808354040283529160200191610940565b600073__Set___________________________________636ce8e081600c846040518363ffffffff1660e060020a028152600401808381526020018281526020019250505060206040518083038186803b15801561169f57600080fd5b505af41580156116b3573d6000803e3d6000fd5b505050506040513d60208110156116c957600080fd5b505192915050565b336000908152600160205260408120548211156116ed57600080fd5b33600081815260016020908152604080832080548790039055600160a060020a03871680845292819020805487019055805186815290519293926000805160206130ca833981519152929181900390910190a350600192915050565b600754600160a060020a031681565b600854600160a060020a0316331461176f57600080fd5b600a55565b336000818152600260209081526040808320600160a060020a038816808552908352818420879055815187815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a383600160a060020a031660405180807f72656365697665417070726f76616c28616464726573732c75696e743235362c81526020017f616464726573732c627974657329000000000000000000000000000000000000815250602e019050604051809103902060e060020a9004338530866040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a03168152602001828051906020019080838360005b838110156118b457818101518382015260200161189c565b50505050905090810190601f1680156118e15780820380516001836020036101000a031916815260200191505b509450505050506000604051808303816000875af192505050151561190557600080fd5b5060019392505050565b63ffffffff811660009081526009602090815260408083208054600180830180548551600261010094831615949094026000190190911692909204601f8101879004870283018701909552848252600160a060020a039092169560609590948594879486948594929390928301828280156119cb5780601f106119a0576101008083540402835291602001916119cb565b820191906000526020600020905b8154815290600101906020018083116119ae57829003601f168201915b50505050509650806002015495508060030154945080600401805480602002602001604051908101604052809291908181526020018280548015611a5a57602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff1681526020019060040190602082600301049283019260010382029150808411611a1d5790505b50505060058401546006909401549a9c999b509799969891975091956c0100000000000000000000000002945092505050565b6001606060020a031982166000908152600b6020526040812060038101805483928392909183919087908110611abf57fe5b6000918252602090912060039091020180546001820154600290920154909991985061ffff169650945050505050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600854600160a060020a031681565b600a5481565b60075460009081908190819081908190819081908190600160a060020a03163314611b5957600080fd5b6001606060020a03198a166000908152600b602052604090208054909850600160a060020a03161515611bae576040805161ea9c815290516000805160206130aa8339815191529181900360200190a1611db3565b611bb88c8b6122da565b809750819850829950839a505050505073__Set___________________________________63831cb739600c8d6040518363ffffffff1660e060020a028152600401808381526020018281526020019250505060206040518083038186803b158015611c2357600080fd5b505af4158015611c37573d6000803e3d6000fd5b505050506040513d6020811015611c4d57600080fd5b50519250821515611c80576040805161eaa6815290516000805160206130aa8339815191529181900360200190a1611db3565b6040805160608101825288815260208082018e815261ffff88811694840194855260038d81018054600180820183556000928352959091209551910290940193845590518383015592516002909201805461ffff191692909316919091179091558801805488019055611cf38686612109565b91506001606060020a03198a811690831614611da357611d138686611ff5565b600160a060020a03811660008181526001602090815260409182902080548c01905581518b8152915193945091927f275a11e033325e9b28a23131fcc7e243a49bb38beb686051976dd8c8899d9a3c929181900390910190a2604080518881529051600160a060020a038316916000916000805160206130ca8339815191529181900360200190a3869850611db3565b6002880180548890039055600098505b50505050505050509392505050565b6000606060008060008060008060008960600151518a6080015163ffffffff16101515611df35761ead89850611f10565b6302faf0809650896080015193508392505b8a85108015611e1e57508960600151518363ffffffff16105b15611e5f5760608a0151805163ffffffff8516908110611e3a57fe5b60209081029091010151516305f5e10097909701969490940193600190920191611e05565b8a851015611e715761eae29850611f10565b868b11611e825761eaec9850611f10565b83830391508163ffffffff16604051908082528060200260200182016040528015611eb7578160200160208202803883390190505b509750600090505b8163ffffffff168163ffffffff161015611f0657838101888263ffffffff16815181101515611eea57fe5b63ffffffff909216602092830290910190910152600101611ebf565b600098508a850395505b505050505092959194509250565b60008060008084516041141515611f385760009350611fec565b505050602082015160218301516041840151909160001a601b60ff82161015611f5f57601b015b8060ff16601b14158015611f7757508060ff16601c14155b15611f855760009350611fec565b60408051600080825260208083018085528a905260ff8516838501526060830187905260808301869052925160019360a0808501949193601f19840193928390039091019190865af1158015611fdf573d6000803e3d6000fd5b5050506020604051035193505b50505092915050565b600080806401000003d01985860991506401000003d01985830991506401000003d01960078308915061204f827f3fffffffffffffffffffffffffffffffffffffffffffffffffffffffbfffff0c6401000003d019612489565b905060018082161484151514612068576401000003d019035b6401000003d019818209821461207d57600080fd5b848160405160200180838152602001828152602001925050506040516020818303038152906040526040518082805190602001908083835b602083106120d45780518252601f1990920191602091820191016120b5565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912098975050505050505050565b60008082612137577f0200000000000000000000000000000000000000000000000000000000000000612159565b7f03000000000000000000000000000000000000000000000000000000000000005b604080517fff0000000000000000000000000000000000000000000000000000000000000083166020808301919091526021808301899052835180840390910181526041909201928390528151939450600393600293918291908401908083835b602083106121d95780518252601f1990920191602091820191016121ba565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af115801561221a573d6000803e3d6000fd5b5050506040513d602081101561222f57600080fd5b50516040805160208181019390935281518082038401815290820191829052805190928291908401908083835b6020831061227b5780518252601f19909201916020918201910161225c565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af11580156122bc573d6000803e3d6000fd5b5050604051516c010000000000000000000000000295945050505050565b6000806000806122e8613009565b60048082526060908190819081908190612305908d9060006124d3565b88528151909650909450612331908d908690600090811061232257fe5b906020019060200201516125dc565b151560a08801526080870152855161234c908d90600261260b565b89528151909550909350909150612394908d908490600090811061236c57fe5b9060200190602002015185600081518110151561238557fe5b90602001906020020151612769565b6001606060020a03191660208701528051819060009081106123b257fe5b60209081029091018101516040880152600060608801528601516001606060020a0319908116908c16146124415761240c8c8360018151811015156123f357fe5b9060200190602002015185600181518110151561238557fe5b6001606060020a031916602087015280518190600190811061242a57fe5b602090810290910101516040870152600160608701525b60208601516001606060020a03198c811691161461245e57600080fd5b856040015186608001518760a001518860600151995099509950995050505050505092959194509250565b600060405160208152602080820152602060408201528460608201528360808201528260a082015260208160c08360006005600019f115156124ca57600080fd5b51949350505050565b60608060008060008060608060006124eb8c8c612794565b9b5095508915806124fb5750858a115b156125085785945061250c565b8994505b84604051908082528060200260200182016040528015612536578160200160208202803883390190505b50925084604051908082528060200260200182016040528015612563578160200160208202803883390190505b509150600090505b848110156125cc578a838281518110151561258257fe5b6020908102909101015260249a909a019961259d8c8c612794565b8351909c5090945084908390839081106125b357fe5b602090810290910101529983016004019960010161256b565b50909a9099509650505050505050565b60240160008080806125ee8686612794565b95506125fc90508686612856565b50909890975095505050505050565b6060806060600080600080606080606060006126278e8e612794565b9d5096508b15806126375750868c115b1561264457869550612648565b8b95505b85604051908082528060200260200182016040528015612672578160200160208202803883390190505b5093508560405190808252806020026020018201604052801561269f578160200160208202803883390190505b509250856040519080825280602002602001820160405280156126cc578160200160208202803883390190505b509150600090505b85811015612757576126e88e8e604061288d565b82828151811015156126f657fe5b6020908102909101015260089c909c019b6127118e8e612794565b8551909e509095508d9085908390811061272757fe5b602090810290910101528251859084908390811061274157fe5b602090810290910101529b84019b6001016126d4565b509c919b509998509650505050505050565b6000612776848484612bae565b1561278f576127888484600301612cf4565b9050610a7a565b610a7a565b600080600084848151811015156127a757fe5b90602001015160f860020a900460f860020a0260f860020a9004905060018401935060fd8160ff1610156127e35760ff8116925083915061284e565b8060ff1660fd1415612808576127fb8585601061288d565b846002019250925061284e565b8060ff1660fe141561282d576128208585602061288d565b846004019250925061284e565b8060ff1660ff141561284e576128458585604061288d565b84600801925092505b509250929050565b60606000806000606060008061286c8989612d69565b9850925061287a8989612dea565b949b919a50985092965091945050505050565b600081600814156128ca5783838151811015156128a657fe5b90602001015160f860020a900460f860020a0260f860020a900460ff169050610a7a565b81601014156129365783836001018151811015156128e457fe5b90602001015160f860020a900460f860020a0260f860020a900461010002848481518110151561291057fe5b90602001015160f860020a900460f860020a0260f860020a90040161ffff169050610a7a565b8160201415612a0757838360030181518110151561295057fe5b90602001015160f860020a900460f860020a0260f860020a9004630100000002848460020181518110151561298157fe5b90602001015160f860020a900460f860020a0260f860020a9004620100000285856001018151811015156129b157fe5b90602001015160f860020a900460f860020a0260f860020a90046101000286868151811015156129dd57fe5b90602001015160f860020a900460f860020a0260f860020a900401010163ffffffff169050610a7a565b8160401415610a7a578383600701815181101515612a2157fe5b90602001015160f860020a900460f860020a0260f860020a9004670100000000000000028484600601815181101515612a5657fe5b90602001015160f860020a900460f860020a0260f860020a90046601000000000000028585600501815181101515612a8a57fe5b90602001015160f860020a900460f860020a0260f860020a900465010000000000028686600401815181101515612abd57fe5b90602001015160f860020a900460f860020a0260f860020a9004640100000000028787600301815181101515612aef57fe5b90602001015160f860020a900460f860020a0260f860020a90046301000000028888600201815181101515612b2057fe5b90602001015160f860020a900460f860020a0260f860020a900462010000028989600101815181101515612b5057fe5b90602001015160f860020a900460f860020a0260f860020a9004610100028a8a815181101515612b7c57fe5b90602001015160f860020a900460f860020a0260f860020a90040101010101010167ffffffffffffffff169050610a7a565b6000816019148015612bf057508383815181101515612bc957fe5b90602001015160f860020a900460f860020a02600160f860020a031916607660f860020a02145b8015612c2f57508383600101815181101515612c0857fe5b90602001015160f860020a900460f860020a02600160f860020a03191660a960f860020a02145b8015612c6e57508383600201815181101515612c4757fe5b90602001015160f860020a900460f860020a02600160f860020a031916601460f860020a02145b8015612cad57508383601701815181101515612c8657fe5b90602001015160f860020a900460f860020a02600160f860020a031916608860f860020a02145b8015612cec57508383601801815181101515612cc557fe5b90602001015160f860020a900460f860020a02600160f860020a03191660ac60f860020a02145b949350505050565b600080805b6014811015612d52578060130360080285858301815181101515612d1957fe5b90602001015160f860020a900460f860020a0260f860020a9004600160a060020a03169060020a02820191508080600101915050612cf9565b506c01000000000000000000000000029392505050565b60606000806060612d7a8686612e8c565b95509150600960ff831610801590612d96575060498260ff1611155b1515612da157600080fd5b8585815181101515612daf57fe5b90602001015160f860020a900460f860020a0260f860020a900460ff166030141515612dda57600080fd5b9560ff9091169390930193505050565b600080600080600080612dfd8888612e8c565b97509250602160ff841614612e1157600080fd5b8787815181101515612e1f57fe5b6020910101519787016021908101519960f860020a998a90049099027fff00000000000000000000000000000000000000000000000000000000000000167f0300000000000000000000000000000000000000000000000000000000000000149897019695505050505050565b6000808383815181101515612e9d57fe5b016020015160f860020a90819004810204915050600182019250929050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612efd57805160ff1916838001178555612f2a565b82800160010185558215612f2a579182015b82811115612f2a578251825591602001919060010190612f0f565b50612f3692915061303e565b5090565b82805482825590600052602060002090600701600890048101928215612fd95791602002820160005b83821115612fa757835183826101000a81548163ffffffff021916908363ffffffff1602179055509260200192600401602081600301049283019260010302612f63565b8015612fd75782816101000a81549063ffffffff0219169055600401602081600301049283019260010302612fa7565b505b50612f3692915061305b565b5080546000825560030290600052602060002090810190613006919061307c565b50565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b61305891905b80821115612f365760008155600101613044565b90565b61305891905b80821115612f3657805463ffffffff19168155600101613061565b61305891905b80821115612f36576000808255600182015560028101805461ffff191690556003016130825600b56073699a886ff0a9e8b995881e51b5ccd562594c835e990ad2f7c35957a5a4ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058206aa8b6cafee2d31aa382dd4f2c9d36c6479d0ceeb0ccac9ab0a600e579a4e9210029";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<>();
        _addresses.put("1528817613108", "0xc932fb408b5dabecf00be8deacb254076fc53592");
    }

    protected DogeToken(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DogeToken(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<ErrorDogeTokenEventResponse> getErrorDogeTokenEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("ErrorDogeToken", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<ErrorDogeTokenEventResponse> responses = new ArrayList<ErrorDogeTokenEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ErrorDogeTokenEventResponse typedResponse = new ErrorDogeTokenEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.err = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ErrorDogeTokenEventResponse> errorDogeTokenEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("ErrorDogeToken", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ErrorDogeTokenEventResponse>() {
            @Override
            public ErrorDogeTokenEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                ErrorDogeTokenEventResponse typedResponse = new ErrorDogeTokenEventResponse();
                typedResponse.log = log;
                typedResponse.err = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<NewTokenEventResponse> getNewTokenEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("NewToken", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<NewTokenEventResponse> responses = new ArrayList<NewTokenEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewTokenEventResponse typedResponse = new NewTokenEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewTokenEventResponse> newTokenEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("NewToken", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewTokenEventResponse>() {
            @Override
            public NewTokenEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                NewTokenEventResponse typedResponse = new NewTokenEventResponse();
                typedResponse.log = log;
                typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<UnlockRequestEventResponse> getUnlockRequestEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("UnlockRequest", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}, new TypeReference<Bytes20>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<UnlockRequestEventResponse> responses = new ArrayList<UnlockRequestEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnlockRequestEventResponse typedResponse = new UnlockRequestEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.operatorPublicKeyHash = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<UnlockRequestEventResponse> unlockRequestEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("UnlockRequest", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}, new TypeReference<Bytes20>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, UnlockRequestEventResponse>() {
            @Override
            public UnlockRequestEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                UnlockRequestEventResponse typedResponse = new UnlockRequestEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.operatorPublicKeyHash = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Transfer", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TransferEventResponse> transferEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Transfer", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Approval", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ApprovalEventResponse> approvalEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Approval", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._spender = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<String> name() {
        final Function function = new Function("name", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> approve(String _spender, BigInteger _value) {
        final Function function = new Function(
                "approve", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_spender), 
                new org.web3j.abi.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> totalSupply() {
        final Function function = new Function("totalSupply", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> transferFrom(String _from, String _to, BigInteger _value) {
        final Function function = new Function(
                "transferFrom", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_from), 
                new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> decimals() {
        final Function function = new Function("decimals", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple5<String, BigInteger, BigInteger, BigInteger, BigInteger>> operators(byte[] param0) {
        final Function function = new Function("operators", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes20(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple5<String, BigInteger, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple5<String, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple5<String, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<Tuple6<String, String, BigInteger, BigInteger, BigInteger, byte[]>> unlocksPendingInvestorProof(BigInteger param0) {
        final Function function = new Function("unlocksPendingInvestorProof", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes20>() {}));
        return new RemoteCall<Tuple6<String, String, BigInteger, BigInteger, BigInteger, byte[]>>(
                new Callable<Tuple6<String, String, BigInteger, BigInteger, BigInteger, byte[]>>() {
                    @Override
                    public Tuple6<String, String, BigInteger, BigInteger, BigInteger, byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, String, BigInteger, BigInteger, BigInteger, byte[]>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (byte[]) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<String> version() {
        final Function function = new Function("version", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> unlockIdx() {
        final Function function = new Function("unlockIdx", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> balanceOf(String _owner) {
        final Function function = new Function("balanceOf", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> symbol() {
        final Function function = new Function("symbol", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> transfer(String _to, BigInteger _value) {
        final Function function = new Function(
                "transfer", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> trustedDogeRelay() {
        final Function function = new Function("trustedDogeRelay", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> approveAndCall(String _spender, BigInteger _value, byte[] _extraData) {
        final Function function = new Function(
                "approveAndCall", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_spender), 
                new org.web3j.abi.datatypes.generated.Uint256(_value), 
                new org.web3j.abi.datatypes.DynamicBytes(_extraData)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> allowance(String _owner, String _spender) {
        final Function function = new Function("allowance", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner), 
                new org.web3j.abi.datatypes.Address(_spender)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> trustedDogeEthPriceOracle() {
        final Function function = new Function("trustedDogeEthPriceOracle", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> dogeEthPrice() {
        final Function function = new Function("dogeEthPrice", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public static RemoteCall<DogeToken> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _trustedDogeRelay, String _trustedDogeEthPriceOracle, BigInteger _collateralRatio) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_trustedDogeRelay), 
                new org.web3j.abi.datatypes.Address(_trustedDogeEthPriceOracle), 
                new org.web3j.abi.datatypes.generated.Uint8(_collateralRatio)));
        return deployRemoteCall(DogeToken.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<DogeToken> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _trustedDogeRelay, String _trustedDogeEthPriceOracle, BigInteger _collateralRatio) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_trustedDogeRelay), 
                new org.web3j.abi.datatypes.Address(_trustedDogeEthPriceOracle), 
                new org.web3j.abi.datatypes.generated.Uint8(_collateralRatio)));
        return deployRemoteCall(DogeToken.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public RemoteCall<TransactionReceipt> addOperator(byte[] operatorPublicKey, byte[] signature) {
        final Function function = new Function(
                "addOperator", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(operatorPublicKey), 
                new org.web3j.abi.datatypes.DynamicBytes(signature)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> deleteOperator(byte[] operatorPublicKeyHash) {
        final Function function = new Function(
                "deleteOperator", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes20(operatorPublicKeyHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addOperatorDeposit(byte[] operatorPublicKeyHash, BigInteger weiValue) {
        final Function function = new Function(
                "addOperatorDeposit", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes20(operatorPublicKeyHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> withdrawOperatorDeposit(byte[] operatorPublicKeyHash, BigInteger value) {
        final Function function = new Function(
                "withdrawOperatorDeposit", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes20(operatorPublicKeyHash), 
                new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> processTransaction(byte[] dogeTx, BigInteger txHash, byte[] operatorPublicKeyHash) {
        final Function function = new Function(
                "processTransaction", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(dogeTx), 
                new org.web3j.abi.datatypes.generated.Uint256(txHash), 
                new org.web3j.abi.datatypes.generated.Bytes20(operatorPublicKeyHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> wasDogeTxProcessed(BigInteger txHash) {
        final Function function = new Function("wasDogeTxProcessed", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(txHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> doUnlock(String dogeAddress, BigInteger value, byte[] operatorPublicKeyHash) {
        final Function function = new Function(
                "doUnlock", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(dogeAddress), 
                new org.web3j.abi.datatypes.generated.Uint256(value), 
                new org.web3j.abi.datatypes.generated.Bytes20(operatorPublicKeyHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setDogeEthPrice(BigInteger _dogeEthPrice) {
        final Function function = new Function(
                "setDogeEthPrice", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_dogeEthPrice)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple7<String, String, BigInteger, BigInteger, List<BigInteger>, BigInteger, byte[]>> getUnlockPendingInvestorProof(BigInteger index) {
        final Function function = new Function("getUnlockPendingInvestorProof", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint32(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Uint32>>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes20>() {}));
        return new RemoteCall<Tuple7<String, String, BigInteger, BigInteger, List<BigInteger>, BigInteger, byte[]>>(
                new Callable<Tuple7<String, String, BigInteger, BigInteger, List<BigInteger>, BigInteger, byte[]>>() {
                    @Override
                    public Tuple7<String, String, BigInteger, BigInteger, List<BigInteger>, BigInteger, byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, String, BigInteger, BigInteger, List<BigInteger>, BigInteger, byte[]>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                convertToNative((List<Uint32>) results.get(4).getValue()), 
                                (BigInteger) results.get(5).getValue(), 
                                (byte[]) results.get(6).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> getUtxosLength(byte[] operatorPublicKeyHash) {
        final Function function = new Function("getUtxosLength", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes20(operatorPublicKeyHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple3<BigInteger, BigInteger, BigInteger>> getUtxo(byte[] operatorPublicKeyHash, BigInteger i) {
        final Function function = new Function("getUtxo", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes20(operatorPublicKeyHash), 
                new org.web3j.abi.datatypes.generated.Uint256(i)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint16>() {}));
        return new RemoteCall<Tuple3<BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple3<BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public static DogeToken load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DogeToken(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static DogeToken load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DogeToken(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class ErrorDogeTokenEventResponse {
        public Log log;

        public BigInteger err;
    }

    public static class NewTokenEventResponse {
        public Log log;

        public String user;

        public BigInteger value;
    }

    public static class UnlockRequestEventResponse {
        public Log log;

        public BigInteger id;

        public byte[] operatorPublicKeyHash;
    }

    public static class TransferEventResponse {
        public Log log;

        public String _from;

        public String _to;

        public BigInteger _value;
    }

    public static class ApprovalEventResponse {
        public Log log;

        public String _owner;

        public String _spender;

        public BigInteger _value;
    }
}
