package org.dogethereum.dogesubmitter.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes20;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.3.1.
 */
public class DogeToken extends Contract {
    private static final String BINARY = "0x60806040526040805190810160405280600481526020017f48302e3100000000000000000000000000000000000000000000000000000000815250600690805190602001906200005192919062000274565b503480156200005f57600080fd5b506040516060806200400d83398101806040528101908080519060200190929190805190602001909291908051906020019092919050505060006040805190810160405280600981526020017f446f6765546f6b656e000000000000000000000000000000000000000000000081525060086040805190810160405280600981526020017f444f4745544f4b454e000000000000000000000000000000000000000000000081525083600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508360008190555082600390805190602001906200016a92919062000274565b5081600460006101000a81548160ff021916908360ff16021790555080600590805190602001906200019e92919062000274565b505050505082600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff02191690836c01000000000000000000000000900402179055506305f5e100600a8190555050505062000323565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002b757805160ff1916838001178555620002e8565b82800160010185558215620002e8579182015b82811115620002e7578251825591602001919060010190620002ca565b5b509050620002f79190620002fb565b5090565b6200032091905b808211156200031c57600081600090555060010162000302565b5090565b90565b613cda80620003336000396000f300608060405260043610610154576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610159578063095ea7b3146101e957806318160ddd1461024e5780631c0b6367146102795780631f6963791461030057806323b872dd1461038b5780632aa5773314610410578063313ce5671461045557806341f7a1f71461048657806354fd4d501461057a578063636a85151461060a5780636efaae441461064157806370a082311461066c57806381591387146106c357806395d89b411461071a57806396553226146107aa578063a9059cbb146107e1578063b71311af14610846578063bae1222d1461089d578063beba5709146108c8578063c0f76faf14610911578063cae9ca511461093e578063d48e6a9a146109e9578063dd62ed3e14610b25578063dd8f13bb14610b9c578063f5b2040014610bf3575b600080fd5b34801561016557600080fd5b5061016e610c1e565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101ae578082015181840152602081019050610193565b50505050905090810190601f1680156101db5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101f557600080fd5b50610234600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610cbc565b604051808215151515815260200191505060405180910390f35b34801561025a57600080fd5b50610263610dae565b6040518082815260200191505060405180910390f35b34801561028557600080fd5b506102ea600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190505050610db4565b6040518082815260200191505060405180910390f35b34801561030c57600080fd5b50610371600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190505050611098565b604051808215151515815260200191505060405180910390f35b34801561039757600080fd5b506103f6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611404565b604051808215151515815260200191505060405180910390f35b34801561041c57600080fd5b5061043b60048036038101908080359060200190929190505050611670565b604051808215151515815260200191505060405180910390f35b34801561046157600080fd5b5061046a611728565b604051808260ff1660ff16815260200191505060405180910390f35b34801561049257600080fd5b506104b7600480360381019080803563ffffffff16906020019092919050505061173b565b604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001858152602001848152602001838152602001828103825286818151815260200191508051906020019080838360005b8381101561053b578082015181840152602081019050610520565b50505050905090810190601f1680156105685780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b34801561058657600080fd5b5061058f611829565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105cf5780820151818401526020810190506105b4565b50505050905090810190601f1680156105fc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561061657600080fd5b5061061f6118c7565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b34801561064d57600080fd5b506106566118dd565b6040518082815260200191505060405180910390f35b34801561067857600080fd5b506106ad600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506118ea565b6040518082815260200191505060405180910390f35b3480156106cf57600080fd5b506106ee60048036038101908080359060200190929190505050611933565b604051808481526020018381526020018261ffff1661ffff168152602001935050505060405180910390f35b34801561072657600080fd5b5061072f61197a565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561076f578082015181840152602081019050610754565b50505050905090810190601f16801561079c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156107b657600080fd5b506107bf611a18565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b3480156107ed57600080fd5b5061082c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611a2e565b604051808215151515815260200191505060405180910390f35b34801561085257600080fd5b5061085b611b87565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156108a957600080fd5b506108b2611bad565b6040518082815260200191505060405180910390f35b3480156108d457600080fd5b506108dd611bb3565b60405180826bffffffffffffffffffffffff19166bffffffffffffffffffffffff1916815260200191505060405180910390f35b34801561091d57600080fd5b5061093c60048036038101908080359060200190929190505050611bd2565b005b34801561094a57600080fd5b506109cf600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611c38565b604051808215151515815260200191505060405180910390f35b3480156109f557600080fd5b50610a1a600480360381019080803563ffffffff169060200190929190505050611ed5565b604051808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200186815260200185815260200180602001848152602001838103835288818151815260200191508051906020019080838360005b83811015610aa2578082015181840152602081019050610a87565b50505050905090810190601f168015610acf5780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019060200280838360005b83811015610b0b578082015181840152602081019050610af0565b505050509050019850505050505050505060405180910390f35b348015610b3157600080fd5b50610b86600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612068565b6040518082815260200191505060405180910390f35b348015610ba857600080fd5b50610bb16120ef565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610bff57600080fd5b50610c08612115565b6040518082815260200191505060405180910390f35b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610cb45780601f10610c8957610100808354040283529160200191610cb4565b820191906000526020600020905b815481529060010190602001808311610c9757829003601f168201915b505050505081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b600080600080600080600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e1957600080fd5b610e3e88600860009054906101000a90046c010000000000000000000000000261211b565b8095508196508297508398505050505073__Set___________________________________63831cb7396009896040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018281526020019250505060206040518083038186803b158015610ec257600080fd5b505af4158015610ed6573d6000803e3d6000fd5b505050506040513d6020811015610eec57600080fd5b81019080805190602001909291905050501515610f0857600080fd5b600b6060604051908101604052808781526020018981526020018461ffff1681525090806001815401808255809150509060018203906000526020600020906003020160009091929091909150600082015181600001556020820151816001015560408201518160020160006101000a81548161ffff021916908361ffff160217905550505050610f9d84600190048461237f565b905084600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508073ffffffffffffffffffffffffffffffffffffffff167f275a11e033325e9b28a23131fcc7e243a49bb38beb686051976dd8c8899d9a3c866040518082815260200191505060405180910390a28073ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef876040518082815260200191505060405180910390a3849550505050505092915050565b6000606060006311e1a30084101515156110b157600080fd5b83600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156110ff57600080fd5b83600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506111558461250c565b809250819350505060003373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a3600c600481819054906101000a900463ffffffff1660010191906101000a81548163ffffffff021916908363ffffffff1602179055507fddcd10798af76f629622a686d0ac7eca8c7ffece9d6d8d2f0b82b88fc6331570600c60049054906101000a900463ffffffff16338787604051808563ffffffff1663ffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b838110156112a4578082015181840152602081019050611289565b50505050905090810190601f1680156112d15780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a160c0604051908101604052803373ffffffffffffffffffffffffffffffffffffffff16815260200186815260200185815260200142815260200183815260200182815250600d6000600c60049054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190805190602001906113b9929190613ad7565b50604082015181600201556060820151816003015560808201518160040190805190602001906113ea929190613b57565b5060a0820151816005015590505060019250505092915050565b600081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156114d1575081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b15156114dc57600080fd5b81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600073__Set___________________________________636ce8e0816009846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018281526020019250505060206040518083038186803b1580156116e657600080fd5b505af41580156116fa573d6000803e3d6000fd5b505050506040513d602081101561171057600080fd5b81019080805190602001909291905050509050919050565b600460009054906101000a900460ff1681565b600d6020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561180d5780601f106117e25761010080835404028352916020019161180d565b820191906000526020600020905b8154815290600101906020018083116117f057829003601f168201915b5050505050908060020154908060030154908060050154905085565b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118bf5780601f10611894576101008083540402835291602001916118bf565b820191906000526020600020905b8154815290600101906020018083116118a257829003601f168201915b505050505081565b600c60049054906101000a900463ffffffff1681565b6000600b80549050905090565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600b8181548110151561194257fe5b90600052602060002090600302016000915090508060000154908060010154908060020160009054906101000a900461ffff16905083565b60058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a105780601f106119e557610100808354040283529160200191611a10565b820191906000526020600020905b8154815290600101906020018083116119f357829003601f168201915b505050505081565b600c60009054906101000a900463ffffffff1681565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515611a7e57600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a5481565b600860009054906101000a90046c010000000000000000000000000281565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c2e57600080fd5b80600f8190555050565b600082600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a38373ffffffffffffffffffffffffffffffffffffffff1660405180807f72656365697665417070726f76616c28616464726573732c75696e743235362c81526020017f616464726573732c627974657329000000000000000000000000000000000000815250602e01905060405180910390207c01000000000000000000000000000000000000000000000000000000009004338530866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828051906020019080838360005b83811015611e79578082015181840152602081019050611e5e565b50505050905090810190601f168015611ea65780820380516001836020036101000a031916815260200191505b509450505050506000604051808303816000875af1925050501515611eca57600080fd5b600190509392505050565b600060606000806060600080600d60008963ffffffff1663ffffffff16815260200190815260200160002090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169650806001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611fc15780601f10611f9657610100808354040283529160200191611fc1565b820191906000526020600020905b815481529060010190602001808311611fa457829003601f168201915b5050505050955080600201549450806003015493508060040180548060200260200160405190810160405280929190818152602001828054801561205057602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116120135790505b50505050509250806005015491505091939550919395565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600f5481565b600080600080612129613c07565b6060806060806060600486600001818152505061214c8c876000015160006126f0565b886000018181525081975082965050505061217f8c85600081518110151561217057fe5b9060200190602002015161281f565b876080018860a001821515151581525082600019166000191681525050506121ad8c87600001516002612864565b8960000181815250819650829550839450505050506121fd8c8360008151811015156121d557fe5b906020019060200201518560008151811015156121ee57fe5b906020019060200201516129f2565b86602001906bffffffffffffffffffffffff191690816bffffffffffffffffffffffff19168152505080600081518110151561223557fe5b906020019060200201518660400181815250506000866060019061ffff16908161ffff16815250508a6bffffffffffffffffffffffff191686602001516bffffffffffffffffffffffff1916141515612324576122c38c83600181518110151561229b57fe5b906020019060200201518560018151811015156122b457fe5b906020019060200201516129f2565b86602001906bffffffffffffffffffffffff191690816bffffffffffffffffffffffff1916815250508060018151811015156122fb57fe5b906020019060200201518660400181815250506001866060019061ffff16908161ffff16815250505b8a6bffffffffffffffffffffffff191686602001516bffffffffffffffffffffffff191614151561235457600080fd5b856040015186608001518760a001518860600151995099509950995050505050505092959194509250565b60008060007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8015156123ae57fe5b85860991507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8015156123dd57fe5b85830991507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f80151561240c57fe5b60078308915061246c82600460017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f0181151561244557fe5b047ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f612a20565b905083151560018083161415151415156124a657807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f0390505b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8015156124d057fe5b818209821415156124e057600080fd5b848160405180838152602001828152602001925050506040518091039020600190049250505092915050565b6060600080600080600080600b80549050600c60009054906101000a900463ffffffff1663ffffffff1610151561254257600080fd5b6302faf0809550600c60009054906101000a900463ffffffff1693505b878510801561258a5750600b80549050600c60009054906101000a900463ffffffff1663ffffffff16105b1561262a57600b600c60009054906101000a900463ffffffff1663ffffffff168154811015156125b657fe5b906000526020600020906003020160000154850194506305f5e10086019550600c60009054906101000a900463ffffffff169250600c600081819054906101000a900463ffffffff168092919060010191906101000a81548163ffffffff021916908363ffffffff1602179055505061255f565b87851015151561263957600080fd5b858811151561264757600080fd5b60018484030191508163ffffffff166040519080825280602002602001820160405280156126845781602001602082028038833980820191505090505b509650600090505b8163ffffffff168163ffffffff1610156126e057838101878263ffffffff168151811015156126b757fe5b9060200190602002019063ffffffff16908163ffffffff1681525050808060010191505061268c565b8686965096505050505050915091565b60608060008060008060608060006127088c8c612a6d565b809c50819750505060008a148061271e5750858a115b1561272b5785945061272f565b8994505b8460405190808252806020026020018201604052801561275e5781602001602082028038833980820191505090505b509250846040519080825280602002602001820160405280156127905781602001602082028038833980820191505090505b509150600090505b84811015612807578a83828151811015156127af57fe5b906020019060200201818152505060248b019a506127cd8c8c612a6d565b809c5081955050508382828151811015156127e457fe5b9060200190602002018181525050600484018b019a508080600101915050612798565b82828c98509850985050505050505093509350939050565b6000806000806024850194506128358686612a6d565b9050809550506128458686612b8b565b9091925080975081935082945050505081819350935050509250929050565b6060806060600080600080606080606060006128808e8e612a6d565b809e50819850505060008c14806128965750868c115b156128a3578695506128a7565b8b95505b856040519080825280602002602001820160405280156128d65781602001602082028038833980820191505090505b509350856040519080825280602002602001820160405280156129085781602001602082028038833980820191505090505b5092508560405190808252806020026020018201604052801561293a5781602001602082028038833980820191505090505b509150600090505b858110156129d6576129568e8e6040612bd7565b828281518110151561296457fe5b906020019060200201818152505060088d019c506129828e8e612a6d565b809e5081965050508c848281518110151561299957fe5b90602001906020020181815250508483828151811015156129b657fe5b9060200190602002018181525050848d019c508080600101915050612942565b8184848f9a509a509a509a505050505050505093509350935093565b60006129ff8484846133ec565b15612a1857612a11846003850161374f565b9050612a19565b5b9392505050565b600060405160208152602080820152602060408201528460608201528360808201528260a082015260208160c08360006005600019f11515612a6157600080fd5b80519150509392505050565b60008060008484815181101515612a8057fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004905060018401935060fd8160ff161015612b135780848160ff16915092509250612b83565b60fd8160ff161415612b3857612b2b85856010612bd7565b6002850192509250612b83565b60fe8160ff161415612b5d57612b5085856020612bd7565b6004850192509250612b83565b60ff8160ff161415612b8257612b7585856040612bd7565b6008850192509250612b83565b5b509250929050565b606060008060006060600080612ba18989613872565b8099508194505050612bb38989613952565b809a508193508294505050508282828a965096509650965050505092959194509250565b60006008821415612c68578383815181101515612bf057fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900460ff1690506133e5565b6010821415612d7c576101008460018501815181101515612c8557fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004028484815181101515612d0257fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090040161ffff1690506133e5565b6020821415612f9d5763010000008460038501815181101515612d9b57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900402620100008560028601815181101515612e1f57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004026101008660018701815181101515612ea257fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004028686815181101515612f1f57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900401010163ffffffff1690506133e5565b60408214156133e4576701000000000000008460078501815181101515612fc057fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004026601000000000000856006860181518110151561304857fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004026501000000000086600587018151811015156130cf57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900402640100000000876004880181518110151561315557fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900402630100000088600389018151811015156131da57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900402620100008960028a0181518110151561325e57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004026101008a60018b018151811015156132e157fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004028a8a81518110151561335e57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090040101010101010167ffffffffffffffff1690506133e5565b5b9392505050565b600060198214801561349a575060767f010000000000000000000000000000000000000000000000000000000000000002848481518110151561342b57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8015613545575060a97f01000000000000000000000000000000000000000000000000000000000000000284600185018151811015156134d657fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80156135f0575060147f010000000000000000000000000000000000000000000000000000000000000002846002850181518110151561358157fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b801561369b575060887f010000000000000000000000000000000000000000000000000000000000000002846017850181518110151561362c57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8015613746575060ac7f01000000000000000000000000000000000000000000000000000000000000000284601885018151811015156136d757fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b90509392505050565b6000806000809150600090505b60148173ffffffffffffffffffffffffffffffffffffffff161015613858578060130360080273ffffffffffffffffffffffffffffffffffffffff1685858373ffffffffffffffffffffffffffffffffffffffff16018151811015156137be57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900473ffffffffffffffffffffffffffffffffffffffff169060020a0282019150808060010191505061375c565b816c01000000000000000000000000029250505092915050565b606060008060606138838686613a49565b809650819350505060098260ff16101580156138a3575060498260ff1611155b15156138ae57600080fd5b603086868151811015156138be57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900460ff1614151561393b57600080fd5b8160ff168501945080859350935050509250929050565b6000806000806000806139658888613a49565b809850819450505060218360ff1614151561397f57600080fd5b60037f01000000000000000000000000000000000000000000000000000000000000000288888151811015156139b157fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161490506001870196508660208901015191506020870196508181889550955095505050509250925092565b6000808383815181101515613a5a57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900460018401915091509250929050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613b1857805160ff1916838001178555613b46565b82800160010185558215613b46579182015b82811115613b45578251825591602001919060010190613b2a565b5b509050613b539190613c56565b5090565b82805482825590600052602060002090600701600890048101928215613bf65791602002820160005b83821115613bc457835183826101000a81548163ffffffff021916908363ffffffff1602179055509260200192600401602081600301049283019260010302613b80565b8015613bf45782816101000a81549063ffffffff0219169055600401602081600301049283019260010302613bc4565b505b509050613c039190613c7b565b5090565b60c0604051908101604052806000815260200160006bffffffffffffffffffffffff1916815260200160008152602001600061ffff168152602001600080191681526020016000151581525090565b613c7891905b80821115613c74576000816000905550600101613c5c565b5090565b90565b613cab91905b80821115613ca757600081816101000a81549063ffffffff021916905550600101613c81565b5090565b905600a165627a7a723058207f0468053495bf87963d4fadde107fa1b523845ac981e3f9e27603c76a2715420029";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<>();
        _addresses.put("1525278125684", "0x9e93dd96ea9e819c50703ae2d27f987d3a1b9d26");
    }

    protected DogeToken(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DogeToken(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<NewTokenEventResponse> getNewTokenEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("NewToken", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<NewTokenEventResponse> responses = new ArrayList<NewTokenEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewTokenEventResponse typedResponse = new NewTokenEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewTokenEventResponse> newTokenEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("NewToken", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewTokenEventResponse>() {
            @Override
            public NewTokenEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                NewTokenEventResponse typedResponse = new NewTokenEventResponse();
                typedResponse.log = log;
                typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<UnlockRequestEventResponse> getUnlockRequestEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("UnlockRequest", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<UnlockRequestEventResponse> responses = new ArrayList<UnlockRequestEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnlockRequestEventResponse typedResponse = new UnlockRequestEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.dogeAddress = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<UnlockRequestEventResponse> unlockRequestEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("UnlockRequest", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, UnlockRequestEventResponse>() {
            @Override
            public UnlockRequestEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                UnlockRequestEventResponse typedResponse = new UnlockRequestEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.from = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.dogeAddress = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Transfer", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TransferEventResponse> transferEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Transfer", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Approval", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ApprovalEventResponse> approvalEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Approval", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._spender = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<String> name() {
        final Function function = new Function("name", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> approve(String _spender, BigInteger _value) {
        final Function function = new Function(
                "approve", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_spender), 
                new org.web3j.abi.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> totalSupply() {
        final Function function = new Function("totalSupply", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> transferFrom(String _from, String _to, BigInteger _value) {
        final Function function = new Function(
                "transferFrom", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_from), 
                new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> decimals() {
        final Function function = new Function("decimals", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple5<String, String, BigInteger, BigInteger, BigInteger>> unlocksPendingInvestorProof(BigInteger param0) {
        final Function function = new Function("unlocksPendingInvestorProof", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple5<String, String, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple5<String, String, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple5<String, String, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, BigInteger, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<String> version() {
        final Function function = new Function("version", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> unlockIdx() {
        final Function function = new Function("unlockIdx", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> balanceOf(String _owner) {
        final Function function = new Function("balanceOf", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple3<BigInteger, BigInteger, BigInteger>> utxos(BigInteger param0) {
        final Function function = new Function("utxos", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint16>() {}));
        return new RemoteCall<Tuple3<BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple3<BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<String> symbol() {
        final Function function = new Function("symbol", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> nextUnspentUtxoIndex() {
        final Function function = new Function("nextUnspentUtxoIndex", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> transfer(String _to, BigInteger _value) {
        final Function function = new Function(
                "transfer", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> trustedDogeRelay() {
        final Function function = new Function("trustedDogeRelay", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> minimumLockTxValue() {
        final Function function = new Function("minimumLockTxValue", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<byte[]> operatorPublicKeyHash() {
        final Function function = new Function("operatorPublicKeyHash", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes20>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<TransactionReceipt> approveAndCall(String _spender, BigInteger _value, byte[] _extraData) {
        final Function function = new Function(
                "approveAndCall", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_spender), 
                new org.web3j.abi.datatypes.generated.Uint256(_value), 
                new org.web3j.abi.datatypes.DynamicBytes(_extraData)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> allowance(String _owner, String _spender) {
        final Function function = new Function("allowance", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner), 
                new org.web3j.abi.datatypes.Address(_spender)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> trustedDogeEthPriceOracle() {
        final Function function = new Function("trustedDogeEthPriceOracle", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> dogeEthPrice() {
        final Function function = new Function("dogeEthPrice", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public static RemoteCall<DogeToken> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _trustedDogeRelay, String _trustedDogeEthPriceOracle, byte[] _operatorPublicKeyHash) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_trustedDogeRelay), 
                new org.web3j.abi.datatypes.Address(_trustedDogeEthPriceOracle), 
                new org.web3j.abi.datatypes.generated.Bytes20(_operatorPublicKeyHash)));
        return deployRemoteCall(DogeToken.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<DogeToken> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _trustedDogeRelay, String _trustedDogeEthPriceOracle, byte[] _operatorPublicKeyHash) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_trustedDogeRelay), 
                new org.web3j.abi.datatypes.Address(_trustedDogeEthPriceOracle), 
                new org.web3j.abi.datatypes.generated.Bytes20(_operatorPublicKeyHash)));
        return deployRemoteCall(DogeToken.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public RemoteCall<TransactionReceipt> processTransaction(byte[] dogeTx, BigInteger txHash) {
        final Function function = new Function(
                "processTransaction", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(dogeTx), 
                new org.web3j.abi.datatypes.generated.Uint256(txHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> wasLockTxProcessed(BigInteger txHash) {
        final Function function = new Function("wasLockTxProcessed", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(txHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> doUnlock(String dogeAddress, BigInteger value) {
        final Function function = new Function(
                "doUnlock", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(dogeAddress), 
                new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setDogeEthPrice(BigInteger _dogeEthPrice) {
        final Function function = new Function(
                "setDogeEthPrice", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_dogeEthPrice)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple6<String, String, BigInteger, BigInteger, List<BigInteger>, BigInteger>> getUnlockPendingInvestorProof(BigInteger index) {
        final Function function = new Function("getUnlockPendingInvestorProof", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint32(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Uint32>>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple6<String, String, BigInteger, BigInteger, List<BigInteger>, BigInteger>>(
                new Callable<Tuple6<String, String, BigInteger, BigInteger, List<BigInteger>, BigInteger>>() {
                    @Override
                    public Tuple6<String, String, BigInteger, BigInteger, List<BigInteger>, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, String, BigInteger, BigInteger, List<BigInteger>, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                convertToNative((List<Uint32>) results.get(4).getValue()), 
                                (BigInteger) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> getUtxosLength() {
        final Function function = new Function("getUtxosLength", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public static DogeToken load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DogeToken(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static DogeToken load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DogeToken(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class NewTokenEventResponse {
        public Log log;

        public String user;

        public BigInteger value;
    }

    public static class UnlockRequestEventResponse {
        public Log log;

        public BigInteger id;

        public String from;

        public String dogeAddress;

        public BigInteger value;
    }

    public static class TransferEventResponse {
        public Log log;

        public String _from;

        public String _to;

        public BigInteger _value;
    }

    public static class ApprovalEventResponse {
        public Log log;

        public String _owner;

        public String _spender;

        public BigInteger _value;
    }
}
