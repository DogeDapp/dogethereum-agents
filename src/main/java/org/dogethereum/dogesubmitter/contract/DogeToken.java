package org.dogethereum.dogesubmitter.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes20;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.3.1.
 */
public class DogeToken extends Contract {
    private static final String BINARY = "0x60606040526040805190810160405280600481526020017f48302e310000000000000000000000000000000000000000000000000000000081525060069080519060200190620000519291906200026a565b5034156200005e57600080fd5b6040516060806200422e8339810160405280805190602001909190805190602001909190805190602001909190505060006040805190810160405280600981526020017f446f6765546f6b656e000000000000000000000000000000000000000000000081525060086040805190810160405280600981526020017f444f4745544f4b454e000000000000000000000000000000000000000000000081525083600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550836000819055508260039080519060200190620001609291906200026a565b5081600460006101000a81548160ff021916908360ff1602179055508060059080519060200190620001949291906200026a565b505050505082600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff02191690836c01000000000000000000000000900402179055506305f5e100600a8190555050505062000319565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002ad57805160ff1916838001178555620002de565b82800160010185558215620002de579182015b82811115620002dd578251825591602001919060010190620002c0565b5b509050620002ed9190620002f1565b5090565b6200031691905b8082111562000312576000816000905550600101620002f8565b5090565b90565b613f0580620003296000396000f300606060405260043610610154576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610159578063095ea7b3146101e757806318160ddd146102415780631c0b63671461026a5780631f696379146102e457806323b872dd146103625780632aa57733146103db578063313ce5671461041657806341f7a1f71461044557806354fd4d501461052f578063636a8515146105bd5780636efaae44146105f257806370a082311461061b5780638159138714610668578063834a476f146106b557806395d89b41146106fc578063965532261461078a578063a9059cbb146107bf578063b71311af14610819578063bae1222d1461086e578063c0f76faf14610897578063cae9ca51146108ba578063d48e6a9a14610957578063dd62ed3e14610a89578063dd8f13bb14610af5578063f5b2040014610b4a575b600080fd5b341561016457600080fd5b61016c610b73565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101ac578082015181840152602081019050610191565b50505050905090810190601f1680156101d95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101f257600080fd5b610227600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610c11565b604051808215151515815260200191505060405180910390f35b341561024c57600080fd5b610254610d03565b6040518082815260200191505060405180910390f35b341561027557600080fd5b6102ce600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091908035906020019091905050610d09565b6040518082815260200191505060405180910390f35b34156102ef57600080fd5b610348600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091908035906020019091905050610fc4565b604051808215151515815260200191505060405180910390f35b341561036d57600080fd5b6103c1600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611336565b604051808215151515815260200191505060405180910390f35b34156103e657600080fd5b6103fc60048080359060200190919050506115a2565b604051808215151515815260200191505060405180910390f35b341561042157600080fd5b610429611635565b604051808260ff1660ff16815260200191505060405180910390f35b341561045057600080fd5b61046c600480803563ffffffff16906020019091905050611648565b604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001858152602001848152602001838152602001828103825286818151815260200191508051906020019080838360005b838110156104f05780820151818401526020810190506104d5565b50505050905090810190601f16801561051d5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b341561053a57600080fd5b610542611736565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610582578082015181840152602081019050610567565b50505050905090810190601f1680156105af5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156105c857600080fd5b6105d06117d4565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b34156105fd57600080fd5b6106056117ea565b6040518082815260200191505060405180910390f35b341561062657600080fd5b610652600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506117f7565b6040518082815260200191505060405180910390f35b341561067357600080fd5b6106896004808035906020019091905050611840565b604051808481526020018381526020018261ffff1661ffff168152602001935050505060405180910390f35b34156106c057600080fd5b6106c8611887565b60405180826bffffffffffffffffffffffff19166bffffffffffffffffffffffff1916815260200191505060405180910390f35b341561070757600080fd5b61070f6118a6565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561074f578082015181840152602081019050610734565b50505050905090810190601f16801561077c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561079557600080fd5b61079d611944565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b34156107ca57600080fd5b6107ff600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061195a565b604051808215151515815260200191505060405180910390f35b341561082457600080fd5b61082c611ab3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561087957600080fd5b610881611ad9565b6040518082815260200191505060405180910390f35b34156108a257600080fd5b6108b86004808035906020019091905050611adf565b005b34156108c557600080fd5b61093d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611b45565b604051808215151515815260200191505060405180910390f35b341561096257600080fd5b61097e600480803563ffffffff16906020019091905050611de2565b604051808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200186815260200185815260200180602001848152602001838103835288818151815260200191508051906020019080838360005b83811015610a065780820151818401526020810190506109eb565b50505050905090810190601f168015610a335780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019060200280838360005b83811015610a6f578082015181840152602081019050610a54565b505050509050019850505050505050505060405180910390f35b3415610a9457600080fd5b610adf600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611f81565b6040518082815260200191505060405180910390f35b3415610b0057600080fd5b610b08612008565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610b5557600080fd5b610b5d61202e565b6040518082815260200191505060405180910390f35b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c095780601f10610bde57610100808354040283529160200191610c09565b820191906000526020600020905b815481529060010190602001808311610bec57829003601f168201915b505050505081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b600080600080600080600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d6e57600080fd5b610d9388600860009054906101000a90046c0100000000000000000000000002612034565b8095508196508297508398505050505073__Set___________________________________63831cb7396009896040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018281526020019250505060206040518083038186803b1515610e1657600080fd5b5af41515610e2357600080fd5b505050604051805190501515610e3857600080fd5b600b8054806001018281610e4c9190613c3c565b916000526020600020906003020160006060604051908101604052808981526020018b81526020018661ffff168152509091909150600082015181600001556020820151816001015560408201518160020160006101000a81548161ffff021916908361ffff160217905550505050610ec98460019004846122b8565b905084600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508073ffffffffffffffffffffffffffffffffffffffff167f275a11e033325e9b28a23131fcc7e243a49bb38beb686051976dd8c8899d9a3c866040518082815260200191505060405180910390a28073ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef876040518082815260200191505060405180910390a3849550505050505092915050565b6000610fce613c6e565b60006311e1a3008410151515610fe357600080fd5b83600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561103157600080fd5b83600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555061108784612445565b809250819350505060003373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a3600c600481819054906101000a900463ffffffff1660010191906101000a81548163ffffffff021916908363ffffffff1602179055507fddcd10798af76f629622a686d0ac7eca8c7ffece9d6d8d2f0b82b88fc6331570600c60049054906101000a900463ffffffff16338787604051808563ffffffff1663ffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b838110156111d65780820151818401526020810190506111bb565b50505050905090810190601f1680156112035780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a160c0604051908101604052803373ffffffffffffffffffffffffffffffffffffffff16815260200186815260200185815260200142815260200183815260200182815250600d6000600c60049054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190805190602001906112eb929190613c82565b506040820151816002015560608201518160030155608082015181600401908051906020019061131c929190613d02565b5060a0820151816005015590505060019250505092915050565b600081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015611403575081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b151561140e57600080fd5b81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600073__Set___________________________________636ce8e0816009846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018281526020019250505060206040518083038186803b151561161757600080fd5b5af4151561162457600080fd5b505050604051805190509050919050565b600460009054906101000a900460ff1681565b600d6020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561171a5780601f106116ef5761010080835404028352916020019161171a565b820191906000526020600020905b8154815290600101906020018083116116fd57829003601f168201915b5050505050908060020154908060030154908060050154905085565b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156117cc5780601f106117a1576101008083540402835291602001916117cc565b820191906000526020600020905b8154815290600101906020018083116117af57829003601f168201915b505050505081565b600c60049054906101000a900463ffffffff1681565b6000600b80549050905090565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600b8181548110151561184f57fe5b90600052602060002090600302016000915090508060000154908060010154908060020160009054906101000a900461ffff16905083565b600860009054906101000a90046c010000000000000000000000000281565b60058054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561193c5780601f106119115761010080835404028352916020019161193c565b820191906000526020600020905b81548152906001019060200180831161191f57829003601f168201915b505050505081565b600c60009054906101000a900463ffffffff1681565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156119aa57600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a5481565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b3b57600080fd5b80600f8190555050565b600082600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a38373ffffffffffffffffffffffffffffffffffffffff1660405180807f72656365697665417070726f76616c28616464726573732c75696e743235362c81526020017f616464726573732c627974657329000000000000000000000000000000000000815250602e01905060405180910390207c01000000000000000000000000000000000000000000000000000000009004338530866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828051906020019080838360005b83811015611d86578082015181840152602081019050611d6b565b50505050905090810190601f168015611db35780820380516001836020036101000a031916815260200191505b509450505050506000604051808303816000875af1925050501515611dd757600080fd5b600190509392505050565b6000611dec613db2565b600080611df7613c6e565b600080600d60008963ffffffff1663ffffffff16815260200190815260200160002090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169650806001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611eda5780601f10611eaf57610100808354040283529160200191611eda565b820191906000526020600020905b815481529060010190602001808311611ebd57829003601f168201915b50505050509550806002015494508060030154935080600401805480602002602001604051908101604052809291908181526020018280548015611f6957602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff1681526020019060040190602082600301049283019260010382029150808411611f2c5790505b50505050509250806005015491505091939550919395565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600f5481565b600080600080612042613dc6565b61204a613e15565b612052613e15565b61205a613e15565b612062613e15565b61206a613e15565b60048660000181815250506120858c8760000151600061261e565b88600001818152508197508296505050506120b88c8560008151811015156120a957fe5b90602001906020020151612745565b876080018860a001821515151581525082600019166000191681525050506120e68c8760000151600261278a565b8960000181815250819650829550839450505050506121368c83600081518110151561210e57fe5b9060200190602002015185600081518110151561212757fe5b9060200190602002015161290b565b86602001906bffffffffffffffffffffffff191690816bffffffffffffffffffffffff19168152505080600081518110151561216e57fe5b906020019060200201518660400181815250506000866060019061ffff16908161ffff16815250508a6bffffffffffffffffffffffff191686602001516bffffffffffffffffffffffff191614151561225d576121fc8c8360018151811015156121d457fe5b906020019060200201518560018151811015156121ed57fe5b9060200190602002015161290b565b86602001906bffffffffffffffffffffffff191690816bffffffffffffffffffffffff19168152505080600181518110151561223457fe5b906020019060200201518660400181815250506001866060019061ffff16908161ffff16815250505b8a6bffffffffffffffffffffffff191686602001516bffffffffffffffffffffffff191614151561228d57600080fd5b856040015186608001518760a001518860600151995099509950995050505050505092959194509250565b60008060007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8015156122e757fe5b85860991507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f80151561231657fe5b85830991507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f80151561234557fe5b6007830891506123a582600460017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f0181151561237e57fe5b047ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f61295d565b905083151560018083161415151415156123df57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f0390505b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f80151561240957fe5b8182098214151561241957600080fd5b848160405180838152602001828152602001925050506040518091039020600190049250505092915050565b61244d613c6e565b600080600080600080600b80549050600c60009054906101000a900463ffffffff1663ffffffff1610151561248157600080fd5b6302faf0809550600c60009054906101000a900463ffffffff1693505b87851080156124c95750600b80549050600c60009054906101000a900463ffffffff1663ffffffff16105b1561256957600b600c60009054906101000a900463ffffffff1663ffffffff168154811015156124f557fe5b906000526020600020906003020160000154850194506305f5e10086019550600c60009054906101000a900463ffffffff169250600c600081819054906101000a900463ffffffff168092919060010191906101000a81548163ffffffff021916908363ffffffff1602179055505061249e565b87851015151561257857600080fd5b858811151561258657600080fd5b60018484030191508163ffffffff166040518059106125a25750595b90808252806020026020018201604052509650600090505b8163ffffffff168163ffffffff16101561260e57838101878263ffffffff168151811015156125e557fe5b9060200190602002019063ffffffff16908163ffffffff168152505080806001019150506125ba565b8686965096505050505050915091565b612626613e15565b61262e613e15565b60008060008061263c613e15565b612644613e15565b60006126508c8c6129aa565b809c50819750505060008a14806126665750858a115b1561267357859450612677565b8994505b846040518059106126855750595b90808252806020026020018201604052509250846040518059106126a65750595b90808252806020026020018201604052509150600090505b8481101561272d578a83828151811015156126d557fe5b906020019060200201818152505060248b019a506126f38c8c6129aa565b809c50819550505083828281518110151561270a57fe5b9060200190602002018181525050600484018b019a5080806001019150506126be565b82828c98509850985050505050505093509350939050565b60008060008060248501945061275b86866129aa565b90508095505061276b8686612ac8565b9091925080975081935082945050505081819350935050509250929050565b612792613e15565b61279a613e15565b6127a2613e15565b6000806000806127b0613e15565b6127b8613e15565b6127c0613e15565b60006127cc8e8e6129aa565b809e50819850505060008c14806127e25750868c115b156127ef578695506127f3565b8b95505b856040518059106128015750595b90808252806020026020018201604052509350856040518059106128225750595b90808252806020026020018201604052509250856040518059106128435750595b90808252806020026020018201604052509150600090505b858110156128ef5761286f8e8e6040612b20565b828281518110151561287d57fe5b906020019060200201818152505060088d019c5061289b8e8e6129aa565b809e5081965050508c84828151811015156128b257fe5b90602001906020020181815250508483828151811015156128cf57fe5b9060200190602002018181525050848d019c50808060010191505061285b565b8184848f9a509a509a509a505050505050505093509350935093565b6000612918848484613335565b156129315761292a8460038501613698565b9050612956565b61293c8484846137bb565b156129555761294e8460028501613698565b9050612956565b5b9392505050565b600060405160208152602080820152602060408201528460608201528360808201528260a082015260208160c08360006005600019f1151561299e57600080fd5b80519150509392505050565b600080600084848151811015156129bd57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004905060018401935060fd8160ff161015612a505780848160ff16915092509250612ac0565b60fd8160ff161415612a7557612a6885856010612b20565b6002850192509250612ac0565b60fe8160ff161415612a9a57612a8d85856020612b20565b6004850192509250612ac0565b60ff8160ff161415612abf57612ab285856040612b20565b6008850192509250612ac0565b5b509250929050565b612ad0613e29565b6000806000612add613e29565b600080612aea89896139cb565b8099508194505050612afc8989613ab7565b809a508193508294505050508282828a965096509650965050505092959194509250565b60006008821415612bb1578383815181101515612b3957fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900460ff16905061332e565b6010821415612cc5576101008460018501815181101515612bce57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004028484815181101515612c4b57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090040161ffff16905061332e565b6020821415612ee65763010000008460038501815181101515612ce457fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900402620100008560028601815181101515612d6857fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004026101008660018701815181101515612deb57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004028686815181101515612e6857fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900401010163ffffffff16905061332e565b604082141561332d576701000000000000008460078501815181101515612f0957fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090040266010000000000008560068601815181101515612f9157fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090040265010000000000866005870181518110151561301857fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900402640100000000876004880181518110151561309e57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004026301000000886003890181518110151561312357fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900402620100008960028a018151811015156131a757fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004026101008a60018b0181518110151561322a57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004028a8a8151811015156132a757fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090040101010101010167ffffffffffffffff16905061332e565b5b9392505050565b60006019821480156133e3575060767f010000000000000000000000000000000000000000000000000000000000000002848481518110151561337457fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b801561348e575060a97f010000000000000000000000000000000000000000000000000000000000000002846001850181518110151561341f57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8015613539575060147f01000000000000000000000000000000000000000000000000000000000000000284600285018151811015156134ca57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80156135e4575060887f010000000000000000000000000000000000000000000000000000000000000002846017850181518110151561357557fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b801561368f575060ac7f010000000000000000000000000000000000000000000000000000000000000002846018850181518110151561362057fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b90509392505050565b6000806000809150600090505b60148173ffffffffffffffffffffffffffffffffffffffff1610156137a1578060130360080273ffffffffffffffffffffffffffffffffffffffff1685858373ffffffffffffffffffffffffffffffffffffffff160181518110151561370757fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900473ffffffffffffffffffffffffffffffffffffffff169060020a028201915080806001019150506136a5565b816c01000000000000000000000000029250505092915050565b600060178214801561386c575060a97f01000000000000000000000000000000000000000000000000000000000000000284600085018151811015156137fd57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8015613917575060147f01000000000000000000000000000000000000000000000000000000000000000284600185018151811015156138a857fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80156139c2575060877f010000000000000000000000000000000000000000000000000000000000000002846016850181518110151561395357fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b90509392505050565b6139d3613e29565b6000806139de613e29565b6139e88686613bae565b809650819350505060098260ff1610158015613a08575060498260ff1611155b1515613a1357600080fd5b60308686815181101515613a2357fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900460ff16141515613aa057600080fd5b8160ff168501945080859350935050509250929050565b600080600080600080613aca8888613bae565b809850819450505060218360ff16141515613ae457600080fd5b60037f0100000000000000000000000000000000000000000000000000000000000000028888815181101515613b1657fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161490506001870196508660208901015191506020870196508181889550955095505050509250925092565b6000808383815181101515613bbf57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900460018401915091509250929050565b815481835581811511613c6957600302816003028360005260206000209182019101613c689190613e3d565b5b505050565b602060405190810160405280600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613cc357805160ff1916838001178555613cf1565b82800160010185558215613cf1579182015b82811115613cf0578251825591602001919060010190613cd5565b5b509050613cfe9190613e81565b5090565b82805482825590600052602060002090600701600890048101928215613da15791602002820160005b83821115613d6f57835183826101000a81548163ffffffff021916908363ffffffff1602179055509260200192600401602081600301049283019260010302613d2b565b8015613d9f5782816101000a81549063ffffffff0219169055600401602081600301049283019260010302613d6f565b505b509050613dae9190613ea6565b5090565b602060405190810160405280600081525090565b60c0604051908101604052806000815260200160006bffffffffffffffffffffffff1916815260200160008152602001600061ffff168152602001600080191681526020016000151581525090565b602060405190810160405280600081525090565b602060405190810160405280600081525090565b613e7e91905b80821115613e7a5760008082016000905560018201600090556002820160006101000a81549061ffff021916905550600301613e43565b5090565b90565b613ea391905b80821115613e9f576000816000905550600101613e87565b5090565b90565b613ed691905b80821115613ed257600081816101000a81549063ffffffff021916905550600101613eac565b5090565b905600a165627a7a72305820bcab3910d8ffb1cb1240f2192a5ca2716364381eb4135cd944f0333f90108e490029";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<>();
        _addresses.put("1523477880516", "0xdb68dd02546cd741607420515e3b3aca7c275801");
    }

    protected DogeToken(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DogeToken(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<NewTokenEventResponse> getNewTokenEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("NewToken", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<NewTokenEventResponse> responses = new ArrayList<NewTokenEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewTokenEventResponse typedResponse = new NewTokenEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewTokenEventResponse> newTokenEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("NewToken", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewTokenEventResponse>() {
            @Override
            public NewTokenEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                NewTokenEventResponse typedResponse = new NewTokenEventResponse();
                typedResponse.log = log;
                typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<UnlockRequestEventResponse> getUnlockRequestEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("UnlockRequest", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<UnlockRequestEventResponse> responses = new ArrayList<UnlockRequestEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnlockRequestEventResponse typedResponse = new UnlockRequestEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.dogeAddress = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<UnlockRequestEventResponse> unlockRequestEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("UnlockRequest", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, UnlockRequestEventResponse>() {
            @Override
            public UnlockRequestEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                UnlockRequestEventResponse typedResponse = new UnlockRequestEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.from = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.dogeAddress = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Transfer", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TransferEventResponse> transferEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Transfer", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Approval", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ApprovalEventResponse> approvalEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Approval", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._spender = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<String> name() {
        final Function function = new Function("name", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> approve(String _spender, BigInteger _value) {
        final Function function = new Function(
                "approve", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_spender), 
                new org.web3j.abi.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> totalSupply() {
        final Function function = new Function("totalSupply", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> transferFrom(String _from, String _to, BigInteger _value) {
        final Function function = new Function(
                "transferFrom", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_from), 
                new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> decimals() {
        final Function function = new Function("decimals", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple5<String, String, BigInteger, BigInteger, BigInteger>> unlocksPendingInvestorProof(BigInteger param0) {
        final Function function = new Function("unlocksPendingInvestorProof", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple5<String, String, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple5<String, String, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple5<String, String, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, BigInteger, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<String> version() {
        final Function function = new Function("version", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> unlockIdx() {
        final Function function = new Function("unlockIdx", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> balanceOf(String _owner) {
        final Function function = new Function("balanceOf", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple3<BigInteger, BigInteger, BigInteger>> utxos(BigInteger param0) {
        final Function function = new Function("utxos", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint16>() {}));
        return new RemoteCall<Tuple3<BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple3<BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<byte[]> recipientDogethereum() {
        final Function function = new Function("recipientDogethereum", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes20>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<String> symbol() {
        final Function function = new Function("symbol", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> nextUnspentUtxoIndex() {
        final Function function = new Function("nextUnspentUtxoIndex", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> transfer(String _to, BigInteger _value) {
        final Function function = new Function(
                "transfer", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> trustedDogeRelay() {
        final Function function = new Function("trustedDogeRelay", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> minimumLockTxValue() {
        final Function function = new Function("minimumLockTxValue", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> approveAndCall(String _spender, BigInteger _value, byte[] _extraData) {
        final Function function = new Function(
                "approveAndCall", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_spender), 
                new org.web3j.abi.datatypes.generated.Uint256(_value), 
                new org.web3j.abi.datatypes.DynamicBytes(_extraData)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> allowance(String _owner, String _spender) {
        final Function function = new Function("allowance", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner), 
                new org.web3j.abi.datatypes.Address(_spender)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> trustedDogeEthPriceOracle() {
        final Function function = new Function("trustedDogeEthPriceOracle", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> dogeEthPrice() {
        final Function function = new Function("dogeEthPrice", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public static RemoteCall<DogeToken> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _trustedDogeRelay, String _trustedDogeEthPriceOracle, byte[] _recipientDogethereum) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_trustedDogeRelay), 
                new org.web3j.abi.datatypes.Address(_trustedDogeEthPriceOracle), 
                new org.web3j.abi.datatypes.generated.Bytes20(_recipientDogethereum)));
        return deployRemoteCall(DogeToken.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<DogeToken> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _trustedDogeRelay, String _trustedDogeEthPriceOracle, byte[] _recipientDogethereum) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_trustedDogeRelay), 
                new org.web3j.abi.datatypes.Address(_trustedDogeEthPriceOracle), 
                new org.web3j.abi.datatypes.generated.Bytes20(_recipientDogethereum)));
        return deployRemoteCall(DogeToken.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public RemoteCall<TransactionReceipt> processTransaction(byte[] dogeTx, BigInteger txHash) {
        final Function function = new Function(
                "processTransaction", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(dogeTx), 
                new org.web3j.abi.datatypes.generated.Uint256(txHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> wasLockTxProcessed(BigInteger txHash) {
        final Function function = new Function("wasLockTxProcessed", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(txHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> doUnlock(String dogeAddress, BigInteger value) {
        final Function function = new Function(
                "doUnlock", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(dogeAddress), 
                new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setDogeEthPrice(BigInteger _dogeEthPrice) {
        final Function function = new Function(
                "setDogeEthPrice", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_dogeEthPrice)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple6<String, String, BigInteger, BigInteger, List<BigInteger>, BigInteger>> getUnlockPendingInvestorProof(BigInteger index) {
        final Function function = new Function("getUnlockPendingInvestorProof", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint32(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Uint32>>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple6<String, String, BigInteger, BigInteger, List<BigInteger>, BigInteger>>(
                new Callable<Tuple6<String, String, BigInteger, BigInteger, List<BigInteger>, BigInteger>>() {
                    @Override
                    public Tuple6<String, String, BigInteger, BigInteger, List<BigInteger>, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, String, BigInteger, BigInteger, List<BigInteger>, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                convertToNative((List<Uint32>) results.get(4).getValue()), 
                                (BigInteger) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> getUtxosLength() {
        final Function function = new Function("getUtxosLength", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public static DogeToken load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DogeToken(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static DogeToken load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DogeToken(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class NewTokenEventResponse {
        public Log log;

        public String user;

        public BigInteger value;
    }

    public static class UnlockRequestEventResponse {
        public Log log;

        public BigInteger id;

        public String from;

        public String dogeAddress;

        public BigInteger value;
    }

    public static class TransferEventResponse {
        public Log log;

        public String _from;

        public String _to;

        public BigInteger _value;
    }

    public static class ApprovalEventResponse {
        public Log log;

        public String _owner;

        public String _spender;

        public BigInteger _value;
    }
}
