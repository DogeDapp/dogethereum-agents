package org.dogethereum.agents.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.3.1.
 */
public class DogeClaimManager extends Contract {
    private static final String BINARY = "0x60806040526000600255600160045534801561001a57600080fd5b50604051608080613995833981016040908152815160208301519183015160609093015160035560088054600160a060020a031916600160a060020a03909216919091179055600555600655613920806100756000396000f3006080604052600436106101505763ffffffff60e060020a60003504166318a10ca6811461015b57806318b011de146101915780631defb765146101a657806329118a9b146101d75780632a4febe4146101fb5780632c1ae45014610215578063312f63071461027557806333289a461461028a57806333337b83146102a25780633352f1a4146102df57806340732c891461030b57806341b3d1851461031357806344983f1a146103285780635292a5901461034057806355e4286b14610358578063569bc1ce14610370578063578724881461038b578063587a5efd146103a0578063795ea18e146103fa5780637dbd2832146104125780639c57588f14610477578063d1daeede1461049b578063db1ee90314610340578063e1254fba146104c5578063e1bafb91146104e6578063e708f5c314610507578063f1afcfa61461051f578063fc7e286d14610534575b610158610555565b50005b34801561016757600080fd5b5061017f600435600160a060020a0360243516610576565b60408051918252519081900360200190f35b34801561019d57600080fd5b5061017f6107b3565b3480156101b257600080fd5b506101bb6107b9565b60408051600160a060020a039092168252519081900360200190f35b3480156101e357600080fd5b5061017f600435600160a060020a03602435166107c8565b34801561020757600080fd5b506102136004356108ff565b005b34801561022157600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526102139482359460248035953695946064949201919081908401838280828437509497506109609650505050505050565b34801561028157600080fd5b5061017f610aa3565b34801561029657600080fd5b5061017f600435610aa9565b3480156102ae57600080fd5b506102c6600435602435604435606435608435610b55565b6040805192835260208301919091528051918290030190f35b3480156102eb57600080fd5b506102f7600435610f10565b604080519115158252519081900360200190f35b61017f610555565b34801561031f57600080fd5b5061017f6113cb565b34801561033457600080fd5b506102f76004356113d1565b34801561034c57600080fd5b5061017f6004356116cd565b34801561036457600080fd5b506102c66004356116d3565b34801561037c57600080fd5b50610213600435602435611ab4565b34801561039757600080fd5b5061017f611b7b565b3480156103ac57600080fd5b5060408051602060046024803582810135848102808701860190975280865261021396843596369660449591949091019291829185019084908082843750949750611b819650505050505050565b34801561040657600080fd5b5061017f600435611c93565b34801561041e57600080fd5b5061042a600435611d70565b604080519889526020890197909752600160a060020a0395861688880152939094166060870152608086019190915260a085015260c084019190915260e083015251908190036101000190f35b34801561048357600080fd5b5061017f600435600160a060020a0360243516611dc0565b3480156104a757600080fd5b5061017f600435600160a060020a0360243581169060443516611dec565b3480156104d157600080fd5b5061017f600160a060020a0360043516611fbe565b3480156104f257600080fd5b50610213600160a060020a0360043516611fd9565b34801561051357600080fd5b50610213600435612034565b34801561052b57600080fd5b5061017f6120f4565b34801561054057600080fd5b5061017f600160a060020a03600435166120fa565b6000610561333461210c565b50336000908152602081905260409020545b90565b60008281526007602090815260408083208151610200810183528154600160a060020a031681526001820154818501526002820154818401526003820154606082015260048201805484518187028101870190955280855292948694610712948793608086019390919083018282801561061957602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116105fb575b5050509183525050600782810154602083015260098301546040830152600a83015460ff8082161515606085015261010082048116151560808501526201000082048116151560a085015260c0909301926301000000909104169081111561067d57fe5b600781111561068857fe5b8152602001600b82018054806020026020016040519081016040528092919081815260200182805480156106dc57602002820191906000526020600020905b815481526001909101906020018083116106c7575b50505050508152602001600c8201548152602001600d8201548152602001600f8201548152602001601082015481525050612181565b151561071d57600080fd5b600a82015460ff61010090910416151560011461073957600080fd5b50600160a060020a0383166000818152600683016020908152604080832080549084905583835292819020805484019055805188815291820193909352808301829052915190917faafcd902e5217659ba924addbacae78ebf6a7c77409df0d0065b9ebca0129873919081900360600190a1949350505050565b60035481565b600954600160a060020a031681565b60008281526007602090815260408083208151610200810183528154600160a060020a031681526001820154818501526002820154818401526003820154606082015260048201805484518187028101870190955280855292946108cf94929386936080860193909290919083018282801561061957602002820191906000526020600020908154600160a060020a031681526001909101906020018083116105fb575050509183525050600782810154602083015260098301546040830152600a83015460ff8082161515606085015261010082048116151560808501526201000082048116151560a085015260c0909301926301000000909104169081111561067d57fe5b15156108da57600080fd5b600160a060020a038316600090815260068201602052604090205491505b5092915050565b60008181526001602081905260409091209081015461091d81612190565b1561094157600382015461093c908490600160a060020a0316836124b7565b61095b565b600282015461095b908490600160a060020a03168361253b565b505050565b600083815260016020526040812060020154819081908690600160a060020a0316331461098c57600080fd5b6000878152600160208190526040822090810154909550935091506109b28387876125bf565b91508115610a9a57600784018054600101908190554260048601556005850155600384015460408051898152600160a060020a03909216602080840182905291830189905260806060840181815289519185019190915288517fbcb63e4f4125ecd6a066b8217796792cb1b98601a5f69fbe3c80b52cee40d63b948c948c938c93909160a08401919085019080838360005b83811015610a5c578181015183820152602001610a44565b50505050905090810190601f168015610a895780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a15b50505050505050565b60025481565b33600090815260208190526040812054821115610ac557600080fd5b33600081815260208190526040808220805486900390555184156108fc0291859190818181858888f19350505050158015610b04573d6000803e3d6000fd5b50604080513381526020810184905281517f4482101800a5c2e900f4156e57e05e19ffd7b366cde579553d723fd3abb2180e929181900390910190a150503360009081526020819052604090205490565b60085460009081908190819081908190600160a060020a03161515610b7957600080fd5b600454336000908152602081905260409020541015610bcb57604080516000815261c38c602082015281516000805160206138d5833981519152929181900390910190a161c38c955060009450610f02565b426006548a011115610c1057604080516000815261c373602082015281516000805160206138d5833981519152929181900390910190a161c373955060009450610f02565b600854604080517fb8558d12000000000000000000000000000000000000000000000000000000008152600481018e9052602481018d9052604481018c9052606481018b9052608481018a90523360a48201528151600160a060020a039093169263b8558d129260c4808401939192918290030181600087803b158015610c9657600080fd5b505af1158015610caa573d6000803e3d6000fd5b505050506040513d6040811015610cc057600080fd5b50805160209091015190945092508315610d0857604080518481526020810186905281516000805160206138d5833981519152929181900390910190a1838395509550610f02565b50506000818152600760209081526040918290208251610200810184528154600160a060020a031681526001820154818401526002820154818501526003820154606082015260048201805485518186028101860190965280865286959394610e129486936080860193919290919083018282801561061957602002820191906000526020600020908154600160a060020a031681526001909101906020018083116105fb575050509183525050600782810154602083015260098301546040830152600a83015460ff8082161515606085015261010082048116151560808501526201000082048116151560a085015260c0909301926301000000909104169081111561067d57fe5b15610e4e576040805183815261c3a0602082015281516000805160206138d5833981519152929181900390910190a161c3a08295509550610f02565b805473ffffffffffffffffffffffffffffffffffffffff191633908117825560006007830155600a8201805462ffffff198116825543600285015560038054420160098601556001850187905563ffffffff1990911690915582018a9055600454610eba918491612ab1565b506040805183815233602082015280820185905290517fd861ddd0a177fc2f7e05d851f42663399d0759ad0e74e2ab7b79570f0979e2929181900360600190a1600083955095505b505050509550959350505050565b60008181526007602090815260408083208151610200810183528154600160a060020a0316815260018201548185015260028201548184015260038201546060820152600482018054845181870281018701909552808552929461101794929386936080860193909290919083018282801561061957602002820191906000526020600020908154600160a060020a031681526001909101906020018083116105fb575050509183525050600782810154602083015260098301546040830152600a83015460ff8082161515606085015261010082048116151560808501526201000082048116151560a085015260c0909301926301000000909104169081111561067d57fe5b1515611050576040805184815261c3a0602082015281516000805160206138d5833981519152929181900390910190a1600091506113c5565b600a81015460ff1615611090576040805184815261c3aa602082015281516000805160206138d5833981519152929181900390910190a1600091506113c5565b600981015442116110ce576040805184815261c36e602082015281516000805160206138d5833981519152929181900390910190a1600091506113c5565b600481015460078201541015611111576040805184815261c3aa602082015281516000805160206138d5833981519152929181900390910190a1600091506113c5565b600a8101805461ff001916610100179081905562010000900460ff161561121c576008546001820154604080517f69ecc3cf00000000000000000000000000000000000000000000000000000000815260048101929092528051600160a060020a03909316926369ecc3cf9260248082019392918290030181600087803b15801561119b57600080fd5b505af11580156111af573d6000803e3d6000fd5b505050506040513d60408110156111c557600080fd5b50508054600182015460408051868152600160a060020a03909316602084015282810191909152517f68e40e41ba461c4741bd7c670fcb849251f74cd1a4a945ced513e85ceaf4b8eb9181900360600190a16113c0565b600481015415156112c2576008546001820154604080517f797af62700000000000000000000000000000000000000000000000000000000815260048101929092528051600160a060020a039093169263797af6279260248082019392918290030181600087803b15801561129057600080fd5b505af11580156112a4573d6000803e3d6000fd5b505050506040513d60408110156112ba57600080fd5b506113589050565b6008546001820154604080517fd93a05e700000000000000000000000000000000000000000000000000000000815260048101929092528051600160a060020a039093169263d93a05e79260248082019392918290030181600087803b15801561132b57600080fd5b505af115801561133f573d6000803e3d6000fd5b505050506040513d604081101561135557600080fd5b50505b805461136e908490600160a060020a0316610576565b508054600182015460408051868152600160a060020a03909316602084015282810191909152517f1dc10db1a6fc712a92bf5ec914a579635a58ab4afbef2890cc90404d6753cef89181900360600190a15b600191505b50919050565b60045481565b60008181526007602090815260408083208151610200810183528154600160a060020a0316815260018201548185015260028201548184015260038201546060820152600482018054845181870281018701909552808552929486946114d6948793608086019390919083018282801561061957602002820191906000526020600020908154600160a060020a031681526001909101906020018083116105fb575050509183525050600782810154602083015260098301546040830152600a83015460ff8082161515606085015261010082048116151560808501526201000082048116151560a085015260c0909301926301000000909104169081111561067d57fe5b151561150f576040805185815261c3a0602082015281516000805160206138d5833981519152929181900390910190a1600092506116c6565b600a820154610100900460ff1615611554576040805185815261c3b4602082015281516000805160206138d5833981519152929181900390910190a1600092506116c6565b600a82015460ff1615611594576040805185815261c3aa602082015281516000805160206138d5833981519152929181900390910190a1600092506116c6565b6004820154600783015410156116c1576115dd848360040184600701548154811015156115bd57fe5b6000918252602090912001548454600160a060020a039182169116611dec565b9050808260080160008460040185600701548154811015156115fb57fe5b6000918252602080832090910154600160a060020a039081168452908301939093526040909101902091909155825460078401546004850180547f6d3b2a0e9b0833bfb42336839231773ea07aed87bb2fdee34c960696ea11f849948994169290811061166457fe5b6000918252602091829020015460408051948552600160a060020a0393841692850192909252919091168282015260608201849052519081900360800190a1600a8201805460ff1916600190811790915560078301805490910190555b600192505b5050919050565b50600090565b6008546000908190819081908190600160a060020a031615156116f557600080fd5b6000868152600760209081526040918290208251610200810184528154600160a060020a03168152600182015481840152600282015481850152600382015460608201526004820180548551818602810186019096528086528b98509296506117fe94919387936080860193929183018282801561061957602002820191906000526020600020908154600160a060020a031681526001909101906020018083116105fb575050509183525050600782810154602083015260098301546040830152600a83015460ff8082161515606085015261010082048116151560808501526201000082048116151560a085015260c0909301926301000000909104169081111561067d57fe5b151561183b576040805184815261c3a0602082015281516000805160206138d5833981519152929181900390910190a161c3a08394509450611aac565b600a820154610100900460ff1615611884576040805184815261c3b4602082015281516000805160206138d5833981519152929181900390910190a161c3b48394509450611aac565b6004543360009081526020819052604090205410156118d4576040805184815261c38c602082015281516000805160206138d5833981519152929181900390910190a161c38c8394509450611aac565b33600090815260058301602052604090205415611922576040805184815261c3be602082015281516000805160206138d5833981519152929181900390910190a161c3be8394509450611aac565b600854604080517fcffd46dc000000000000000000000000000000000000000000000000000000008152600481018990528151600160a060020a039093169263cffd46dc926024808401939192918290030181600087803b15801561198657600080fd5b505af115801561199a573d6000803e3d6000fd5b505050506040513d60408110156119b057600080fd5b5051905080156119ef57604080518481526020810183905281516000805160206138d5833981519152929181900390910190a193506000925083611aac565b6119fc8333600454612ab1565b50600354600983018054909101905560048201805460018101825560008281526020808220909201805473ffffffffffffffffffffffffffffffffffffffff191633908117909155925483825260058601835260409182902055600a8501805463ff0000001916630100000017905580518681529182019290925281517f4e4ec862758a1fd984d86a07836cbea0bb7aec069cc98cd7a543266b270e42e4929181900390910190a1600083945094505b505050915091565b600082815260016020526040812060030154819081908590600160a060020a03163314611ae057600080fd5b600086815260016020819052604082209081015490955093509150611b058386612c7a565b91508115611b7357600784018054600101908190554260048601556006850155600284015460408051888152600160a060020a039092166020830152818101879052517f6ee9dcacd7fd10862d15833c896a092733cc9d79ac047f101942773acc8713a39181900360600190a15b505050505050565b60065481565b600082815260016020526040812060020154819081908590600160a060020a03163314611bad57600080fd5b600086815260016020819052604082209081015490955093509150611bd28386612d61565b91508115611b7357600784018054600101908190554260048601556005850155600384015460408051888152600160a060020a039092166020808401829052606092840183815289519385019390935288517f704c664348f14141f701b87e0a31c8886303615e5f4783cb8a148c0ffc8b74b0948b948b93919290916080840191818601910280838360005b83811015611c76578181015183820152602001611c5e565b5050505090500194505050505060405180910390a1505050505050565b600081815260016020819052604082209081015460058201546006830154118015611cc5575060035482600401540142115b15611ced576002820154611ce4908590600160a060020a03168361253b565b600092506116c6565b81600601548260050154118015611d0b575060035482600401540142115b15611d2a576003820154611ce4908590600160a060020a0316836124b7565b6040805185815261c36e602082015281517f9ef9211bc259194e13c8ea0c5eaa84f4ea7ee397793b93a8c3b4962e503045de929181900390910190a161c36e92506116c6565b6001602081905260009182526040909120805491810154600282015460038301546004840154600585015460068601546007909601549495600160a060020a039485169594909316939192909188565b6000828152600760209081526040808320600160a060020a038516845260080190915290205492915050565b600254604080516020808201879052338284015260608083019490945282518083039094018452608090910191829052825160009384938493919290918291908401908083835b60208310611e525780518252601f199092019160209182019101611e33565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020915060016000836000191660001916815260200190815260200160002090508181600001816000191690555085816001018160001916905550838160020160006101000a815481600160a060020a030219169083600160a060020a03160217905550848160030160006101000a815481600160a060020a030219169083600160a060020a0316021790555042816004018190555060008160060181905550600181600501819055506001816007018190555060016002600082825401925050819055507f389e5c47177785f5b4206b5ddf96c41970bd23c868249b4074ac4f7be5d2690382858760405180846000191660001916815260200183600160a060020a0316600160a060020a0316815260200182600160a060020a0316600160a060020a03168152602001935050505060405180910390a150949350505050565b600160a060020a031660009081526020819052604090205490565b600954600160a060020a0316158015611ffa5750600160a060020a03811615155b151561200557600080fd5b6009805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600081815260016020526040812060030154819081908490600160a060020a0316331461206057600080fd5b6000858152600160208190526040822090810154909550935091506120848361302a565b915081156120ed57600784018054600101908190554260048601556006850155600284015460408051878152600160a060020a03909216602083015280517f0b8108033caf17f40e9893d8595eadc1ed7f7ec73b632df565d517fee8c7a9669281900390910190a15b5050505050565b60055481565b60006020819052908152604090205481565b600160a060020a038216600090815260208190526040902080548201908190553031101561213957600080fd5b60408051600160a060020a03841681526020810183905281517fd15c9547ea5c06670c0010ce19bc32d54682a4b3801ece7f3ab0c3f17106b4bb929181900390910190a15050565b51600160a060020a0316151590565b600081815260076020526040812081808080806006600a8701546301000000900460ff1660078111156121bf57fe5b14156124a7578560010154945085601001546000141580156121e8575085600301548660100154145b15156121f357600080fd5b600854604080517ff2854e34000000000000000000000000000000000000000000000000000000008152600481018890529051600160a060020a039092169163f2854e34916024808201926020929091908290030181600087803b15801561225a57600080fd5b505af115801561226e573d6000803e3d6000fd5b505050506040513d602081101561228457600080fd5b5051600854604080517f55e018ce000000000000000000000000000000000000000000000000000000008152600481018990529051929650600160a060020a03909116916355e018ce916024808201926020929091908290030181600087803b1580156122f057600080fd5b505af1158015612304573d6000803e3d6000fd5b505050506040513d602081101561231a57600080fd5b5051600854604080517ff2854e34000000000000000000000000000000000000000000000000000000008152600481018490529051929550600160a060020a039091169163f2854e34916024808201926020929091908290030181600087803b15801561238657600080fd5b505af115801561239a573d6000803e3d6000fd5b505050506040513d60208110156123b057600080fd5b5051600f870154909250820184146123c757600080fd5b600854604080517f3ce90e8f000000000000000000000000000000000000000000000000000000008152600481018890529051600160a060020a0390921691633ce90e8f916024808201926020929091908290030181600087803b15801561242e57600080fd5b505af1158015612442573d6000803e3d6000fd5b505050506040513d602081101561245857600080fd5b5051600b8701805491925090600019810190811061247257fe5b600091825260209091200154811461248957600080fd5b600a8601805463ff00000019166307000000179055600196506124ac565b600096505b505050505050919050565b6000838152600160205260409020600281015460038201546124e99186918591600160a060020a039081169116613081565b6124f284613247565b60408051858152600160a060020a038516602082015281517f5041edcbe6f9da739af8efbf617847a61f49fa62473db9fc291b595c36f24769929181900390910190a150505050565b60008381526001602052604090206003810154600282015461256d9186918591600160a060020a039081169116613081565b61257684613247565b60408051858152600160a060020a038516602082015281517faa6a47cdecdfea65fed4efdf45440a6349c10a8eab99978bcc5a9e74e74a883c929181900390910190a150505050565b6000838152600760205260408120818080808080806004600a8901546301000000900460ff1660078111156125f057fe5b1415612a9d576126038a600060506132a8565b6000818152600e8a01602052604090205490975060011461262357600080fd5b6000878152600e89016020908152604090912060029055600d890180546001019055612653908b9060449061336b565b9550600554886003015481151561266657fe5b046005548781151561267457fe5b04111561268057600080fd5b6001600554896003015481151561269357fe5b0403600554878115156126a257fe5b0410156126ae57600080fd5b6126bb8a6048602061336b565b94506126ce6126c98661368c565b6136af565b88600f01600082825401925050819055508a935073__DogeTx________________________________63fa7199a18b60008d5188600190046040518563ffffffff1660e060020a0281526004018080602001858152602001848152602001838152602001828103825286818151815260200191508051906020019080838360005b8381101561276757818101518382015260200161274f565b50505050905090810190601f1680156127945780820380516001836020036101000a031916815260200191505b509550505050505060606040518083038186803b1580156127b457600080fd5b505af41580156127c8573d6000803e3d6000fd5b505050506040513d60608110156127de57600080fd5b5080516020820151604090920151909450909250905082156127ff57600080fd5b61280a8a60006136e1565b15612921576009548a51600160a060020a039091169063b3fb85bd90612837908d90604f19810190613700565b8a5460405160e060020a63ffffffff851602815260248101899052600060448201819052600160a060020a0390921660648201819052306084830181905260a060048401908152855160a485015285518c9594829160c49091019060208901908083838a5b838110156128b457818101518382015260200161289c565b50505050905090810190601f1680156128e15780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b15801561290457600080fd5b505af1158015612918573d6000803e3d6000fd5b50505050612a25565b600954600160a060020a031663b3fb85bd61293f8c60006050613700565b8a5460405160e060020a63ffffffff851602815260248101899052600060448201819052600160a060020a0390921660648201819052306084830181905260a060048401908152855160a485015285518c9594829160c49091019060208901908083838a5b838110156129bc5781810151838201526020016129a4565b50505050905090810190601f1680156129e95780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b158015612a0c57600080fd5b505af1158015612a20573d6000803e3d6000fd5b505050505b600b880180546000198101908110612a3957fe5b600091825260209091200154871415612a5457601088018690555b600b880154600d8901541415612a7e57600a8801805463ff00000019166306000000179055612a94565b600a8801805463ff000000191663050000001790555b60019850612aa2565b600098505b50505050505050509392505050565b60008381526007602090815260408083208151610200810183528154600160a060020a03168152600182015481850152600282015481840152600382015460608201526004820180548451818702810187019095528085529294612bb894929386936080860193909290919083018282801561061957602002820191906000526020600020908154600160a060020a031681526001909101906020018083116105fb575050509183525050600782810154602083015260098301546040830152600a83015460ff8082161515606085015261010082048116151560808501526201000082048116151560a085015260c0909301926301000000909104169081111561067d57fe5b1515612bc357600080fd5b600160a060020a038416600090815260208190526040902054831115612be857600080fd5b600160a060020a0384166000818152602081815260408083208054889003905560068501825291829020805487019055815188815290810192909252818101859052517ff49b89a01f8b7e79e855801f268b5df3d7c88c4bc61293934fc1f9c52ddfeb319181900360600190a1600160a060020a03841660009081526006820160205260409020549150509392505050565b6000828152600760205260408120600c810154158015612cb357506003600a8201546301000000900460ff166007811115612cb157fe5b145b80612ce65750600081600c0154118015612ce657506005600a8201546301000000900460ff166007811115612ce457fe5b145b15612d5757600b810154600c82015410612cff57600080fd5b6000838152600e8201602052604090205415612d1a57600080fd5b600c8101805460019081019091556000848152600e830160205260409020819055600a8201805463ff0000001916630400000017905591506108f8565b5060009392505050565b6000828152600760205260408120600b8101548290819015612d8257600080fd5b6002600a8401546301000000900460ff166007811115612d9e57fe5b141561301c57600a8301805463ff000000191663030000001790558451612dce90600b850190602088019061386d565b506008546001840154604080517f3ce90e8f000000000000000000000000000000000000000000000000000000008152600481019290925251600160a060020a0390921691633ce90e8f916024808201926020929091908290030181600087803b158015612e3b57600080fd5b505af1158015612e4f573d6000803e3d6000fd5b505050506040513d6020811015612e6557600080fd5b5051600b84018054919350906000198101908110612e7f57fe5b6000918252602090912001548214612e9657600080fd5b6040517ff9b5d7c0000000000000000000000000000000000000000000000000000000008152602060048201908152600b850180546024840181905273__DogeTx________________________________9363f9b5d7c0939182916044019084908015612f2357602002820191906000526020600020905b81548152600190910190602001808311612f0e575b50509250505060206040518083038186803b158015612f4157600080fd5b505af4158015612f55573d6000803e3d6000fd5b505050506040513d6020811015612f6b57600080fd5b50516008546001850154604080517f642ed988000000000000000000000000000000000000000000000000000000008152600481019290925251929350600160a060020a039091169163642ed988916024808201926020929091908290030181600087803b158015612fdc57600080fd5b505af1158015612ff0573d6000803e3d6000fd5b505050506040513d602081101561300657600080fd5b5051811461301357600080fd5b60019350613021565b600093505b50505092915050565b60008181526007602052604081206001600a8201546301000000900460ff16600781111561305457fe5b141561307857600a8101805463ff00000019166302000000179055600191506113c5565b50600092915050565b6000838152600760209081526040918290208251610200810184528154600160a060020a0316815260018201548184015260028201548185015260038201546060820152600482018054855181860281018601909652808652929461318694929386936080860193919083018282801561061957602002820191906000526020600020908154600160a060020a031681526001909101906020018083116105fb575050509183525050600782810154602083015260098301546040830152600a83015460ff8082161515606085015261010082048116151560808501526201000082048116151560a085015260c0909301926301000000909104169081111561067d57fe5b151561319157600080fd5b600a8101805460ff191690558054600160a060020a03838116911614156131d457600a8101805462ff00001916620100001790556131ce846113d1565b506131f7565b8054600160a060020a03848116911614156131f2576131ce846113d1565b600080fd5b60408051868152600160a060020a03808616602083015284168183015290517f3ed70ed22cfbf21e1bdfa13940bfb497d1d2652c3df69e4997bf7e6deba6b33b9181900360600190a15050505050565b6000908152600160208190526040822082815590810182905560028101805473ffffffffffffffffffffffffffffffffffffffff19908116909155600382018054909116905560048101829055600581018290556006810182905560070155565b600061336160026132ba868686613760565b6040805160208082019390935281518082038401815290820191829052805190928291908401908083835b602083106133045780518252601f1990920191602091820191016132e5565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af1158015613345573d6000803e3d6000fd5b5050506040513d602081101561335a57600080fd5b5051613787565b90505b9392505050565b600081600814156133a857838381518110151561338457fe5b90602001015160f860020a900460f860020a0260f860020a900460ff169050613364565b81601014156134145783836001018151811015156133c257fe5b90602001015160f860020a900460f860020a0260f860020a90046101000284848151811015156133ee57fe5b90602001015160f860020a900460f860020a0260f860020a90040161ffff169050613364565b81602014156134e557838360030181518110151561342e57fe5b90602001015160f860020a900460f860020a0260f860020a9004630100000002848460020181518110151561345f57fe5b90602001015160f860020a900460f860020a0260f860020a90046201000002858560010181518110151561348f57fe5b90602001015160f860020a900460f860020a0260f860020a90046101000286868151811015156134bb57fe5b90602001015160f860020a900460f860020a0260f860020a900401010163ffffffff169050613364565b81604014156133645783836007018151811015156134ff57fe5b90602001015160f860020a900460f860020a0260f860020a900467010000000000000002848460060181518110151561353457fe5b90602001015160f860020a900460f860020a0260f860020a9004660100000000000002858560050181518110151561356857fe5b90602001015160f860020a900460f860020a0260f860020a90046501000000000002868660040181518110151561359b57fe5b90602001015160f860020a900460f860020a0260f860020a90046401000000000287876003018151811015156135cd57fe5b90602001015160f860020a900460f860020a0260f860020a900463010000000288886002018151811015156135fe57fe5b90602001015160f860020a900460f860020a0260f860020a90046201000002898960010181518110151561362e57fe5b90602001015160f860020a900460f860020a0260f860020a9004610100028a8a81518110151561365a57fe5b90602001015160f860020a900460f860020a0260f860020a90040101010101010167ffffffffffffffff169050613364565b62ffffff8116630100000063ffffffff92831604909116600219016101000a0290565b6000817d0fffff0000000000000000000000000000000000000000000000000000008115156136da57fe5b0492915050565b60006101006136f084846137b2565b1663ffffffff1615159392505050565b6060600060608484039150816040519080825280601f01601f191660200182016040528015613739578160200160208202803883390190505b5090508160208201838760208a010160045afa151561375757600080fd5b95945050505050565b60006040516020818486602089010160025afa151561377e57600080fd5b51949350505050565b600060405160005b60208110156137aa578381601f031a8183015360010161378f565b505192915050565b600082826003018151811015156137c557fe5b90602001015160f860020a900460f860020a0260f860020a900463010000000283836002018151811015156137f657fe5b90602001015160f860020a900460f860020a0260f860020a90046201000002848460010181518110151561382657fe5b90602001015160f860020a900460f860020a0260f860020a900461010002858581518110151561385257fe5b016020015160f860020a908190048102040101019392505050565b8280548282559060005260206000209081019282156138aa579160200282015b828111156138aa578251825560209092019160019091019061388d565b506138b69291506138ba565b5090565b61057391905b808211156138b657600081556001016138c0560094bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa33a165627a7a723058209445534af72724a6efe06ccbfdd078aca67dce71a57b85a0fb1df455f77526ce0029";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<>();
        _addresses.put("32001", "0x9126a9537903206ec7c93902ee45ba2dba509576");
    }

    protected DogeClaimManager(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DogeClaimManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<DepositBondedEventResponse> getDepositBondedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("DepositBonded", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<DepositBondedEventResponse> responses = new ArrayList<DepositBondedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositBondedEventResponse typedResponse = new DepositBondedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<DepositBondedEventResponse> depositBondedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("DepositBonded", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, DepositBondedEventResponse>() {
            @Override
            public DepositBondedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                DepositBondedEventResponse typedResponse = new DepositBondedEventResponse();
                typedResponse.log = log;
                typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<DepositUnbondedEventResponse> getDepositUnbondedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("DepositUnbonded", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<DepositUnbondedEventResponse> responses = new ArrayList<DepositUnbondedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositUnbondedEventResponse typedResponse = new DepositUnbondedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<DepositUnbondedEventResponse> depositUnbondedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("DepositUnbonded", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, DepositUnbondedEventResponse>() {
            @Override
            public DepositUnbondedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                DepositUnbondedEventResponse typedResponse = new DepositUnbondedEventResponse();
                typedResponse.log = log;
                typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<SuperblockClaimCreatedEventResponse> getSuperblockClaimCreatedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("SuperblockClaimCreated", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<SuperblockClaimCreatedEventResponse> responses = new ArrayList<SuperblockClaimCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimCreatedEventResponse typedResponse = new SuperblockClaimCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.superblockId = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SuperblockClaimCreatedEventResponse> superblockClaimCreatedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("SuperblockClaimCreated", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, SuperblockClaimCreatedEventResponse>() {
            @Override
            public SuperblockClaimCreatedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                SuperblockClaimCreatedEventResponse typedResponse = new SuperblockClaimCreatedEventResponse();
                typedResponse.log = log;
                typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.superblockId = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<SuperblockClaimChallengedEventResponse> getSuperblockClaimChallengedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("SuperblockClaimChallenged", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<SuperblockClaimChallengedEventResponse> responses = new ArrayList<SuperblockClaimChallengedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimChallengedEventResponse typedResponse = new SuperblockClaimChallengedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SuperblockClaimChallengedEventResponse> superblockClaimChallengedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("SuperblockClaimChallenged", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, SuperblockClaimChallengedEventResponse>() {
            @Override
            public SuperblockClaimChallengedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                SuperblockClaimChallengedEventResponse typedResponse = new SuperblockClaimChallengedEventResponse();
                typedResponse.log = log;
                typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<SessionDecidedEventResponse> getSessionDecidedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("SessionDecided", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<SessionDecidedEventResponse> responses = new ArrayList<SessionDecidedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SessionDecidedEventResponse typedResponse = new SessionDecidedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.winner = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.loser = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SessionDecidedEventResponse> sessionDecidedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("SessionDecided", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, SessionDecidedEventResponse>() {
            @Override
            public SessionDecidedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                SessionDecidedEventResponse typedResponse = new SessionDecidedEventResponse();
                typedResponse.log = log;
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.winner = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.loser = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<SuperblockClaimSuccessfulEventResponse> getSuperblockClaimSuccessfulEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("SuperblockClaimSuccessful", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<SuperblockClaimSuccessfulEventResponse> responses = new ArrayList<SuperblockClaimSuccessfulEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimSuccessfulEventResponse typedResponse = new SuperblockClaimSuccessfulEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.superblockId = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SuperblockClaimSuccessfulEventResponse> superblockClaimSuccessfulEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("SuperblockClaimSuccessful", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, SuperblockClaimSuccessfulEventResponse>() {
            @Override
            public SuperblockClaimSuccessfulEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                SuperblockClaimSuccessfulEventResponse typedResponse = new SuperblockClaimSuccessfulEventResponse();
                typedResponse.log = log;
                typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.superblockId = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<SuperblockClaimFailedEventResponse> getSuperblockClaimFailedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("SuperblockClaimFailed", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<SuperblockClaimFailedEventResponse> responses = new ArrayList<SuperblockClaimFailedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimFailedEventResponse typedResponse = new SuperblockClaimFailedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.superblockId = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SuperblockClaimFailedEventResponse> superblockClaimFailedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("SuperblockClaimFailed", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, SuperblockClaimFailedEventResponse>() {
            @Override
            public SuperblockClaimFailedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                SuperblockClaimFailedEventResponse typedResponse = new SuperblockClaimFailedEventResponse();
                typedResponse.log = log;
                typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.superblockId = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<VerificationGameStartedEventResponse> getVerificationGameStartedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("VerificationGameStarted", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<VerificationGameStartedEventResponse> responses = new ArrayList<VerificationGameStartedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VerificationGameStartedEventResponse typedResponse = new VerificationGameStartedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<VerificationGameStartedEventResponse> verificationGameStartedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("VerificationGameStarted", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, VerificationGameStartedEventResponse>() {
            @Override
            public VerificationGameStartedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                VerificationGameStartedEventResponse typedResponse = new VerificationGameStartedEventResponse();
                typedResponse.log = log;
                typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public List<ErrorClaimEventResponse> getErrorClaimEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("ErrorClaim", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<ErrorClaimEventResponse> responses = new ArrayList<ErrorClaimEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ErrorClaimEventResponse typedResponse = new ErrorClaimEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.err = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ErrorClaimEventResponse> errorClaimEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("ErrorClaim", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ErrorClaimEventResponse>() {
            @Override
            public ErrorClaimEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                ErrorClaimEventResponse typedResponse = new ErrorClaimEventResponse();
                typedResponse.log = log;
                typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.err = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<NewSessionEventResponse> getNewSessionEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("NewSession", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<NewSessionEventResponse> responses = new ArrayList<NewSessionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewSessionEventResponse typedResponse = new NewSessionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewSessionEventResponse> newSessionEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("NewSession", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewSessionEventResponse>() {
            @Override
            public NewSessionEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                NewSessionEventResponse typedResponse = new NewSessionEventResponse();
                typedResponse.log = log;
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<ChallengerConvictedEventResponse> getChallengerConvictedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("ChallengerConvicted", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<ChallengerConvictedEventResponse> responses = new ArrayList<ChallengerConvictedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ChallengerConvictedEventResponse typedResponse = new ChallengerConvictedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ChallengerConvictedEventResponse> challengerConvictedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("ChallengerConvicted", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ChallengerConvictedEventResponse>() {
            @Override
            public ChallengerConvictedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                ChallengerConvictedEventResponse typedResponse = new ChallengerConvictedEventResponse();
                typedResponse.log = log;
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<ClaimantConvictedEventResponse> getClaimantConvictedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("ClaimantConvicted", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<ClaimantConvictedEventResponse> responses = new ArrayList<ClaimantConvictedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ClaimantConvictedEventResponse typedResponse = new ClaimantConvictedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ClaimantConvictedEventResponse> claimantConvictedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("ClaimantConvicted", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ClaimantConvictedEventResponse>() {
            @Override
            public ClaimantConvictedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                ClaimantConvictedEventResponse typedResponse = new ClaimantConvictedEventResponse();
                typedResponse.log = log;
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<QueryMerkleRootHashesEventResponse> getQueryMerkleRootHashesEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("QueryMerkleRootHashes", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<QueryMerkleRootHashesEventResponse> responses = new ArrayList<QueryMerkleRootHashesEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            QueryMerkleRootHashesEventResponse typedResponse = new QueryMerkleRootHashesEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<QueryMerkleRootHashesEventResponse> queryMerkleRootHashesEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("QueryMerkleRootHashes", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, QueryMerkleRootHashesEventResponse>() {
            @Override
            public QueryMerkleRootHashesEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                QueryMerkleRootHashesEventResponse typedResponse = new QueryMerkleRootHashesEventResponse();
                typedResponse.log = log;
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<RespondMerkleRootHashesEventResponse> getRespondMerkleRootHashesEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("RespondMerkleRootHashes", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<RespondMerkleRootHashesEventResponse> responses = new ArrayList<RespondMerkleRootHashesEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RespondMerkleRootHashesEventResponse typedResponse = new RespondMerkleRootHashesEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.blockHashes = (List<byte[]>) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RespondMerkleRootHashesEventResponse> respondMerkleRootHashesEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("RespondMerkleRootHashes", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, RespondMerkleRootHashesEventResponse>() {
            @Override
            public RespondMerkleRootHashesEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                RespondMerkleRootHashesEventResponse typedResponse = new RespondMerkleRootHashesEventResponse();
                typedResponse.log = log;
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.blockHashes = (List<byte[]>) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<QueryBlockHeaderEventResponse> getQueryBlockHeaderEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("QueryBlockHeader", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<QueryBlockHeaderEventResponse> responses = new ArrayList<QueryBlockHeaderEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            QueryBlockHeaderEventResponse typedResponse = new QueryBlockHeaderEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.blockHash = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<QueryBlockHeaderEventResponse> queryBlockHeaderEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("QueryBlockHeader", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, QueryBlockHeaderEventResponse>() {
            @Override
            public QueryBlockHeaderEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                QueryBlockHeaderEventResponse typedResponse = new QueryBlockHeaderEventResponse();
                typedResponse.log = log;
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.blockHash = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<RespondBlockHeaderEventResponse> getRespondBlockHeaderEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("RespondBlockHeader", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicBytes>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<RespondBlockHeaderEventResponse> responses = new ArrayList<RespondBlockHeaderEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RespondBlockHeaderEventResponse typedResponse = new RespondBlockHeaderEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.scryptBlockHash = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.blockHeader = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RespondBlockHeaderEventResponse> respondBlockHeaderEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("RespondBlockHeader", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicBytes>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, RespondBlockHeaderEventResponse>() {
            @Override
            public RespondBlockHeaderEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                RespondBlockHeaderEventResponse typedResponse = new RespondBlockHeaderEventResponse();
                typedResponse.log = log;
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.scryptBlockHash = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.blockHeader = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public List<SessionErrorEventResponse> getSessionErrorEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("SessionError", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<SessionErrorEventResponse> responses = new ArrayList<SessionErrorEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SessionErrorEventResponse typedResponse = new SessionErrorEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.err = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SessionErrorEventResponse> sessionErrorEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("SessionError", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, SessionErrorEventResponse>() {
            @Override
            public SessionErrorEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                SessionErrorEventResponse typedResponse = new SessionErrorEventResponse();
                typedResponse.log = log;
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.err = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<DepositMadeEventResponse> getDepositMadeEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("DepositMade", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<DepositMadeEventResponse> responses = new ArrayList<DepositMadeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositMadeEventResponse typedResponse = new DepositMadeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.who = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<DepositMadeEventResponse> depositMadeEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("DepositMade", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, DepositMadeEventResponse>() {
            @Override
            public DepositMadeEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                DepositMadeEventResponse typedResponse = new DepositMadeEventResponse();
                typedResponse.log = log;
                typedResponse.who = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<DepositWithdrawnEventResponse> getDepositWithdrawnEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("DepositWithdrawn", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<DepositWithdrawnEventResponse> responses = new ArrayList<DepositWithdrawnEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositWithdrawnEventResponse typedResponse = new DepositWithdrawnEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.who = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<DepositWithdrawnEventResponse> depositWithdrawnEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("DepositWithdrawn", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, DepositWithdrawnEventResponse>() {
            @Override
            public DepositWithdrawnEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                DepositWithdrawnEventResponse typedResponse = new DepositWithdrawnEventResponse();
                typedResponse.log = log;
                typedResponse.who = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<BigInteger> superblockTimeout() {
        final Function function = new Function("superblockTimeout", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> scryptChecker() {
        final Function function = new Function("scryptChecker", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> performVerification(byte[] sessionId) {
        final Function function = new Function(
                "performVerification", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(sessionId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> respondBlockHeader(byte[] sessionId, byte[] scryptBlockHash, byte[] blockHeader) {
        final Function function = new Function(
                "respondBlockHeader", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(sessionId), 
                new org.web3j.abi.datatypes.generated.Bytes32(scryptBlockHash), 
                new org.web3j.abi.datatypes.DynamicBytes(blockHeader)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> sessionsCount() {
        final Function function = new Function("sessionsCount", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> withdrawDeposit(BigInteger amount) {
        final Function function = new Function(
                "withdrawDeposit", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> makeDeposit(BigInteger weiValue) {
        final Function function = new Function(
                "makeDeposit", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<BigInteger> minDeposit() {
        final Function function = new Function("minDeposit", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> queryBlockHeader(byte[] sessionId, byte[] blockHash) {
        final Function function = new Function(
                "queryBlockHeader", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(sessionId), 
                new org.web3j.abi.datatypes.generated.Bytes32(blockHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> superblockDelay() {
        final Function function = new Function("superblockDelay", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> respondMerkleRootHashes(byte[] sessionId, List<byte[]> blockHashes) {
        final Function function = new Function(
                "respondMerkleRootHashes", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(sessionId), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.Utils.typeMap(blockHashes, org.web3j.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> timeout(byte[] sessionId) {
        final Function function = new Function(
                "timeout", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(sessionId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple8<byte[], byte[], String, String, BigInteger, BigInteger, BigInteger, BigInteger>> sessions(byte[] param0) {
        final Function function = new Function("sessions", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple8<byte[], byte[], String, String, BigInteger, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple8<byte[], byte[], String, String, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple8<byte[], byte[], String, String, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<byte[], byte[], String, String, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (byte[]) results.get(0).getValue(), 
                                (byte[]) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> beginBattleSession(byte[] claimId, String challenger, String claimant) {
        final Function function = new Function(
                "beginBattleSession", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(claimId), 
                new org.web3j.abi.datatypes.Address(challenger), 
                new org.web3j.abi.datatypes.Address(claimant)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getDeposit(String who) {
        final Function function = new Function("getDeposit", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(who)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> queryMerkleRootHashes(byte[] sessionId) {
        final Function function = new Function(
                "queryMerkleRootHashes", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(sessionId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> superblockDuration() {
        final Function function = new Function("superblockDuration", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> deposits(String param0) {
        final Function function = new Function("deposits", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public static RemoteCall<DogeClaimManager> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _superblocks, BigInteger _superblockDuration, BigInteger _superblockDelay, BigInteger _superblockTimeout) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_superblocks), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockDuration), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockDelay), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockTimeout)));
        return deployRemoteCall(DogeClaimManager.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<DogeClaimManager> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _superblocks, BigInteger _superblockDuration, BigInteger _superblockDelay, BigInteger _superblockTimeout) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_superblocks), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockDuration), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockDelay), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockTimeout)));
        return deployRemoteCall(DogeClaimManager.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public RemoteCall<TransactionReceipt> setScryptChecker(String _scryptChecker) {
        final Function function = new Function(
                "setScryptChecker", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_scryptChecker)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getBondedDeposit(byte[] claimId, String account) {
        final Function function = new Function("getBondedDeposit", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(claimId), 
                new org.web3j.abi.datatypes.Address(account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> unbondDeposit(byte[] claimId, String account) {
        final Function function = new Function(
                "unbondDeposit", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(claimId), 
                new org.web3j.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> proposeSuperblock(byte[] _blocksMerkleRoot, BigInteger _accumulatedWork, BigInteger _timestamp, byte[] _lastHash, byte[] _parentHash) {
        final Function function = new Function(
                "proposeSuperblock", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_blocksMerkleRoot), 
                new org.web3j.abi.datatypes.generated.Uint256(_accumulatedWork), 
                new org.web3j.abi.datatypes.generated.Uint256(_timestamp), 
                new org.web3j.abi.datatypes.generated.Bytes32(_lastHash), 
                new org.web3j.abi.datatypes.generated.Bytes32(_parentHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> challengeSuperblock(byte[] superblockId) {
        final Function function = new Function(
                "challengeSuperblock", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> runNextBattleSession(byte[] claimId) {
        final Function function = new Function(
                "runNextBattleSession", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(claimId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> checkClaimFinished(byte[] claimId) {
        final Function function = new Function(
                "checkClaimFinished", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(claimId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<byte[]> getSession(byte[] claimId, String challenger) {
        final Function function = new Function("getSession", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(claimId), 
                new org.web3j.abi.datatypes.Address(challenger)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<TransactionReceipt> scryptVerified(byte[] _proposalId) {
        final Function function = new Function(
                "scryptVerified", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_proposalId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> scryptFailed(byte[] _proposalId) {
        final Function function = new Function(
                "scryptFailed", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_proposalId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static DogeClaimManager load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DogeClaimManager(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static DogeClaimManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DogeClaimManager(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class DepositBondedEventResponse {
        public Log log;

        public byte[] claimId;

        public String account;

        public BigInteger amount;
    }

    public static class DepositUnbondedEventResponse {
        public Log log;

        public byte[] claimId;

        public String account;

        public BigInteger amount;
    }

    public static class SuperblockClaimCreatedEventResponse {
        public Log log;

        public byte[] claimId;

        public String claimant;

        public byte[] superblockId;
    }

    public static class SuperblockClaimChallengedEventResponse {
        public Log log;

        public byte[] claimId;

        public String challenger;
    }

    public static class SessionDecidedEventResponse {
        public Log log;

        public byte[] sessionId;

        public String winner;

        public String loser;
    }

    public static class SuperblockClaimSuccessfulEventResponse {
        public Log log;

        public byte[] claimId;

        public String claimant;

        public byte[] superblockId;
    }

    public static class SuperblockClaimFailedEventResponse {
        public Log log;

        public byte[] claimId;

        public String claimant;

        public byte[] superblockId;
    }

    public static class VerificationGameStartedEventResponse {
        public Log log;

        public byte[] claimId;

        public String claimant;

        public String challenger;

        public byte[] sessionId;
    }

    public static class ErrorClaimEventResponse {
        public Log log;

        public byte[] claimId;

        public BigInteger err;
    }

    public static class NewSessionEventResponse {
        public Log log;

        public byte[] sessionId;

        public String claimant;

        public String challenger;
    }

    public static class ChallengerConvictedEventResponse {
        public Log log;

        public byte[] sessionId;

        public String challenger;
    }

    public static class ClaimantConvictedEventResponse {
        public Log log;

        public byte[] sessionId;

        public String claimant;
    }

    public static class QueryMerkleRootHashesEventResponse {
        public Log log;

        public byte[] sessionId;

        public String claimant;
    }

    public static class RespondMerkleRootHashesEventResponse {
        public Log log;

        public byte[] sessionId;

        public String challenger;

        public List<byte[]> blockHashes;
    }

    public static class QueryBlockHeaderEventResponse {
        public Log log;

        public byte[] sessionId;

        public String claimant;

        public byte[] blockHash;
    }

    public static class RespondBlockHeaderEventResponse {
        public Log log;

        public byte[] sessionId;

        public String challenger;

        public byte[] scryptBlockHash;

        public byte[] blockHeader;
    }

    public static class SessionErrorEventResponse {
        public Log log;

        public byte[] sessionId;

        public BigInteger err;
    }

    public static class DepositMadeEventResponse {
        public Log log;

        public String who;

        public BigInteger amount;
    }

    public static class DepositWithdrawnEventResponse {
        public Log log;

        public String who;

        public BigInteger amount;
    }
}
