package org.dogethereum.agents.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple12;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.3.1.
 */
public class DogeClaimManager extends Contract {
    private static final String BINARY = "0x60806040526001805560006003553480156200001a57600080fd5b5060405160c0806200595a83398101604090815281516020830151918301516060840151608085015160a0909501516009805494969394929392879186918691869185919060ff191660018360028111156200007257fe5b021790555060049290925560055560065550600b8054600160a060020a031916600160a060020a039690961695909517909455505050600c555061589e80620000bc6000396000f3006080604052600436106102205763ffffffff60e060020a6000350416626622a4811461022b57806301c17ec71461024b578063032e5587146102ae578063040aa57a14610316578063089845e1146103455780630ac0d9c9146103a35780630d5f5d69146103bb5780630f2c63ff146103d357806313be4f9e146103ee57806318b011de146104065780631defb7651461042d5780631fc8ad6f1461045e57806327b425a61461047657806329118a9b1461048b5780632a02fa00146104af578063312f6307146104c457806333289a46146104d95780633352f1a4146104f157806340732c891461050957806341b3d1851461051157806343207e63146105265780635292a5901461053e57806355e4286b1461055657806357872488146105875780636beb72621461059c5780636c8bb739146105b157806371a8c18a146105e557806375988c30146105fd578063795ea18e1461061b5780637dbd2832146106335780638e20eb10146106d757806399b32f3a146107075780639c57588f1461071f5780639e30ce2d14610743578063a6c07c961461075b578063a8b4633f14610773578063bf0e1edb1461078b578063c3d3290f146107a3578063c44205e3146107bb578063d1daeede146107d3578063dac1d764146107fd578063db1ee90314610815578063e1254fba1461082d578063e1bafb911461084e578063eff0f5921461086f578063f1afcfa6146108d6578063fc7e286d146108eb575b61022861090c565b50005b34801561023757600080fd5b5061024960043560243560443561092d565b005b34801561025757600080fd5b50604080516020601f6064356004818101359283018490048402850184019095528184526102499480359460248035956044359536956084949301918190840183828082843750949750610a1c9650505050505050565b3480156102ba57600080fd5b506102c6600435610bfd565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156103025781810151838201526020016102ea565b505050509050019250505060405180910390f35b34801561032257600080fd5b50610331600435602435610c70565b604080519115158252519081900360200190f35b34801561035157600080fd5b50604080516020600460443581810135838102808601850190965280855261024995833595602480359636969560649593949201929182918501908490808284375094975061117d9650505050505050565b3480156103af57600080fd5b506103316004356112bc565b3480156103c757600080fd5b506103316004356113a7565b3480156103df57600080fd5b506102496004356024356113bf565b3480156103fa57600080fd5b506103316004356114a5565b34801561041257600080fd5b5061041b6119f2565b60408051918252519081900360200190f35b34801561043957600080fd5b506104426119f8565b60408051600160a060020a039092168252519081900360200190f35b34801561046a57600080fd5b506102c6600435611a0c565b34801561048257600080fd5b5061041b611a72565b34801561049757600080fd5b5061041b600435600160a060020a0360243516611a78565b3480156104bb57600080fd5b50610442611b92565b3480156104d057600080fd5b5061041b611ba1565b3480156104e557600080fd5b5061041b600435611ba7565b3480156104fd57600080fd5b50610331600435611c53565b61041b61090c565b34801561051d57600080fd5b5061041b612299565b34801561053257600080fd5b5061041b60043561229f565b34801561054a57600080fd5b506102496004356122bc565b34801561056257600080fd5b5061056e6004356122e8565b6040805192835260208301919091528051918290030190f35b34801561059357600080fd5b5061041b61265c565b3480156105a857600080fd5b5061041b612662565b3480156105bd57600080fd5b5061024960048035906024803591604435918201910135600160a060020a0360643516612668565b3480156105f157600080fd5b5061033160043561285e565b34801561060957600080fd5b506102496004356024356044356128b0565b34801561062757600080fd5b5061041b60043561294c565b34801561063f57600080fd5b5061064b600435612a8a565b604080518d8152602081018d9052600160a060020a03808d1692820192909252908a1660608201526080810189905260a0810188905260c0810187905260e08101869052610100810185905261012081018490526101408101839052610160810182600b8111156106b857fe5b60ff1681526020019c5050505050505050505050505060405180910390f35b3480156106e357600080fd5b5061056e60043560243560443560643560843563ffffffff60a4351660c435612afa565b34801561071357600080fd5b50610331600435612ed8565b34801561072b57600080fd5b5061041b600435600160a060020a0360243516612f28565b34801561074f57600080fd5b5061056e600435612f54565b34801561076757600080fd5b50610249600435612f6d565b34801561077f57600080fd5b50610331600435612fe6565b34801561079757600080fd5b5061041b6004356130d0565b3480156107af57600080fd5b5061041b6004356130e5565b3480156107c757600080fd5b506103316004356130fa565b3480156107df57600080fd5b5061041b600435600160a060020a0360243581169060443516613117565b34801561080957600080fd5b5061033160043561329b565b34801561082157600080fd5b506102496004356132b9565b34801561083957600080fd5b5061041b600160a060020a03600435166132e1565b34801561085a57600080fd5b50610249600160a060020a03600435166132fc565b34801561087b57600080fd5b50610887600435613362565b60408051988952600160a060020a0390971660208901528787019590955260608701939093526080860191909152151560a0850152151560c0840152151560e083015251908190036101000190f35b3480156108e257600080fd5b5061041b6133b7565b3480156108f757600080fd5b5061041b600160a060020a03600435166133bd565b600061091833346133cf565b50336000908152602081905260409020545b90565b60008281526002602052604081206003015481908490600160a060020a0316331461095757600080fd5b600085815260026020526040902092506109718385613444565b915081156109a75760408051868152602081018490528151600080516020615833833981519152929181900390910190a1610a14565b60078301805460010190819055426004850155600684015560028301546040805188815260208101889052600160a060020a039092168282015260608201869052517fc32d73f54fbafb3a4f05d1f05fa0d120659da2f8494eee5a94442fcda572f4159181900360800190a15b505050505050565b60008381526002602081905260408220015481906060908690600160a060020a03163314610a4957600080fd5b60008781526002602052604090209350610a65848888886135b6565b90935091508215610a9e5760408051888152602081018590528151600080516020615833833981519152929181900390910190a1610bf3565b6007840180546001019081905542600486015560058501556003840154604080518a815260208082018b9052600160a060020a039093169181018290526060810189905260c06080820181815289519183019190915288517f39eb553cd1a51fa2226da9b6bc983cf6c2d87c588236014a137e080b22fc2036948d948d9490938d938d938b93929160a084019160e08501919087019080838360005b83811015610b52578181015183820152602001610b3a565b50505050905090810190601f168015610b7f5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015610bb2578181015183820152602001610b9a565b50505050905090810190601f168015610bdf5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390a15b5050505050505050565b6000818152600a60209081526040918290206003810180548451818502810185019095528085526060949293830182828015610c6257602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610c44575b505050505091505b50919050565b6000818152600a60205260408120819083908290815b6040805161012081018252835481526001840154600160a060020a0316602080830191909152600285015482840152600385018054845181840281018401909552808552610d629487936060860193919290830182828015610d1157602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610cf3575b5050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a0909101526137a3565b1515610d9b576040805185815261c3a060208201528151600080516020615853833981519152929181900390910190a160009550611172565b600b546040805160e160020a6365702c0f028152600481018790529051600160a060020a039092169163cae0581e916024808201926020929091908290030181600087803b158015610dec57600080fd5b505af1158015610e00573d6000803e3d6000fd5b505050506040513d6020811015610e1657600080fd5b505192506003836005811115610e2857fe5b14610e60576040805185815261c36460208201528151600080516020615853833981519152929181900390910190a160009550611172565b83881415610e6d57610f09565b600b546040805160e160020a632af00c67028152600481018790529051600160a060020a03909216916355e018ce916024808201926020929091908290030181600087803b158015610ebe57600080fd5b505af1158015610ed2573d6000803e3d6000fd5b505050506040513d6020811015610ee857600080fd5b50516000818152600a60205260409020600196909601959094509150610c86565b600c54851015610f46576040805185815261c3dc60208201528151600080516020615853833981519152929181900390910190a160009550611172565b600b546040805160e160020a632af00c67028152600481018b90529051600160a060020a03909216916355e018ce916024808201926020929091908290030181600087803b158015610f9757600080fd5b505af1158015610fab573d6000803e3d6000fd5b505050506040513d6020811015610fc157600080fd5b5051600b546040805160e160020a6365702c0f028152600481018490529051929350600160a060020a039091169163cae0581e916024808201926020929091908290030181600087803b15801561101757600080fd5b505af115801561102b573d6000803e3d6000fd5b505050506040513d602081101561104157600080fd5b50519250600483600581111561105357fe5b141561116d57600b54604080517f95b45ee7000000000000000000000000000000000000000000000000000000008152600481018b90523360248201528151600160a060020a03909316926395b45ee7926044808401939192918290030181600087803b1580156110c357600080fd5b505af11580156110d7573d6000803e3d6000fd5b505050506040513d60408110156110ed57600080fd5b505060018201548254604080518b8152600160a060020a03909316602084015282810191909152517f1dc10db1a6fc712a92bf5ec914a579635a58ab4afbef2890cc90404d6753cef89181900360600190a161114988836137b5565b6001820154611162908990600160a060020a0316613845565b505060019550611172565b600095505b505050505092915050565b60008281526002602081905260408220015481908490600160a060020a031633146111a757600080fd5b600085815260026020526040902092506111c183856139e6565b915081156111f75760408051868152602081018490528151600080516020615833833981519152929181900390910190a1610a14565b6007830180546001019081905542600485015560058401556003830154604080518881526020808201899052600160a060020a0390931691810182905260806060820181815288519183019190915287517fbca3431b78418303a430f83db37413835aa6c34f2bc94b5cb93f3c1a56384e69948b948b9490938b939192909160a0840191808601910280838360005b8381101561129e578181015183820152602001611286565b505050509050019550505050505060405180910390a1505050505050565b6000818152600a60209081526040808320815161012081018352815481526001820154600160a060020a0316818501526002820154818401526003820180548451818702810187019095528085526113a1959294606086019390929190830182828015610d1157602002820191906000526020600020908154600160a060020a03168152600190910190602001808311610cf3575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a0909101526137a3565b92915050565b6000908152600a602052604090206008015460ff1690565b60008181526002602052604081206003015481908390600160a060020a031633146113e957600080fd5b6000848152600260205260409020925061140283613bb4565b915081156114385760408051858152602081018490528151600080516020615833833981519152929181900390910190a161149e565b60078301805460010190819055426004850155600684015560028301546040805187815260208101879052600160a060020a0390921682820152517f0817bf136ff95abb2d41d10a9fa5ff6652ff71c13e1b46717fae65db16423c9b9181900360600190a15b5050505050565b6000818152600a60209081526040808320815161012081018352815481526001820154600160a060020a03168185015260028201548184015260038201805484518187028101870190955280855292948694859461158f9493889360608601939290830182828015610d1157602002820191906000526020600020908154600160a060020a03168152600190910190602001808311610cf3575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a0909101526137a3565b15156115c8576040805182815261c3a060208201528151600080516020615853833981519152929181900390910190a1600093506119ea565b600b54604080517f2e400191000000000000000000000000000000000000000000000000000000008152600481018890529051600160a060020a0390921691632e400191916024808201926020929091908290030181600087803b15801561162f57600080fd5b505af1158015611643573d6000803e3d6000fd5b505050506040513d602081101561165957600080fd5b5051600b54604080517ff06d520d000000000000000000000000000000000000000000000000000000008152905163ffffffff9093169450600160a060020a039091169163f06d520d916004808201926020929091908290030181600087803b1580156116c557600080fd5b505af11580156116d9573d6000803e3d6000fd5b505050506040513d60208110156116ef57600080fd5b5051600c54600b54604080517f2e40019100000000000000000000000000000000000000000000000000000000815260048101859052905193945091850192600160a060020a0390911691632e4001919160248083019260209291908290030181600087803b15801561176157600080fd5b505af1158015611775573d6000803e3d6000fd5b505050506040513d602081101561178b57600080fd5b505163ffffffff1610156117cc576040805182815261c3dc60208201528151600080516020615853833981519152929181900390910190a1600093506119ea565b600b54604080517f2e4001910000000000000000000000000000000000000000000000000000000081526004810184905290518492600160a060020a031691632e4001919160248083019260209291908290030181600087803b15801561183257600080fd5b505af1158015611846573d6000803e3d6000fd5b505050506040513d602081101561185c57600080fd5b505163ffffffff1611156118ee57600b546040805160e160020a632af00c67028152600481018490529051600160a060020a03909216916355e018ce916024808201926020929091908290030181600087803b1580156118bb57600080fd5b505af11580156118cf573d6000803e3d6000fd5b505050506040513d60208110156118e557600080fd5b505190506117cc565b8085146119e557600b54604080517f74205786000000000000000000000000000000000000000000000000000000008152600481018890523360248201528151600160a060020a03909316926374205786926044808401939192918290030181600087803b15801561195f57600080fd5b505af1158015611973573d6000803e3d6000fd5b505050506040513d604081101561198957600080fd5b50506001830154835460408051888152600160a060020a03909316602084015282810191909152517f68e40e41ba461c4741bd7c670fcb849251f74cd1a4a945ced513e85ceaf4b8eb9181900360600190a16119e58584613c41565b600093505b505050919050565b60065481565b6009546101009004600160a060020a031681565b600081815260026020908152604091829020600801805483518184028101840190945280845260609392830182828015611a6657602002820191906000526020600020905b81548152600190910190602001808311611a51575b50505050509050919050565b600c5481565b6000828152600a60209081526040808320815161012081018352815481526001820154600160a060020a0316818501526002820154818401526003820180548451818702810187019095528085529294611b62949293869360608601939092909190830182828015610d1157602002820191906000526020600020908154600160a060020a03168152600190910190602001808311610cf3575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a0909101526137a3565b1515611b6d57600080fd5b600160a060020a038316600090815260048201602052604090205491505b5092915050565b600b54600160a060020a031681565b60035481565b33600090815260208190526040812054821115611bc357600080fd5b33600081815260208190526040808220805486900390555184156108fc0291859190818181858888f19350505050158015611c02573d6000803e3d6000fd5b50604080513381526020810184905281517f4482101800a5c2e900f4156e57e05e19ffd7b366cde579553d723fd3abb2180e929181900390910190a150503360009081526020819052604090205490565b6000818152600a60209081526040808320815161012081018352815481526001820154600160a060020a0316818501526002820154818401526003820180548451818702810187019095528085529294869485948594611d4194909389936060860193909291830182828015610d1157602002820191906000526020600020908154600160a060020a03168152600190910190602001808311610cf3575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a0909101526137a3565b1515611d7a576040805187815261c3a060208201528151600080516020615853833981519152929181900390910190a160009450612290565b600884015460ff1615611dba576040805187815261c3aa60208201528151600080516020615853833981519152929181900390910190a160009450612290565b600884015462010000900460ff1615611ed95760088401805461ff001916610100179055600b548454604080517f7420578600000000000000000000000000000000000000000000000000000000815260048101929092523360248301528051600160a060020a039093169263742057869260448082019392918290030181600087803b158015611e4a57600080fd5b505af1158015611e5e573d6000803e3d6000fd5b505050506040513d6040811015611e7457600080fd5b50506001840154845460408051898152600160a060020a03909316602084015282810191909152517f68e40e41ba461c4741bd7c670fcb849251f74cd1a4a945ced513e85ceaf4b8eb9181900360600190a1611ed08685613c41565b60009450612290565b60078401544211611f17576040805187815261c36e60208201528151600080516020615853833981519152929181900390910190a160009450612290565b600384015460058501541015611f5a576040805187815261c3aa60208201528151600080516020615853833981519152929181900390910190a160009450612290565b60088401805461ff001916610100179055600384015460009350151561209457600b5484546040805160e160020a632af00c67028152600481019290925251600160a060020a03909216916355e018ce916024808201926020929091908290030181600087803b158015611fcd57600080fd5b505af1158015611fe1573d6000803e3d6000fd5b505050506040513d6020811015611ff757600080fd5b5051600b546040805160e160020a6365702c0f028152600481018490529051929450600160a060020a039091169163cae0581e916024808201926020929091908290030181600087803b15801561204d57600080fd5b505af1158015612061573d6000803e3d6000fd5b505050506040513d602081101561207757600080fd5b50519050600481600581111561208957fe5b141561209457600192505b82156121a257600b548454604080517f95b45ee700000000000000000000000000000000000000000000000000000000815260048101929092523360248301528051600160a060020a03909316926395b45ee79260448082019392918290030181600087803b15801561210657600080fd5b505af115801561211a573d6000803e3d6000fd5b505050506040513d604081101561213057600080fd5b5050600184015461214b908790600160a060020a0316613845565b50506001840154845460408051898152600160a060020a03909316602084015282810191909152517f1dc10db1a6fc712a92bf5ec914a579635a58ab4afbef2890cc90404d6753cef89181900360600190a161228b565b600b548454604080517f27426f7500000000000000000000000000000000000000000000000000000000815260048101929092523360248301528051600160a060020a03909316926327426f759260448082019392918290030181600087803b15801561220e57600080fd5b505af1158015612222573d6000803e3d6000fd5b505050506040513d604081101561223857600080fd5b50506001840154845460408051898152600160a060020a03909316602084015282810191909152517f95402abbd8f04d8247a69af9fe602350f36a6e95de1e80b2d0e0e9acba2c856e9181900360600190a15b600194505b50505050919050565b60015481565b6000908152600a6020526040902060058101546003909101540390565b6009546101009004600160a060020a03163381146122d957600080fd5b6122e4826001613dfa565b5050565b600b546000908190819081908190600160a060020a0316151561230a57600080fd5b6000868152600a6020908152604091829020825161012081018452815481526001820154600160a060020a0316818401526002820154818501526003820180548551818602810186019096528086528b98509296506123f6949193879360608601939291830182828015610d1157602002820191906000526020600020908154600160a060020a03168152600190910190602001808311610cf3575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a0909101526137a3565b1515612433576040805184815261c3a060208201528151600080516020615853833981519152929181900390910190a161c3a08394509450612654565b6008820154610100900460ff161561247c576040805184815261c3b460208201528151600080516020615853833981519152929181900390910190a161c3b48394509450612654565b6001543360009081526020819052604090205410156124cc576040805184815261c38c60208201528151600080516020615853833981519152929181900390910190a161c38c8394509450612654565b600b54604080517fc1f67ab3000000000000000000000000000000000000000000000000000000008152600481018990523360248201528151600160a060020a039093169263c1f67ab3926044808401939192918290030181600087803b15801561253657600080fd5b505af115801561254a573d6000803e3d6000fd5b505050506040513d604081101561256057600080fd5b50519050801561259f5760408051848152602081018390528151600080516020615853833981519152929181900390910190a193506000925083612654565b6125ac8333600154613f26565b50905080156125b757fe5b60065442016007830155600382018054600181018255600091825260209182902001805473ffffffffffffffffffffffffffffffffffffffff191633908117909155604080518681529283019190915280517f4e4ec862758a1fd984d86a07836cbea0bb7aec069cc98cd7a543266b270e42e49281900390910190a1600882015460ff16151561264c5761264a836140fd565b505b600083945094505b505050915091565b60055481565b60075481565b600954600090819081906101009004600160a060020a031633811461268c57600080fd5b6050861461269957600080fd5b6000898152600860209081526040808320805484526002909252909120600c810154919550935089146126cb57600080fd5b6007600d84015460ff16600b8111156126e057fe5b146126ea57600080fd5b6002830154600160a060020a0386811691161461270657600080fd5b60018401546000908152600b8401602052604090209150600260018301546c01000000000000000000000000900460ff16600481111561274257fe5b1461274c57600080fd5b6003820154881461275c57600080fd5b600282810180546040805160206001841615610100026000190190931694909404601f81018390048302850183019091528084526128229392918301828280156127e75780601f106127bc576101008083540402835291602001916127e7565b820191906000526020600020905b8154815290600101906020018083116127ca57829003601f168201915b505050505088888080601f01602080910402602001604051908101604052809392919081815260200183838082843750614400945050505050565b1561282c57600080fd5b5050600d8101805460ff1916600817905560078101805460010190819055426004830155600590910155505050505050565b60008181526002602052604081206008600d82015460ff16600b81111561288157fe5b14158015612896575080600501548160060154115b80156128a9575060065481600401540142115b9392505050565b60008281526002602052604081206003015481908490600160a060020a031633146128da57600080fd5b600085815260026020526040902092506128f683878787614458565b9150811561292c5760408051868152602081018490528151600080516020615833833981519152929181900390910190a1610a14565b600783018054600101908190554260048501556006840155505050505050565b60008181526002602052604081206008600d82015460ff16600b81111561296f57fe5b14156129a9576040805184815261c36e60208201528151600080516020615833833981519152929181900390910190a161c36e9150610c6a565b600b600d82015460ff16600b8111156129be57fe5b14806129e35750806005015481600601541180156129e3575060065481600401540142115b15612a125760028101546001820154612a09918591600160a060020a0390911690614614565b60009150610c6a565b80600601548160050154118015612a30575060065481600401540142115b15612a565760038101546001820154612a09918591600160a060020a03909116906146a1565b6040805184815261c36e60208201528151600080516020615833833981519152929181900390910190a15061c36e92915050565b60026020819052600091825260409091208054600182015492820154600383015460048401546005850154600686015460078701546009880154600a890154600c8a0154600d909a0154989a99600160a060020a0398891699989097169795969495939492939192909160ff168c565b600b5460009081908190819081908190600160a060020a03161515612b1e57600080fd5b600154336000908152602081905260409020541015612b7057604080516000815261c38c60208201528151600080516020615853833981519152929181900390910190a161c38c955060009450612ec8565b426005548c011115612bb557604080516000815261c37360208201528151600080516020615853833981519152929181900390910190a161c373955060009450612ec8565b600b60009054906101000a9004600160a060020a0316600160a060020a031663b1b595288e8e8e8e8e8e8e336040518963ffffffff1660e060020a02815260040180896000191660001916815260200188815260200187815260200186815260200185600019166000191681526020018463ffffffff1663ffffffff168152602001836000191660001916815260200182600160a060020a0316600160a060020a03168152602001985050505050505050506040805180830381600087803b158015612c8057600080fd5b505af1158015612c94573d6000803e3d6000fd5b505050506040513d6040811015612caa57600080fd5b50805160209091015190945092508315612cf25760408051848152602081018690528151600080516020615853833981519152929181900390910190a1838395509550612ec8565b50506000818152600a6020908152604091829020825161012081018452815481526001820154600160a060020a03168184015260028201548185015260038201805485518186028101860190965280865286959394612ddf94869360608601939192909190830182828015610d1157602002820191906000526020600020908154600160a060020a03168152600190910190602001808311610cf3575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a0909101526137a3565b15612e1b576040805183815261c3a060208201528151600080516020615853833981519152929181900390910190a161c3a08295509550612ec8565b8281556001808201805473ffffffffffffffffffffffffffffffffffffffff1916339081179091556000600584015560088301805462ffffff1916905542600284018190556006540160078401559054612e76918491613f26565b5093508315612e8157fe5b6040805183815233602082015280820185905290517fd861ddd0a177fc2f7e05d851f42663399d0759ad0e74e2ab7b79570f0979e2929181900360600190a1600083955095505b5050505097509795505050505050565b60008181526002602052604081206008600d82015460ff16600b811115612efb57fe5b141580156128965750806006015481600501541180156128a9575060065460049091015401421192915050565b6000828152600a60209081526040808320600160a060020a038516845260060190915290205492915050565b6008602052600090815260409020805460019091015482565b600081815260026020526040812090612f86828461472c565b90508060011415612fb75760038201546001830154612fb2918591600160a060020a03909116906146a1565b612fe1565b8060021415612fe15760028201546001830154612fe1918591600160a060020a0390911690614614565b505050565b6000818152600a602052604081206002600b546040805160e160020a6365702c0f028152600481018790529051600160a060020a039092169163cae0581e916024808201926020929091908290030181600087803b15801561304757600080fd5b505af115801561305b573d6000803e3d6000fd5b505050506040513d602081101561307157600080fd5b5051600581111561307e57fe5b1480156130965750600881015462010000900460ff16155b80156130a75750600881015460ff16155b80156130b65750806007015442115b80156128a957506003810154600590910154101592915050565b6000908152600a602052604090206007015490565b6000908152600a602052604090206002015490565b6000908152600a6020526040902060080154610100900460ff1690565b600354604080516020808201879052338284015260608083019490945282518083039094018452608090910191829052825160009384938493919290918291908401908083835b6020831061317d5780518252601f19909201916020918201910161315e565b51815160001960209485036101000a019081169019919091161790526040805194909201849003909320600081815260029485905291822081815560018181018e90559481018054600160a060020a03808f1673ffffffffffffffffffffffffffffffffffffffff1992831617909255600383018054928e169290911691909117905542600482015560068101929092556005820184905560078201849055600d8201805491985091965092945092505060ff1916828002179055506003805460010190556040805187815260208101849052600160a060020a03808816828401528616606082015290517f403956bdc140717d54d4573786b4e9e773ef2e6e325e2c061476eb47711770de9181900360800190a150949350505050565b6000908152600a602052604090206008015462010000900460ff1690565b6009546101009004600160a060020a03163381146132d657600080fd5b6122e4826000613dfa565b600160a060020a031660009081526020819052604090205490565b6009546101009004600160a060020a03161580156133225750600160a060020a03811615155b151561332d57600080fd5b60098054600160a060020a039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b600a602052600090815260409020805460018201546002830154600584015460078501546008909501549394600160a060020a03909316939192909160ff808216916101008104821691620100009091041688565b60045481565b60006020819052908152604090205481565b600160a060020a03821660009081526020819052604090208054820190819055303110156133fc57600080fd5b60408051600160a060020a03841681526020810183905281517fd15c9547ea5c06670c0010ce19bc32d54682a4b3801ece7f3ab0c3f17106b4bb929181900390910190a15050565b6000806001546134533361482b565b10156134635761c38c9150611b8b565b6006600d85015460ff16600b81111561347857fe5b14156134875761348784614836565b60098401541580156134ab57506003600d85015460ff16600b8111156134a957fe5b145b806134d75750600084600901541180156134d757506005600d85015460ff16600b8111156134d557fe5b145b156135ab5760088401546009850154106134f057600080fd5b600080848152600b860160205260409020600101546c01000000000000000000000000900460ff16600481111561352357fe5b1461352d57600080fd5b61353e846001015433600154613f26565b509050801561354f57809150611b8b565b60098401805460019081019091556000848152600b86016020526040812090910180546c010000000000000000000000006cff00000000000000000000000019909116179055600d8501805460ff191660041790559150611b8b565b5061c3649392505050565b600060606000806000606060006001546135cf3361482b565b10156135f5576040805160008082526020820190925261c38c915b509097509550613795565b6004600d8c015460ff16600b81111561360a57fe5b141561377e5761361d886000605061489d565b6000818152600b8d016020526040902090955093506001808501546c01000000000000000000000000900460ff16600481111561365657fe5b14613674576040805160008082526020820190925261c364916135ea565b6136828b600101548961495e565b15156136a1576040805160008082526020820190925261c373916135ea565b6136ac848a8a6149df565b909350915082156136ce576040805160008082526020820190925284916135ea565b600184018054600291906cff00000000000000000000000019166c0100000000000000000000000083021790555061370d8b6001015433600154613f26565b509250821561372d576040805160008082526020820190925284916135ea565b600384015460028c015461374d918c918890600160a060020a0316614bdd565b600a8c0180546001019055600d8c01805460ff19166006179055600c8c018190556000975091955085919050613795565b60408051600081526020810190915261c364975095505b505050505094509492505050565b60200151600160a060020a0316151590565b600080805b600384015481101561382357600384018054829081106137d657fe5b6000918252602080832090910154600160a060020a0390811680845260048801909252604080842080549085905560018981015490931685529320805484019055909450909250016137ba565b600184015461383c908690600160a060020a0316613845565b50505050505050565b6000828152600a60209081526040808320815161012081018352815481526001820154600160a060020a03168185015260028201548184015260038201805484518187028101870190955280855286959394869461392e94938793606086019392830182828015610d1157602002820191906000526020600020908154600160a060020a03168152600190910190602001808311610cf3575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a0909101526137a3565b15156139425761c3a09350600092506139dd565b6008820154610100900460ff1615156139635761c3649350600092506139dd565b50600160a060020a0384166000818152600483016020908152604080832080549084905583835292819020805484019055805189815291820193909352808301829052915190917faafcd902e5217659ba924addbacae78ebf6a7c77409df0d0065b9ebca0129873919081900360600190a1600081935093505b50509250929050565b6000806000806001546139f83361482b565b1015613a085761c38c9350613bab565b600886015415613a1757600080fd5b6002600d87015460ff16600b811115613a2c57fe5b1415613ba557613a3f8660010154614cbc565b5050505095505050509250846001865103815181101515613a5c57fe5b602090810290910101518214613a765761c3e69350613bab565b6040517ff9b5d7c000000000000000000000000000000000000000000000000000000000815260206004820181815287516024840152875173__DogeTx________________________________9363f9b5d7c0938a9392839260440191808601910280838360005b83811015613af6578181015183820152602001613ade565b505050509050019250505060206040518083038186803b158015613b1957600080fd5b505af4158015613b2d573d6000803e3d6000fd5b505050506040513d6020811015613b4357600080fd5b50518314613b555761c3789350613bab565b613b66866001015433600154613f26565b5090508015613b7757809350613bab565b8451613b8c906008880190602088019061573c565b50600d8601805460ff1916600317905560009350613bab565b61c36493505b50505092915050565b600080600154613bc33361482b565b1015613bd35761c38c9150610c6a565b6001600d84015460ff16600b811115613be857fe5b1415613c3757600d8301805460ff19166002179055600383015433600160a060020a0390911614613c1557fe5b613c26836001015433600154613f26565b5090508015612a0957809150610c6a565b5061c36492915050565b6001810154600160a060020a03166000908152600482016020526040812080549082905590808080805b8660050154841015613cc4578660040160008860030186815481101515613c8e57fe5b6000918252602080832090910154600160a060020a03168352820192909252604001902054949094019360019390930192613c6b565b600093505b8660050154841015613d4f5760038701805485908110613ce557fe5b6000918252602080832090910154600160a060020a031680835260048a0190915260409091205490935085908702811515613d1c57fe5b600160a060020a038516600090815260048a01602052604090208054929091049182019055600194909401939150613cc9565b600093505b6003870154841015610bf35760038701805485908110613d7057fe5b6000918252602080832090910154600160a060020a031680835260048a01808352604080852080548686528287208054820190559285529490945583518c815292830182905282840181905292519095509192507faafcd902e5217659ba924addbacae78ebf6a7c77409df0d0065b9ebca0129873919081900360600190a1836001019350613d54565b60008281526008602090815260408083208054845260029092528220600c810154919290918514613e2a57600080fd5b6008600d83015460ff16600b811115613e3f57fe5b14613e4957600080fd5b5060018201546000908152600b820160205260409020600260018201546c01000000000000000000000000900460ff166004811115613e8457fe5b14613e8e57600080fd5b613e9d82846001015486614de1565b4260048301556001808301548454600380850154938701549086015460408051948552602085019390935283830194909452606083015260808201889052600160a060020a0390921660a082015285151560c082015290517f13a771cb91faa8e8a02bf31e73e4f740eec154e07a621921f8032b2f2283b6e89181900360e00190a15050505050565b6000838152600a60209081526040808320815161012081018352815481526001820154600160a060020a0316818501526002820154818401526003820180548451818702810187019095528085528695939461400d94869360608601939091830182828015610d1157602002820191906000526020600020908154600160a060020a03168152600190910190602001808311610cf3575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a0909101526137a3565b15156140215761c3a09250600091506140f4565b600160a060020a03851660009081526020819052604090205484111561406657600160a060020a03851660009081526020819052604090205461c38c935091506140f4565b600160a060020a0385166000818152602081815260408083208054899003905560048501825291829020805488019055815189815290810192909252818101869052517ff49b89a01f8b7e79e855801f268b5df3d7c88c4bc61293934fc1f9c52ddfeb319181900360600190a1600160a060020a038516600090815260048201602052604081205490935091505b50935093915050565b6000818152600a60209081526040808320815161012081018352815481526001820154600160a060020a031681850152600282015481840152600382018054845181870281018701909552808552929486946141e59487936060860193909190830182828015610d1157602002820191906000526020600020908154600160a060020a03168152600190910190602001808311610cf3575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a0909101526137a3565b151561421e576040805185815261c3a060208201528151600080516020615853833981519152929181900390910190a1600092506143f9565b6008820154610100900460ff16806142405750600882015462010000900460ff165b15614278576040805185815261c3b460208201528151600080516020615853833981519152929181900390910190a1600092506143f9565b600882015460ff16156142b8576040805185815261c3aa60208201528151600080516020615853833981519152929181900390910190a1600092506143f9565b6003820154600583015410156143f4576001820154600583015460038401805461430d938893600160a060020a03909116929181106142f357fe5b600091825260209091200154600160a060020a0316613117565b90508082600601600084600301856005015481548110151561432b57fe5b6000918252602080832090910154600160a060020a039081168452908301939093526040909101902091909155600183015460058401546003850180547f6d3b2a0e9b0833bfb42336839231773ea07aed87bb2fdee34c960696ea11f849948994169290811061439757fe5b6000918252602091829020015460408051948552600160a060020a0393841692850192909252919091168282015260608201849052519081900360800190a160088201805460ff1916600190811790915560058301805490910190555b600192505b5050919050565b602082810151908201516000919080821461441f578082039250614450565b50506040838101519083015180821461443c578082039250614450565b605085015191506050840151905080820392505b505092915050565b60008060006001546144693361482b565b10156144795761c38c925061460a565b6006600d88015460ff16600b81111561448e57fe5b1415614604576000848152600b8801602052604090209150600260018301546c01000000000000000000000000900460ff1660048111156144cb57fe5b1415614604576144e2876001015433600154613f26565b50905080156144f35780925061460a565b6003820154600c880154600289810154604080518b8152602081018b905290810185905260808101849052600160a060020a0390911660a0820181905260c06060830181815284890180546001811615610100026000190116959095049184018290527fa0a243586b0bd46802910cb3689c5f90d34de99ee8c612f60614bc120f7ebfe6968d968d9691959194909390929060e0830190869080156145d95780601f106145ae576101008083540402835291602001916145d9565b820191906000526020600020905b8154815290600101906020018083116145bc57829003601f168201915b505097505050505050505060405180910390a1600d8701805460ff191660071790556000925061460a565b61c36492505b5050949350505050565b6000838152600260208190526040909120600381015491810154909161464a9186918591600160a060020a039182169116614e96565b61465384615041565b6040805183815260208101869052600160a060020a0385168183015290517faab6a8f22c7ab5131c1cdc1c0000e123efd38efadfef092cef78be507d16542e9181900360600190a150505050565b60008381526002602081905260409091209081015460038201546146d59186918591600160a060020a039081169116614e96565b6146de84615041565b6040805183815260208101869052600160a060020a0385168183015290517fda9b5fdafb0f67d811425d3f095917a63329d60d3db3aa456b5247a8f3b88b119181900360600190a150505050565b6000806006600d85015460ff16600b81111561474457fe5b14156147535761475384614836565b6009600d85015460ff16600b81111561476857fe5b14156147fd57614777846150d5565b905080156147b15760408051848152602081018390528151600080516020615833833981519152929181900390910190a160029150611b8b565b6147ba8461523d565b905080156147f45760408051848152602081018390528151600080516020615833833981519152929181900390910190a160029150611b8b565b60019150611b8b565b600b600d85015460ff16600b81111561481257fe5b14156148215760029150611b8b565b5060009392505050565b60006113a1826132e1565b600c8101546000908190151561484b57600080fd5b5050600c81015460008181526008602052604090208054151561486d57600080fd5b61487d8382600101546001614de1565b506000908152600860205260408120818155600101819055600c90910155565b600061495660026148af868686615618565b6040805160208082019390935281518082038401815290820191829052805190928291908401908083835b602083106148f95780518252601f1990920191602091820191016148da565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af115801561493a573d6000803e3d6000fd5b5050506040513d602081101561494f57600080fd5b505161563f565b949350505050565b600080600061496e84600061566a565b63ffffffff16915061497f85614cbc565b50506004549497509395508694505050831515915061499c905057fe5b04600454838115156149aa57fe5b04111580156149d657506001600454828115156149c357fe5b0403600454838115156149d257fe5b0410155b95945050505050565b600060606000806000606073__DogeTx________________________________63fa7199a18860008a518c600190046040518563ffffffff1660e060020a0281526004018080602001858152602001848152602001838152602001828103825286818151815260200191508051906020019080838360005b83811015614a6f578181015183820152602001614a57565b50505050905090810190601f168015614a9c5780820380516001836020036101000a031916815260200191505b509550505050505060806040518083038186803b158015614abc57600080fd5b505af4158015614ad0573d6000803e3d6000fd5b505050506040513d6080811015614ae657600080fd5b508051604082015160609092015190955090935091508315614b1e576040805160008152602081019091529395509293508492614bd1565b81614b3557614b30876000605061569e565b614b45565b614b45876050895103895161569e565b9050614b5287600061566a565b60018a01805467ffffffffffffffff191663ffffffff92909216919091179055614b7d8760006156f5565b8960010160086101000a81548163ffffffff021916908363ffffffff160217905550614baa876000615729565b8955600389018390558051614bc89060028b01906020840190615789565b50600081955095505b50505050935093915050565b60078054600101908190556040805160208082018790526c01000000000000000000000000600160a060020a038616028284015260548083019490945282518083039094018452607490910191829052825160009384939092909182918401908083835b60208310614c605780518252601f199092019160209182019101614c41565b51815160001960209485036101000a0190811690199091161790526040805194909201849003842084830183529b8452838101998a5260008c815260089091522091518255509551600190960195909555509495945050505050565b600b54604080517f6e5b707100000000000000000000000000000000000000000000000000000000815260048101849052905160009283928392839283928392839283928392600160a060020a0390921691636e5b7071916024808201926101209290919082900301818787803b158015614d3657600080fd5b505af1158015614d4a573d6000803e3d6000fd5b505050506040513d610120811015614d6157600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291905050509850985098509850985098509850985098509193959799909294969850565b6000828152600b8401602052604090208115614e57576001810180546cff00000000000000000000000019166c030000000000000000000000001790556008840154600a8501541415614e4257600d8401805460ff19166009179055614e52565b600d8401805460ff191660051790555b614e90565b6001810180546c040000000000000000000000006cff00000000000000000000000019909116179055600d8401805460ff1916600b1790555b50505050565b6000838152600a6020908152604091829020825161012081018452815481526001820154600160a060020a0316818401526002820154818501526003820180548551818602810186019096528086529294614f7e949293869360608601939190830182828015610d1157602002820191906000526020600020908154600160a060020a03168152600190910190602001808311610cf3575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a0909101526137a3565b1515614f8957600080fd5b60088101805460ff191690556001810154600160a060020a0383811691161415614fc55760088101805462ff0000191662010000179055614ff1565b6001810154600160a060020a0384811691161415614fec57614fe6846140fd565b50614ff1565b600080fd5b60408051868152600160a060020a03808616602083015284168183015290517f1a6e323d263407d13632ff217899ae9353a07223d311df6db8d80cad6a57c2d59181900360600190a15050505050565b6000818152600260208190526040822082815560018101839055908101805473ffffffffffffffffffffffffffffffffffffffff19908116909155600382018054909116905560048101829055600581018290556006810182905560078101829055906150b160088301826157f7565b50600060098201819055600a8201819055600c820155600d01805460ff1916905550565b600080600080600080600087600801805490501115156150f95761c3e69550615233565b6151068760010154614cbc565b505060088e018054959c50939a5090985096509093505060001981019150811061512c57fe5b6000918252602080832090910154808352600b8a0190915260409091206001015490915067ffffffffffffffff16851461516a5761c3739550615233565b6000818152600b8801602052604090206001015463ffffffff8481166801000000000000000090920416146151a35761c3d29550615233565b6008870154600110156152075760088701805460011981019081106151c457fe5b6000918252602080832090910154808352600b8a0190915260409091206001015490915067ffffffffffffffff1684146152025761c3739550615233565b61522e565b61521082614cbc565b50949b505050888a14945061522e93505050505761c3739550615233565b600095505b5050505050919050565b600080600080600080600080600080600080600061525e8e60010154614cbc565b90919293949596975090919293949550909192939450909192935090919250905050809b50819d5050506152918a614cbc565b909192939495969750909150905050809a50819d50829b50839c50849f505050505050600094505b60088e01548510156155d05760088e018054869081106152d557fe5b906000526020600020015492508d600b016000846000191660001916815260200190815260200160002060010160089054906101000a900463ffffffff16915088600019168e600b016000856000191660001916815260200190815260200160002060000154600019161415156153505761c3829c50615607565b600260095460ff16600281111561536357fe5b1461547d57604080517f7034991b000000000000000000000000000000000000000000000000000000008152888a03600790810b900b600482015263ffffffff88166024820152905173__DogeTx________________________________91637034991b916044808301926020929190829003018186803b1580156153e757600080fd5b505af41580156153fb573d6000803e3d6000fd5b505050506040513d602081101561541157600080fd5b50519050600160095460ff16600281111561542857fe5b14801561545757506000838152600b8f016020526040902060010154607867ffffffffffffffff909116899003115b156154635750631e0fffff5b63ffffffff8281169082161461547d5761c3d29c50615607565b6000838152600b8f0160209081526040918290206001015482517f304ef8ac0000000000000000000000000000000000000000000000000000000081526801000000000000000090910463ffffffff166004820152915173__DogeTx________________________________9263304ef8ac926024808301939192829003018186803b15801561550c57600080fd5b505af4158015615520573d6000803e3d6000fd5b505050506040513d602081101561553657600080fd5b8101908080519060200190929190505050840193508298508d600b016000846000191660001916815260200190815260200160002060010160089054906101000a900463ffffffff1695508796508d600b016000846000191660001916815260200190815260200160002060010160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1697506001850194506152b9565b600260095460ff1660028111156155e357fe5b141580156155f357508b848c0114155b156156025761c3c89c50615607565b60009c505b505050505050505050505050919050565b60006040516020818486602089010160025afa151561563657600080fd5b51949350505050565b600060405160005b6020811015615662578381601f031a81830153600101615647565b505192915050565b600081604c84010151630100000081601b1a026201000082601a1a02016101008260191a02018160181a0191505092915050565b6060600060608484039150816040519080825280601f01601f1916602001820160405280156156d7578160200160208202803883390190505b5090508160208201838760208a010160045afa15156149d657600080fd5b600081605084010151630100000081601b1a026201000082601a1a02016101008260191a02018160181a0191505092915050565b818101602401516000906149568161563f565b828054828255906000526020600020908101928215615779579160200282015b82811115615779578251825560209092019160019091019061575c565b50615785929150615818565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106157ca57805160ff1916838001178555615779565b82800160010185558215615779579182015b828111156157795782518255916020019190600101906157dc565b50805460008255906000526020600020908101906158159190615818565b50565b61092a91905b80821115615785576000815560010161581e560080235326defb5d335564dd77860b0a010e19446427d3d78d155cabd064ca9c2a94bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa33a165627a7a72305820a84f51d6a3fd8969e87645e05b157ac8694cf30f4ba54610560257ad96cc29ee0029";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<>();
        _addresses.put("32001", "0x6d46496d33f0c4f39afa2e7cb1d13d1d007f36c5");
    }

    protected DogeClaimManager(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DogeClaimManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<DepositBondedEventResponse> getDepositBondedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("DepositBonded", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<DepositBondedEventResponse> responses = new ArrayList<DepositBondedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositBondedEventResponse typedResponse = new DepositBondedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<DepositBondedEventResponse> depositBondedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("DepositBonded", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, DepositBondedEventResponse>() {
            @Override
            public DepositBondedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                DepositBondedEventResponse typedResponse = new DepositBondedEventResponse();
                typedResponse.log = log;
                typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<DepositUnbondedEventResponse> getDepositUnbondedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("DepositUnbonded", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<DepositUnbondedEventResponse> responses = new ArrayList<DepositUnbondedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositUnbondedEventResponse typedResponse = new DepositUnbondedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<DepositUnbondedEventResponse> depositUnbondedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("DepositUnbonded", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, DepositUnbondedEventResponse>() {
            @Override
            public DepositUnbondedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                DepositUnbondedEventResponse typedResponse = new DepositUnbondedEventResponse();
                typedResponse.log = log;
                typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<SuperblockClaimCreatedEventResponse> getSuperblockClaimCreatedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("SuperblockClaimCreated", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<SuperblockClaimCreatedEventResponse> responses = new ArrayList<SuperblockClaimCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimCreatedEventResponse typedResponse = new SuperblockClaimCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.superblockId = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SuperblockClaimCreatedEventResponse> superblockClaimCreatedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("SuperblockClaimCreated", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, SuperblockClaimCreatedEventResponse>() {
            @Override
            public SuperblockClaimCreatedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                SuperblockClaimCreatedEventResponse typedResponse = new SuperblockClaimCreatedEventResponse();
                typedResponse.log = log;
                typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.superblockId = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<SuperblockClaimChallengedEventResponse> getSuperblockClaimChallengedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("SuperblockClaimChallenged", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<SuperblockClaimChallengedEventResponse> responses = new ArrayList<SuperblockClaimChallengedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimChallengedEventResponse typedResponse = new SuperblockClaimChallengedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SuperblockClaimChallengedEventResponse> superblockClaimChallengedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("SuperblockClaimChallenged", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, SuperblockClaimChallengedEventResponse>() {
            @Override
            public SuperblockClaimChallengedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                SuperblockClaimChallengedEventResponse typedResponse = new SuperblockClaimChallengedEventResponse();
                typedResponse.log = log;
                typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<SuperblockBattleDecidedEventResponse> getSuperblockBattleDecidedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("SuperblockBattleDecided", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<SuperblockBattleDecidedEventResponse> responses = new ArrayList<SuperblockBattleDecidedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockBattleDecidedEventResponse typedResponse = new SuperblockBattleDecidedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.winner = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.loser = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SuperblockBattleDecidedEventResponse> superblockBattleDecidedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("SuperblockBattleDecided", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, SuperblockBattleDecidedEventResponse>() {
            @Override
            public SuperblockBattleDecidedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                SuperblockBattleDecidedEventResponse typedResponse = new SuperblockBattleDecidedEventResponse();
                typedResponse.log = log;
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.winner = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.loser = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<SuperblockClaimSuccessfulEventResponse> getSuperblockClaimSuccessfulEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("SuperblockClaimSuccessful", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<SuperblockClaimSuccessfulEventResponse> responses = new ArrayList<SuperblockClaimSuccessfulEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimSuccessfulEventResponse typedResponse = new SuperblockClaimSuccessfulEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.superblockId = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SuperblockClaimSuccessfulEventResponse> superblockClaimSuccessfulEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("SuperblockClaimSuccessful", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, SuperblockClaimSuccessfulEventResponse>() {
            @Override
            public SuperblockClaimSuccessfulEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                SuperblockClaimSuccessfulEventResponse typedResponse = new SuperblockClaimSuccessfulEventResponse();
                typedResponse.log = log;
                typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.superblockId = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<SuperblockClaimPendingEventResponse> getSuperblockClaimPendingEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("SuperblockClaimPending", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<SuperblockClaimPendingEventResponse> responses = new ArrayList<SuperblockClaimPendingEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimPendingEventResponse typedResponse = new SuperblockClaimPendingEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.superblockId = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SuperblockClaimPendingEventResponse> superblockClaimPendingEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("SuperblockClaimPending", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, SuperblockClaimPendingEventResponse>() {
            @Override
            public SuperblockClaimPendingEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                SuperblockClaimPendingEventResponse typedResponse = new SuperblockClaimPendingEventResponse();
                typedResponse.log = log;
                typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.superblockId = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<SuperblockClaimFailedEventResponse> getSuperblockClaimFailedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("SuperblockClaimFailed", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<SuperblockClaimFailedEventResponse> responses = new ArrayList<SuperblockClaimFailedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimFailedEventResponse typedResponse = new SuperblockClaimFailedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.superblockId = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SuperblockClaimFailedEventResponse> superblockClaimFailedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("SuperblockClaimFailed", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, SuperblockClaimFailedEventResponse>() {
            @Override
            public SuperblockClaimFailedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                SuperblockClaimFailedEventResponse typedResponse = new SuperblockClaimFailedEventResponse();
                typedResponse.log = log;
                typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.superblockId = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<VerificationGameStartedEventResponse> getVerificationGameStartedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("VerificationGameStarted", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<VerificationGameStartedEventResponse> responses = new ArrayList<VerificationGameStartedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VerificationGameStartedEventResponse typedResponse = new VerificationGameStartedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<VerificationGameStartedEventResponse> verificationGameStartedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("VerificationGameStarted", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, VerificationGameStartedEventResponse>() {
            @Override
            public VerificationGameStartedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                VerificationGameStartedEventResponse typedResponse = new VerificationGameStartedEventResponse();
                typedResponse.log = log;
                typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.claimant = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public List<ErrorClaimEventResponse> getErrorClaimEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("ErrorClaim", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<ErrorClaimEventResponse> responses = new ArrayList<ErrorClaimEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ErrorClaimEventResponse typedResponse = new ErrorClaimEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.err = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ErrorClaimEventResponse> errorClaimEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("ErrorClaim", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ErrorClaimEventResponse>() {
            @Override
            public ErrorClaimEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                ErrorClaimEventResponse typedResponse = new ErrorClaimEventResponse();
                typedResponse.log = log;
                typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.err = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<NewBattleEventResponse> getNewBattleEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("NewBattle", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<NewBattleEventResponse> responses = new ArrayList<NewBattleEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewBattleEventResponse typedResponse = new NewBattleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewBattleEventResponse> newBattleEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("NewBattle", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewBattleEventResponse>() {
            @Override
            public NewBattleEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                NewBattleEventResponse typedResponse = new NewBattleEventResponse();
                typedResponse.log = log;
                typedResponse.superblockId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public List<ChallengerConvictedEventResponse> getChallengerConvictedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("ChallengerConvicted", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<ChallengerConvictedEventResponse> responses = new ArrayList<ChallengerConvictedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ChallengerConvictedEventResponse typedResponse = new ChallengerConvictedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ChallengerConvictedEventResponse> challengerConvictedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("ChallengerConvicted", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ChallengerConvictedEventResponse>() {
            @Override
            public ChallengerConvictedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                ChallengerConvictedEventResponse typedResponse = new ChallengerConvictedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<SubmitterConvictedEventResponse> getSubmitterConvictedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("SubmitterConvicted", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<SubmitterConvictedEventResponse> responses = new ArrayList<SubmitterConvictedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SubmitterConvictedEventResponse typedResponse = new SubmitterConvictedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SubmitterConvictedEventResponse> submitterConvictedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("SubmitterConvicted", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, SubmitterConvictedEventResponse>() {
            @Override
            public SubmitterConvictedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                SubmitterConvictedEventResponse typedResponse = new SubmitterConvictedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<QueryMerkleRootHashesEventResponse> getQueryMerkleRootHashesEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("QueryMerkleRootHashes", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<QueryMerkleRootHashesEventResponse> responses = new ArrayList<QueryMerkleRootHashesEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            QueryMerkleRootHashesEventResponse typedResponse = new QueryMerkleRootHashesEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<QueryMerkleRootHashesEventResponse> queryMerkleRootHashesEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("QueryMerkleRootHashes", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, QueryMerkleRootHashesEventResponse>() {
            @Override
            public QueryMerkleRootHashesEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                QueryMerkleRootHashesEventResponse typedResponse = new QueryMerkleRootHashesEventResponse();
                typedResponse.log = log;
                typedResponse.superblockId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<RespondMerkleRootHashesEventResponse> getRespondMerkleRootHashesEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("RespondMerkleRootHashes", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<RespondMerkleRootHashesEventResponse> responses = new ArrayList<RespondMerkleRootHashesEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RespondMerkleRootHashesEventResponse typedResponse = new RespondMerkleRootHashesEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.blockHashes = (List<byte[]>) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RespondMerkleRootHashesEventResponse> respondMerkleRootHashesEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("RespondMerkleRootHashes", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, RespondMerkleRootHashesEventResponse>() {
            @Override
            public RespondMerkleRootHashesEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                RespondMerkleRootHashesEventResponse typedResponse = new RespondMerkleRootHashesEventResponse();
                typedResponse.log = log;
                typedResponse.superblockId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.blockHashes = (List<byte[]>) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public List<QueryBlockHeaderEventResponse> getQueryBlockHeaderEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("QueryBlockHeader", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<QueryBlockHeaderEventResponse> responses = new ArrayList<QueryBlockHeaderEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            QueryBlockHeaderEventResponse typedResponse = new QueryBlockHeaderEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.blockSha256Hash = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<QueryBlockHeaderEventResponse> queryBlockHeaderEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("QueryBlockHeader", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, QueryBlockHeaderEventResponse>() {
            @Override
            public QueryBlockHeaderEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                QueryBlockHeaderEventResponse typedResponse = new QueryBlockHeaderEventResponse();
                typedResponse.log = log;
                typedResponse.superblockId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.blockSha256Hash = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public List<RespondBlockHeaderEventResponse> getRespondBlockHeaderEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("RespondBlockHeader", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<RespondBlockHeaderEventResponse> responses = new ArrayList<RespondBlockHeaderEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RespondBlockHeaderEventResponse typedResponse = new RespondBlockHeaderEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.blockScryptHash = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.blockHeader = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.powBlockHeader = (byte[]) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RespondBlockHeaderEventResponse> respondBlockHeaderEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("RespondBlockHeader", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, RespondBlockHeaderEventResponse>() {
            @Override
            public RespondBlockHeaderEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                RespondBlockHeaderEventResponse typedResponse = new RespondBlockHeaderEventResponse();
                typedResponse.log = log;
                typedResponse.superblockId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.blockScryptHash = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.blockHeader = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.powBlockHeader = (byte[]) eventValues.getNonIndexedValues().get(5).getValue();
                return typedResponse;
            }
        });
    }

    public List<RequestScryptHashValidationEventResponse> getRequestScryptHashValidationEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("RequestScryptHashValidation", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<RequestScryptHashValidationEventResponse> responses = new ArrayList<RequestScryptHashValidationEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RequestScryptHashValidationEventResponse typedResponse = new RequestScryptHashValidationEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.blockScryptHash = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.blockHeader = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.proposalId = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RequestScryptHashValidationEventResponse> requestScryptHashValidationEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("RequestScryptHashValidation", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, RequestScryptHashValidationEventResponse>() {
            @Override
            public RequestScryptHashValidationEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                RequestScryptHashValidationEventResponse typedResponse = new RequestScryptHashValidationEventResponse();
                typedResponse.log = log;
                typedResponse.superblockId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.blockScryptHash = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.blockHeader = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.proposalId = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(5).getValue();
                return typedResponse;
            }
        });
    }

    public List<ResolvedScryptHashValidationEventResponse> getResolvedScryptHashValidationEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("ResolvedScryptHashValidation", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<ResolvedScryptHashValidationEventResponse> responses = new ArrayList<ResolvedScryptHashValidationEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ResolvedScryptHashValidationEventResponse typedResponse = new ResolvedScryptHashValidationEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.blockScryptHash = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.blockSha256Hash = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.proposalId = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.valid = (Boolean) eventValues.getNonIndexedValues().get(6).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ResolvedScryptHashValidationEventResponse> resolvedScryptHashValidationEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("ResolvedScryptHashValidation", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ResolvedScryptHashValidationEventResponse>() {
            @Override
            public ResolvedScryptHashValidationEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                ResolvedScryptHashValidationEventResponse typedResponse = new ResolvedScryptHashValidationEventResponse();
                typedResponse.log = log;
                typedResponse.superblockId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.blockScryptHash = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.blockSha256Hash = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.proposalId = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(5).getValue();
                typedResponse.valid = (Boolean) eventValues.getNonIndexedValues().get(6).getValue();
                return typedResponse;
            }
        });
    }

    public List<ErrorBattleEventResponse> getErrorBattleEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("ErrorBattle", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<ErrorBattleEventResponse> responses = new ArrayList<ErrorBattleEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ErrorBattleEventResponse typedResponse = new ErrorBattleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.err = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ErrorBattleEventResponse> errorBattleEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("ErrorBattle", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ErrorBattleEventResponse>() {
            @Override
            public ErrorBattleEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                ErrorBattleEventResponse typedResponse = new ErrorBattleEventResponse();
                typedResponse.log = log;
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.err = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<DepositMadeEventResponse> getDepositMadeEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("DepositMade", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<DepositMadeEventResponse> responses = new ArrayList<DepositMadeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositMadeEventResponse typedResponse = new DepositMadeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.who = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<DepositMadeEventResponse> depositMadeEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("DepositMade", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, DepositMadeEventResponse>() {
            @Override
            public DepositMadeEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                DepositMadeEventResponse typedResponse = new DepositMadeEventResponse();
                typedResponse.log = log;
                typedResponse.who = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<DepositWithdrawnEventResponse> getDepositWithdrawnEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("DepositWithdrawn", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<DepositWithdrawnEventResponse> responses = new ArrayList<DepositWithdrawnEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositWithdrawnEventResponse typedResponse = new DepositWithdrawnEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.who = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<DepositWithdrawnEventResponse> depositWithdrawnEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("DepositWithdrawn", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, DepositWithdrawnEventResponse>() {
            @Override
            public DepositWithdrawnEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                DepositWithdrawnEventResponse typedResponse = new DepositWithdrawnEventResponse();
                typedResponse.log = log;
                typedResponse.who = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<TransactionReceipt> queryBlockHeader(byte[] superblockId, byte[] sessionId, byte[] blockHash) {
        final Function function = new Function(
                "queryBlockHeader", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockId), 
                new org.web3j.abi.datatypes.generated.Bytes32(sessionId), 
                new org.web3j.abi.datatypes.generated.Bytes32(blockHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> respondBlockHeader(byte[] superblockId, byte[] sessionId, byte[] blockScryptHash, byte[] blockHeader) {
        final Function function = new Function(
                "respondBlockHeader", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockId), 
                new org.web3j.abi.datatypes.generated.Bytes32(sessionId), 
                new org.web3j.abi.datatypes.generated.Bytes32(blockScryptHash), 
                new org.web3j.abi.datatypes.DynamicBytes(blockHeader)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> respondMerkleRootHashes(byte[] superblockId, byte[] sessionId, List<byte[]> blockHashes) {
        final Function function = new Function(
                "respondMerkleRootHashes", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockId), 
                new org.web3j.abi.datatypes.generated.Bytes32(sessionId), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.Utils.typeMap(blockHashes, org.web3j.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> queryMerkleRootHashes(byte[] superblockId, byte[] sessionId) {
        final Function function = new Function(
                "queryMerkleRootHashes", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockId), 
                new org.web3j.abi.datatypes.generated.Bytes32(sessionId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> superblockTimeout() {
        final Function function = new Function("superblockTimeout", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> scryptChecker() {
        final Function function = new Function("scryptChecker", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<List> getDogeBlockHashes(byte[] sessionId) {
        final Function function = new Function("getDogeBlockHashes", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(sessionId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<BigInteger> superblockConfirmations() {
        final Function function = new Function("superblockConfirmations", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> superblocks() {
        final Function function = new Function("superblocks", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> sessionsCount() {
        final Function function = new Function("sessionsCount", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> withdrawDeposit(BigInteger amount) {
        final Function function = new Function(
                "withdrawDeposit", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> makeDeposit(BigInteger weiValue) {
        final Function function = new Function(
                "makeDeposit", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<BigInteger> minDeposit() {
        final Function function = new Function("minDeposit", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> scryptVerified(byte[] scryptChallengeId) {
        final Function function = new Function(
                "scryptVerified", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(scryptChallengeId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> superblockDelay() {
        final Function function = new Function("superblockDelay", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> numScryptHashVerifications() {
        final Function function = new Function("numScryptHashVerifications", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> scryptSubmitted(byte[] scryptChallengeId, byte[] _scryptHash, byte[] _data, String _submitter) {
        final Function function = new Function(
                "scryptSubmitted", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(scryptChallengeId), 
                new org.web3j.abi.datatypes.generated.Bytes32(_scryptHash), 
                new org.web3j.abi.datatypes.DynamicBytes(_data), 
                new org.web3j.abi.datatypes.Address(_submitter)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> getSubmitterHitTimeout(byte[] sessionId) {
        final Function function = new Function("getSubmitterHitTimeout", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(sessionId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> requestScryptHashValidation(byte[] superblockId, byte[] sessionId, byte[] blockSha256Hash) {
        final Function function = new Function(
                "requestScryptHashValidation", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockId), 
                new org.web3j.abi.datatypes.generated.Bytes32(sessionId), 
                new org.web3j.abi.datatypes.generated.Bytes32(blockSha256Hash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> timeout(byte[] sessionId) {
        final Function function = new Function(
                "timeout", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(sessionId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple12<byte[], byte[], String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, byte[], BigInteger>> sessions(byte[] param0) {
        final Function function = new Function("sessions", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint8>() {}));
        return new RemoteCall<Tuple12<byte[], byte[], String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, byte[], BigInteger>>(
                new Callable<Tuple12<byte[], byte[], String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, byte[], BigInteger>>() {
                    @Override
                    public Tuple12<byte[], byte[], String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, byte[], BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple12<byte[], byte[], String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, byte[], BigInteger>(
                                (byte[]) results.get(0).getValue(), 
                                (byte[]) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue(), 
                                (BigInteger) results.get(8).getValue(), 
                                (BigInteger) results.get(9).getValue(), 
                                (byte[]) results.get(10).getValue(), 
                                (BigInteger) results.get(11).getValue());
                    }
                });
    }

    public RemoteCall<Boolean> getChallengerHitTimeout(byte[] sessionId) {
        final Function function = new Function("getChallengerHitTimeout", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(sessionId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Tuple2<byte[], byte[]>> scryptHashVerifications(byte[] param0) {
        final Function function = new Function("scryptHashVerifications", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}));
        return new RemoteCall<Tuple2<byte[], byte[]>>(
                new Callable<Tuple2<byte[], byte[]>>() {
                    @Override
                    public Tuple2<byte[], byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<byte[], byte[]>(
                                (byte[]) results.get(0).getValue(), 
                                (byte[]) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> verifySuperblock(byte[] sessionId) {
        final Function function = new Function(
                "verifySuperblock", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(sessionId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> beginBattleSession(byte[] superblockId, String submitter, String challenger) {
        final Function function = new Function(
                "beginBattleSession", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockId), 
                new org.web3j.abi.datatypes.Address(submitter), 
                new org.web3j.abi.datatypes.Address(challenger)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> scryptFailed(byte[] scryptChallengeId) {
        final Function function = new Function(
                "scryptFailed", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(scryptChallengeId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getDeposit(String who) {
        final Function function = new Function("getDeposit", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(who)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> setScryptChecker(String _scryptChecker) {
        final Function function = new Function(
                "setScryptChecker", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_scryptChecker)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple8<byte[], String, BigInteger, BigInteger, BigInteger, Boolean, Boolean, Boolean>> claims(byte[] param0) {
        final Function function = new Function("claims", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Bool>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple8<byte[], String, BigInteger, BigInteger, BigInteger, Boolean, Boolean, Boolean>>(
                new Callable<Tuple8<byte[], String, BigInteger, BigInteger, BigInteger, Boolean, Boolean, Boolean>>() {
                    @Override
                    public Tuple8<byte[], String, BigInteger, BigInteger, BigInteger, Boolean, Boolean, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<byte[], String, BigInteger, BigInteger, BigInteger, Boolean, Boolean, Boolean>(
                                (byte[]) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (Boolean) results.get(5).getValue(), 
                                (Boolean) results.get(6).getValue(), 
                                (Boolean) results.get(7).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> superblockDuration() {
        final Function function = new Function("superblockDuration", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> deposits(String param0) {
        final Function function = new Function("deposits", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public static RemoteCall<DogeClaimManager> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger _network, String _superblocks, BigInteger _superblockDuration, BigInteger _superblockDelay, BigInteger _superblockTimeout, BigInteger _superblockConfirmations) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(_network), 
                new org.web3j.abi.datatypes.Address(_superblocks), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockDuration), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockDelay), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockTimeout), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockConfirmations)));
        return deployRemoteCall(DogeClaimManager.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<DogeClaimManager> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger _network, String _superblocks, BigInteger _superblockDuration, BigInteger _superblockDelay, BigInteger _superblockTimeout, BigInteger _superblockConfirmations) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(_network), 
                new org.web3j.abi.datatypes.Address(_superblocks), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockDuration), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockDelay), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockTimeout), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockConfirmations)));
        return deployRemoteCall(DogeClaimManager.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public RemoteCall<BigInteger> getBondedDeposit(byte[] claimId, String account) {
        final Function function = new Function("getBondedDeposit", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(claimId), 
                new org.web3j.abi.datatypes.Address(account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> proposeSuperblock(byte[] _blocksMerkleRoot, BigInteger _accumulatedWork, BigInteger _timestamp, BigInteger _prevTimestamp, byte[] _lastHash, BigInteger _lastBits, byte[] _parentHash) {
        final Function function = new Function(
                "proposeSuperblock", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_blocksMerkleRoot), 
                new org.web3j.abi.datatypes.generated.Uint256(_accumulatedWork), 
                new org.web3j.abi.datatypes.generated.Uint256(_timestamp), 
                new org.web3j.abi.datatypes.generated.Uint256(_prevTimestamp), 
                new org.web3j.abi.datatypes.generated.Bytes32(_lastHash), 
                new org.web3j.abi.datatypes.generated.Uint32(_lastBits), 
                new org.web3j.abi.datatypes.generated.Bytes32(_parentHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> challengeSuperblock(byte[] superblockId) {
        final Function function = new Function(
                "challengeSuperblock", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> checkClaimFinished(byte[] claimId) {
        final Function function = new Function(
                "checkClaimFinished", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(claimId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> confirmClaim(byte[] claimId, byte[] descendantId) {
        final Function function = new Function(
                "confirmClaim", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(claimId), 
                new org.web3j.abi.datatypes.generated.Bytes32(descendantId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> rejectClaim(byte[] claimId) {
        final Function function = new Function(
                "rejectClaim", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(claimId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> getInBattleAndSemiApprovable(byte[] superblockId) {
        final Function function = new Function("getInBattleAndSemiApprovable", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<BigInteger> getNewSuperblockEventTimestamp(byte[] superblockId) {
        final Function function = new Function("getNewSuperblockEventTimestamp", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Boolean> getClaimExists(byte[] superblockId) {
        final Function function = new Function("getClaimExists", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Boolean> getClaimDecided(byte[] superblockId) {
        final Function function = new Function("getClaimDecided", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Boolean> getClaimInvalid(byte[] superblockId) {
        final Function function = new Function("getClaimInvalid", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Boolean> getClaimVerificationOngoing(byte[] superblockId) {
        final Function function = new Function("getClaimVerificationOngoing", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<BigInteger> getClaimChallengeTimeout(byte[] superblockId) {
        final Function function = new Function("getClaimChallengeTimeout", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getClaimRemainingChallengers(byte[] superblockId) {
        final Function function = new Function("getClaimRemainingChallengers", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<byte[]> getSession(byte[] claimId, String challenger) {
        final Function function = new Function("getSession", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(claimId), 
                new org.web3j.abi.datatypes.Address(challenger)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<List> getClaimChallengers(byte[] superblockId) {
        final Function function = new Function("getClaimChallengers", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public static DogeClaimManager load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DogeClaimManager(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static DogeClaimManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DogeClaimManager(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class DepositBondedEventResponse {
        public Log log;

        public byte[] claimId;

        public String account;

        public BigInteger amount;
    }

    public static class DepositUnbondedEventResponse {
        public Log log;

        public byte[] claimId;

        public String account;

        public BigInteger amount;
    }

    public static class SuperblockClaimCreatedEventResponse {
        public Log log;

        public byte[] claimId;

        public String claimant;

        public byte[] superblockId;
    }

    public static class SuperblockClaimChallengedEventResponse {
        public Log log;

        public byte[] claimId;

        public String challenger;
    }

    public static class SuperblockBattleDecidedEventResponse {
        public Log log;

        public byte[] sessionId;

        public String winner;

        public String loser;
    }

    public static class SuperblockClaimSuccessfulEventResponse {
        public Log log;

        public byte[] claimId;

        public String claimant;

        public byte[] superblockId;
    }

    public static class SuperblockClaimPendingEventResponse {
        public Log log;

        public byte[] claimId;

        public String claimant;

        public byte[] superblockId;
    }

    public static class SuperblockClaimFailedEventResponse {
        public Log log;

        public byte[] claimId;

        public String claimant;

        public byte[] superblockId;
    }

    public static class VerificationGameStartedEventResponse {
        public Log log;

        public byte[] claimId;

        public String claimant;

        public String challenger;

        public byte[] sessionId;
    }

    public static class ErrorClaimEventResponse {
        public Log log;

        public byte[] claimId;

        public BigInteger err;
    }

    public static class NewBattleEventResponse {
        public Log log;

        public byte[] superblockId;

        public byte[] sessionId;

        public String submitter;

        public String challenger;
    }

    public static class ChallengerConvictedEventResponse {
        public Log log;

        public byte[] superblockId;

        public byte[] sessionId;

        public String challenger;
    }

    public static class SubmitterConvictedEventResponse {
        public Log log;

        public byte[] superblockId;

        public byte[] sessionId;

        public String submitter;
    }

    public static class QueryMerkleRootHashesEventResponse {
        public Log log;

        public byte[] superblockId;

        public byte[] sessionId;

        public String submitter;
    }

    public static class RespondMerkleRootHashesEventResponse {
        public Log log;

        public byte[] superblockId;

        public byte[] sessionId;

        public String challenger;

        public List<byte[]> blockHashes;
    }

    public static class QueryBlockHeaderEventResponse {
        public Log log;

        public byte[] superblockId;

        public byte[] sessionId;

        public String submitter;

        public byte[] blockSha256Hash;
    }

    public static class RespondBlockHeaderEventResponse {
        public Log log;

        public byte[] superblockId;

        public byte[] sessionId;

        public String challenger;

        public byte[] blockScryptHash;

        public byte[] blockHeader;

        public byte[] powBlockHeader;
    }

    public static class RequestScryptHashValidationEventResponse {
        public Log log;

        public byte[] superblockId;

        public byte[] sessionId;

        public byte[] blockScryptHash;

        public byte[] blockHeader;

        public byte[] proposalId;

        public String submitter;
    }

    public static class ResolvedScryptHashValidationEventResponse {
        public Log log;

        public byte[] superblockId;

        public byte[] sessionId;

        public byte[] blockScryptHash;

        public byte[] blockSha256Hash;

        public byte[] proposalId;

        public String challenger;

        public Boolean valid;
    }

    public static class ErrorBattleEventResponse {
        public Log log;

        public byte[] sessionId;

        public BigInteger err;
    }

    public static class DepositMadeEventResponse {
        public Log log;

        public String who;

        public BigInteger amount;
    }

    public static class DepositWithdrawnEventResponse {
        public Log log;

        public String who;

        public BigInteger amount;
    }
}
