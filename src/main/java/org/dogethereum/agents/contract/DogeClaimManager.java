package org.dogethereum.agents.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.3.1.
 */
public class DogeClaimManager extends Contract {
    private static final String BINARY = "0x6080604052600160055534801561001557600080fd5b5060405160a0806134898339810160409081528151602083015191830151606084015160809094015160028054600160a060020a03948516600160a060020a03199182161790915560038054949095169316929092179092556006919091556007919091556004556133fd8061008c6000396000f30060806040526004361061017f5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663032e5587811461018a578063040aa57a146101f25780630ac0d9c9146102215780630d5f5d691461023957806313be4f9e1461025157806318b011de1461026957806327b425a61461029057806329118a9b146102a55780632a02fa00146102c957806333289a46146102fa5780633352f1a41461031257806340732c891461032a57806341b3d1851461033257806343207e6314610347578063465348491461035f57806355e4286b1461037457806357872488146103a55780635bf7d5db146103ba578063748a00e2146103d25780638e20eb10146104015780639c57588f14610431578063a8b4633f14610455578063bf0e1edb1461046d578063c2569e5a14610485578063c3d3290f146104ac578063c44205e3146104c4578063dac1d764146104dc578063e1254fba146104f4578063eff0f59214610515578063fc7e286d1461057c575b61018761059d565b50005b34801561019657600080fd5b506101a26004356105bd565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156101de5781810151838201526020016101c6565b505050509050019250505060405180910390f35b3480156101fe57600080fd5b5061020d60043560243561062f565b604080519115158252519081900360200190f35b34801561022d57600080fd5b5061020d600435610e99565b34801561024557600080fd5b5061020d600435610f84565b34801561025d57600080fd5b5061020d600435610f9c565b34801561027557600080fd5b5061027e611568565b60408051918252519081900360200190f35b34801561029c57600080fd5b5061027e61156e565b3480156102b157600080fd5b5061027e600435600160a060020a0360243516611574565b3480156102d557600080fd5b506102de611689565b60408051600160a060020a039092168252519081900360200190f35b34801561030657600080fd5b5061027e600435611698565b34801561031e57600080fd5b5061020d600435611744565b61027e61059d565b34801561033e57600080fd5b5061027e611d6c565b34801561035357600080fd5b5061027e600435611d72565b34801561036b57600080fd5b506102de611d8f565b34801561038057600080fd5b5061038c600435611d9e565b6040805192835260208301919091528051918290030190f35b3480156103b157600080fd5b5061027e612190565b3480156103c657600080fd5b506102de600435612196565b3480156103de57600080fd5b506103ff600435602435600160a060020a03604435811690606435166121b5565b005b34801561040d57600080fd5b5061038c60043560243560443560643560843563ffffffff60a4351660c435612378565b34801561043d57600080fd5b5061027e600435600160a060020a036024351661279f565b34801561046157600080fd5b5061020d6004356127cb565b34801561047957600080fd5b5061027e6004356128b5565b34801561049157600080fd5b5061038c600435600160a060020a03602435166044356128ca565b3480156104b857600080fd5b5061027e600435612aca565b3480156104d057600080fd5b5061020d600435612adf565b3480156104e857600080fd5b5061020d600435612afc565b34801561050057600080fd5b5061027e600160a060020a0360043516612b1a565b34801561052157600080fd5b5061052d600435612b35565b60408051988952600160a060020a0390971660208901528787019590955260608701939093526080860191909152151560a0850152151560c0840152151560e083015251908190036101000190f35b34801561058857600080fd5b5061027e600160a060020a0360043516612b8b565b60006105a93334612b9d565b503360009081526020819052604090205490565b600081815260016020908152604091829020600381018054845181850281018501909552808552606094929383018282801561062257602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610604575b5050505050915050919050565b60008181526001602081905260408220829190849083806060815b858b146108dc576040805161012081018252865481526001870154600160a060020a031660208083019190915260028801548284015260038801805484518184028101840190955280855261072d948a9360608601939192908301828280156106dc57602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116106be575b5050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a090910152612c12565b151561076657604080518c815261c3a0602082015281516000805160206133b2833981519152929181900390910190a160009850610e8b565b6002546040805160e160020a6365702c0f028152600481018990529051600392600160a060020a03169163cae0581e9160248083019260209291908290030181600087803b1580156107b757600080fd5b505af11580156107cb573d6000803e3d6000fd5b505050506040513d60208110156107e157600080fd5b505160058111156107ee57fe5b1461082657604080518c815261c364602082015281516000805160206133b2833981519152929181900390910190a160009850610e8b565b868015610837575060038501546000105b1561084157600096505b6002546040805160e160020a632af00c67028152600481018990529051600160a060020a03909216916355e018ce916024808201926020929091908290030181600087803b15801561089257600080fd5b505af11580156108a6573d6000803e3d6000fd5b505050506040513d60208110156108bc57600080fd5b50516000818152600160208190526040909120990198909650945061064a565b60045488101561091957604080518c815261c3dc602082015281516000805160206133b2833981519152929181900390910190a160009850610e8b565b6002546040805160e160020a6365702c0f028152600481018990529051600392600160a060020a03169163cae0581e9160248083019260209291908290030181600087803b15801561096a57600080fd5b505af115801561097e573d6000803e3d6000fd5b505050506040513d602081101561099457600080fd5b505160058111156109a157fe5b146109d957604080518c815261c364602082015281516000805160206133b2833981519152929181900390910190a160009850610e8b565b6002546040805160e160020a632af00c67028152600481018e90529051600160a060020a03909216916355e018ce916024808201926020929091908290030181600087803b158015610a2a57600080fd5b505af1158015610a3e573d6000803e3d6000fd5b505050506040513d6020811015610a5457600080fd5b5051935060046002546040805160e160020a6365702c0f028152600481018890529051600160a060020a039092169163cae0581e916024808201926020929091908290030181600087803b158015610aab57600080fd5b505af1158015610abf573d6000803e3d6000fd5b505050506040513d6020811015610ad557600080fd5b50516005811115610ae257fe5b14610b1a57604080518c815261c364602082015281516000805160206133b2833981519152929181900390910190a160009850610e8b565b600254604080517f95b45ee7000000000000000000000000000000000000000000000000000000008152600481018e90523360248201528151600160a060020a03909316926395b45ee7926044808401939192918290030181600087803b158015610b8457600080fd5b505af1158015610b98573d6000803e3d6000fd5b505050506040513d6040811015610bae57600080fd5b505192508215610bea57604080518c81526020810185905281516000805160206133b2833981519152929181900390910190a160009850610e8b565b6001850154604080518d8152600160a060020a03909216602083015280517fd2d92ada663f6bc7872c4132f968080a631f3d0faa9310ba1c86d1c54e470b289281900390910190a1610c3c8b86612c24565b6001850154610c55908c90600160a060020a0316612cb4565b50508615610e865787604051908082528060200260200182016040528015610c87578160200160208202803883390190505b509150899550600090505b858b14610d3757858282815181101515610ca857fe5b60209081029091018101919091526002546040805160e160020a632af00c67028152600481018a90529051600160a060020a03909216926355e018ce926024808401938290030181600087803b158015610d0157600080fd5b505af1158015610d15573d6000803e3d6000fd5b505050506040513d6020811015610d2b57600080fd5b50519550600101610c92565b6000811115610e86576001810390508181815181101515610d5457fe5b602090810290910181015160008181526001909252604080832060025482517f95b45ee7000000000000000000000000000000000000000000000000000000008152600481018590523360248201528351949b50919950600160a060020a0316936395b45ee793604480840194939192918390030190829087803b158015610ddb57600080fd5b505af1158015610def573d6000803e3d6000fd5b505050506040513d6040811015610e0557600080fd5b505192508215610e1457600080fd5b600185015460408051888152600160a060020a03909216602083015280517fd2d92ada663f6bc7872c4132f968080a631f3d0faa9310ba1c86d1c54e470b289281900390910190a1610e668686612c24565b6001850154610e7f908790600160a060020a0316612cb4565b5050610d37565b600198505b505050505050505092915050565b60008181526001602081815260408084208151610120810183528154815293810154600160a060020a031684840152600281015484830152600381018054835181860281018601909452808452610f7e959492936060860193909291908301828280156106dc57602002820191906000526020600020908154600160a060020a031681526001909101906020018083116106be575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a090910152612c12565b92915050565b60009081526001602052604090206008015460ff1690565b60008181526001602081815260408084208151610120810183528154815293810154600160a060020a0316848401526002810154848301526003810180548351818602810186019094528084529194869485948594611086948993606086019392908301828280156106dc57602002820191906000526020600020908154600160a060020a031681526001909101906020018083116106be575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a090910152612c12565b15156110bf576040805187815261c3a0602082015281516000805160206133b2833981519152929181900390910190a16000945061155f565b600254604080517f2e400191000000000000000000000000000000000000000000000000000000008152600481018990529051600160a060020a0390921691632e400191916024808201926020929091908290030181600087803b15801561112657600080fd5b505af115801561113a573d6000803e3d6000fd5b505050506040513d602081101561115057600080fd5b5051600254604080517ff06d520d000000000000000000000000000000000000000000000000000000008152905163ffffffff9093169550600160a060020a039091169163f06d520d916004808201926020929091908290030181600087803b1580156111bc57600080fd5b505af11580156111d0573d6000803e3d6000fd5b505050506040513d60208110156111e657600080fd5b505160048054600254604080517f2e4001910000000000000000000000000000000000000000000000000000000081529384018590525193955090860192600160a060020a0390911691632e4001919160248083019260209291908290030181600087803b15801561125757600080fd5b505af115801561126b573d6000803e3d6000fd5b505050506040513d602081101561128157600080fd5b505163ffffffff1610156112c2576040805187815261c3dc602082015281516000805160206133b2833981519152929181900390910190a16000945061155f565b600254604080517fc0dde98b000000000000000000000000000000000000000000000000000000008152600481018690529051600160a060020a039092169163c0dde98b916024808201926020929091908290030181600087803b15801561132957600080fd5b505af115801561133d573d6000803e3d6000fd5b505050506040513d602081101561135357600080fd5b5051915085821461155a576002546040805160e160020a6365702c0f028152600481018990529051600160a060020a039092169163cae0581e916024808201926020929091908290030181600087803b1580156113af57600080fd5b505af11580156113c3573d6000803e3d6000fd5b505050506040513d60208110156113d957600080fd5b5051905060038160058111156113eb57fe5b14611423576040805187815261c364602082015281516000805160206133b2833981519152929181900390910190a16000945061155f565b6008840154610100900460ff161515611469576040805187815261c3b4602082015281516000805160206133b2833981519152929181900390910190a16000945061155f565b600254604080517f74205786000000000000000000000000000000000000000000000000000000008152600481018990523360248201528151600160a060020a03909316926374205786926044808401939192918290030181600087803b1580156114d357600080fd5b505af11580156114e7573d6000803e3d6000fd5b505050506040513d60408110156114fd57600080fd5b5050600184015460408051888152600160a060020a03909216602083015280517f944668cff98bcc4e0c3851b8682999d1e5c0bf2b32e8e035d71db8f40fd0ded79281900390910190a16115518685612e53565b6001945061155f565b600094505b50505050919050565b60075481565b60045481565b60008281526001602081815260408084208151610120810183528154815293810154600160a060020a031684840152600281015484830152600381018054835181860281018601909452808452919461165a9490938693606086019391928301828280156106dc57602002820191906000526020600020908154600160a060020a031681526001909101906020018083116106be575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a090910152612c12565b151561166557600080fd5b600160a060020a038316600090815260048201602052604090205491505092915050565b600254600160a060020a031681565b336000908152602081905260408120548211156116b457600080fd5b33600081815260208190526040808220805486900390555184156108fc0291859190818181858888f193505050501580156116f3573d6000803e3d6000fd5b50604080513381526020810184905281517f4482101800a5c2e900f4156e57e05e19ffd7b366cde579553d723fd3abb2180e929181900390910190a150503360009081526020819052604090205490565b60008181526001602081815260408084208151610120810183528154815293810154600160a060020a031684840152600281015484830152600381018054835181860281018601909452808452919486948594859461182e948993606086019392908301828280156106dc57602002820191906000526020600020908154600160a060020a031681526001909101906020018083116106be575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a090910152612c12565b1515611867576040805187815261c3a0602082015281516000805160206133b2833981519152929181900390910190a16000945061155f565b600884015460ff16156118a7576040805187815261c3aa602082015281516000805160206133b2833981519152929181900390910190a16000945061155f565b600884015462010000900460ff16156119be5760088401805461ff0019166101001790556002548454604080517f7420578600000000000000000000000000000000000000000000000000000000815260048101929092523360248301528051600160a060020a039093169263742057869260448082019392918290030181600087803b15801561193757600080fd5b505af115801561194b573d6000803e3d6000fd5b505050506040513d604081101561196157600080fd5b5050600184015460408051888152600160a060020a03909216602083015280517f944668cff98bcc4e0c3851b8682999d1e5c0bf2b32e8e035d71db8f40fd0ded79281900390910190a16119b58685612e53565b6000945061155f565b600784015442116119fc576040805187815261c36e602082015281516000805160206133b2833981519152929181900390910190a16000945061155f565b600384015460058501541015611a3f576040805187815261c3aa602082015281516000805160206133b2833981519152929181900390910190a16000945061155f565b60088401805461ff0019166101001790556003840154600093501515611b795760025484546040805160e160020a632af00c67028152600481019290925251600160a060020a03909216916355e018ce916024808201926020929091908290030181600087803b158015611ab257600080fd5b505af1158015611ac6573d6000803e3d6000fd5b505050506040513d6020811015611adc57600080fd5b50516002546040805160e160020a6365702c0f028152600481018490529051929450600160a060020a039091169163cae0581e916024808201926020929091908290030181600087803b158015611b3257600080fd5b505af1158015611b46573d6000803e3d6000fd5b505050506040513d6020811015611b5c57600080fd5b505190506004816005811115611b6e57fe5b1415611b7957600192505b8215611c7f576002548454604080517f95b45ee700000000000000000000000000000000000000000000000000000000815260048101929092523360248301528051600160a060020a03909316926395b45ee79260448082019392918290030181600087803b158015611beb57600080fd5b505af1158015611bff573d6000803e3d6000fd5b505050506040513d6040811015611c1557600080fd5b50506001840154611c30908790600160a060020a0316612cb4565b5050600184015460408051888152600160a060020a03909216602083015280517fd2d92ada663f6bc7872c4132f968080a631f3d0faa9310ba1c86d1c54e470b289281900390910190a1611d60565b6002548454604080517f27426f7500000000000000000000000000000000000000000000000000000000815260048101929092523360248301528051600160a060020a03909316926327426f759260448082019392918290030181600087803b158015611ceb57600080fd5b505af1158015611cff573d6000803e3d6000fd5b505050506040513d6040811015611d1557600080fd5b5050600184015460408051888152600160a060020a03909216602083015280517f68c34be3e9c7221898bee267017dda5f7344326a8825b2d4427dfeaba0fa19299281900390910190a15b50600195945050505050565b60055481565b600090815260016020526040902060058101546003909101540390565b600354600160a060020a031681565b600254600090819081908190600160a060020a03161515611dbe57600080fd5b6000858152600160208181526040928390208351610120810185528154815292810154600160a060020a031683830152600281015483850152600381018054855181850281018501909652808652919650611ea69487936060860193919291908301828280156106dc57602002820191906000526020600020908154600160a060020a031681526001909101906020018083116106be575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a090910152612c12565b1515611ee3576040805186815261c3a0602082015281516000805160206133b2833981519152929181900390910190a161c3a08593509350612189565b6008820154610100900460ff1615611f2c576040805186815261c3b4602082015281516000805160206133b2833981519152929181900390910190a161c3b48593509350612189565b600554336000908152602081905260409020541015611f7c576040805186815261c38c602082015281516000805160206133b2833981519152929181900390910190a161c38c8593509350612189565b600254604080517fc1f67ab3000000000000000000000000000000000000000000000000000000008152600481018890523360248201528151600160a060020a039093169263c1f67ab3926044808401939192918290030181600087803b158015611fe657600080fd5b505af1158015611ffa573d6000803e3d6000fd5b505050506040513d604081101561201057600080fd5b50519050801561204f57604080518681526020810183905281516000805160206133b2833981519152929181900390910190a192506000915082612189565b600554604080517fc2569e5a0000000000000000000000000000000000000000000000000000000081526004810188905233602482015260448101929092528051309263c2569e5a9260648083019391928290030181600087803b1580156120b657600080fd5b505af11580156120ca573d6000803e3d6000fd5b505050506040513d60408110156120e057600080fd5b5051905080156120ec57fe5b60078054420190830155600382018054600181018255600091825260209182902001805473ffffffffffffffffffffffffffffffffffffffff191633908117909155604080518881529283019190915280517f4e4ec862758a1fd984d86a07836cbea0bb7aec069cc98cd7a543266b270e42e49281900390910190a1600882015460ff1615156121815761217f85613016565b505b600085935093505b5050915091565b60065481565b60009081526001602081905260409091200154600160a060020a031690565b600354600090600160a060020a031633146121cf57600080fd5b506000838152600160208181526040928390208351610120810185528154815292810154600160a060020a03168383015260028101548385015260038101805485518185028101850190965280865291946122b5949386936060860193918301828280156106dc57602002820191906000526020600020908154600160a060020a031681526001909101906020018083116106be575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a090910152612c12565b15156122c057600080fd5b60088101805460ff191690556001810154600160a060020a03838116911614156122fc5760088101805462ff0000191662010000179055612328565b6001810154600160a060020a03848116911614156123235761231d84613016565b50612328565b600080fd5b60408051868152600160a060020a03808616602083015284168183015290517f1a6e323d263407d13632ff217899ae9353a07223d311df6db8d80cad6a57c2d59181900360600190a15050505050565b6002546000908190819081908190600160a060020a0316151561239a57600080fd5b6005543360009081526020819052604090205410156123ec57604080516000815261c38c602082015281516000805160206133b2833981519152929181900390910190a161c38c945060009350612790565b426006548b01111561243157604080516000815261c373602082015281516000805160206133b2833981519152929181900390910190a161c373945060009350612790565b600254604080517fb1b59528000000000000000000000000000000000000000000000000000000008152600481018f9052602481018e9052604481018d9052606481018c9052608481018b905263ffffffff8a1660a482015260c481018990523360e48201528151600160a060020a039093169263b1b5952892610104808401939192918290030181600087803b1580156124cb57600080fd5b505af11580156124df573d6000803e3d6000fd5b505050506040513d60408110156124f557600080fd5b5080516020909101519093509150821561253d57604080518381526020810185905281516000805160206133b2833981519152929181900390910190a1828294509450612790565b506000818152600160208181526040928390208351610120810185528154815292810154600160a060020a0316838301526002810154838501526003810180548551818502810185019096528086529194612623949386936060860193918301828280156106dc57602002820191906000526020600020908154600160a060020a031681526001909101906020018083116106be575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a090910152612c12565b1561265f576040805183815261c3a0602082015281516000805160206133b2833981519152929181900390910190a161c3a08294509450612790565b81815560018101805473ffffffffffffffffffffffffffffffffffffffff1916339081179091556000600580840182905560088401805462ffffff191690554260028501819055600780549091019085015554604080517fc2569e5a00000000000000000000000000000000000000000000000000000000815260048101879052602481019490945260448401919091528051309363c2569e5a9360648083019493928390030190829087803b15801561271857600080fd5b505af115801561272c573d6000803e3d6000fd5b505050506040513d604081101561274257600080fd5b50519250821561274e57fe5b6040805183815233602082015281517fb3a62becdc21cd20cda5d5537311e57b217d497022fa1d6fa233fe5d736011ad929181900390910190a1600082945094505b50505097509795505050505050565b6000828152600160209081526040808320600160a060020a038516845260060190915290205492915050565b6000818152600160205260408120600280546040805160e160020a6365702c0f028152600481018790529051600160a060020a039092169163cae0581e916024808201926020929091908290030181600087803b15801561282b57600080fd5b505af115801561283f573d6000803e3d6000fd5b505050506040513d602081101561285557600080fd5b5051600581111561286257fe5b14801561287a5750600881015462010000900460ff16155b801561288b5750600881015460ff16155b801561289a5750806007015442115b80156128ae57506003810154600582015410155b9392505050565b60009081526001602052604090206007015490565b60035460009081908190600160a060020a03163314806128e957503330145b15156128f457600080fd5b506000858152600160208181526040928390208351610120810185528154815292810154600160a060020a03168383015260028101548385015260038101805485518185028101850190965280865291946129da949386936060860193918301828280156106dc57602002820191906000526020600020908154600160a060020a031681526001909101906020018083116106be575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a090910152612c12565b15156129ee5761c3a0925060009150612ac1565b600160a060020a038516600090815260208190526040902054841115612a3357600160a060020a03851660009081526020819052604090205461c38c93509150612ac1565b600160a060020a0385166000818152602081815260408083208054899003905560048501825291829020805488019055815189815290810192909252818101869052517ff49b89a01f8b7e79e855801f268b5df3d7c88c4bc61293934fc1f9c52ddfeb319181900360600190a1600160a060020a038516600090815260048201602052604081205490935091505b50935093915050565b60009081526001602052604090206002015490565b600090815260016020526040902060080154610100900460ff1690565b60009081526001602052604090206008015462010000900460ff1690565b600160a060020a031660009081526020819052604090205490565b6001602081905260009182526040909120805491810154600282015460058301546007840154600890940154600160a060020a0390931693919290919060ff808216916101008104821691620100009091041688565b60006020819052908152604090205481565b600160a060020a0382166000908152602081905260409020805482019081905530311015612bca57600080fd5b60408051600160a060020a03841681526020810183905281517fd15c9547ea5c06670c0010ce19bc32d54682a4b3801ece7f3ab0c3f17106b4bb929181900390910190a15050565b60200151600160a060020a0316151590565b600080805b6003840154811015612c925760038401805482908110612c4557fe5b6000918252602080832090910154600160a060020a039081168084526004880190925260408084208054908590556001898101549093168552932080548401905590945090925001612c29565b6001840154612cab908690600160a060020a0316612cb4565b50505050505050565b60008281526001602081815260408084208151610120810183528154815293810154600160a060020a031684840152600281015484830152600381018054835181860281018601909452808452869592948694612d9b9493879360608601938301828280156106dc57602002820191906000526020600020908154600160a060020a031681526001909101906020018083116106be575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a090910152612c12565b1515612daf5761c3a0935060009250612e4a565b6008820154610100900460ff161515612dd05761c364935060009250612e4a565b50600160a060020a0384166000818152600483016020908152604080832080549084905583835292819020805484019055805189815291820193909352808301829052915190917faafcd902e5217659ba924addbacae78ebf6a7c77409df0d0065b9ebca0129873919081900360600190a1600081935093505b50509250929050565b6001810154600160a060020a03166000908152600482016020526040812080549082905590808080805b8660050154841015612ed6578660040160008860030186815481101515612ea057fe5b6000918252602080832090910154600160a060020a03168352820192909252604001902054949094019360019390930192612e7d565b600093505b8660050154841015612f615760038701805485908110612ef757fe5b6000918252602080832090910154600160a060020a031680835260048a0190915260409091205490935085908702811515612f2e57fe5b600160a060020a038516600090815260048a01602052604090208054929091049182019055600194909401939150612edb565b600093505b600387015484101561300c5760038701805485908110612f8257fe5b6000918252602080832090910154600160a060020a031680835260048a01808352604080852080548686528287208054820190559285529490945583518c815292830182905282840181905292519095509192507faafcd902e5217659ba924addbacae78ebf6a7c77409df0d0065b9ebca0129873919081900360600190a1836001019350612f66565b5050505050505050565b60008181526001602081815260408084208151610120810183528154815293810154600160a060020a0316848401526002810154848301526003810180548351818602810186019094528084529194869461310094919387936060860193929091908301828280156106dc57602002820191906000526020600020908154600160a060020a031681526001909101906020018083116106be575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a090910152612c12565b1515613139576040805185815261c3a0602082015281516000805160206133b2833981519152929181900390910190a1600092506133aa565b6008820154610100900460ff168061315b5750600882015462010000900460ff165b15613193576040805185815261c3b4602082015281516000805160206133b2833981519152929181900390910190a1600092506133aa565b600882015460ff16156131d3576040805185815261c3aa602082015281516000805160206133b2833981519152929181900390910190a1600092506133aa565b6003820154600583015410156133a55760038054600184015460058501549285018054600160a060020a039384169463d1daeede948a94169291811061321557fe5b6000918252602080832090910154604080517c010000000000000000000000000000000000000000000000000000000063ffffffff89160281526004810196909652600160a060020a0394851660248701529316604485015291516064808501949192918390030190829087803b15801561328f57600080fd5b505af11580156132a3573d6000803e3d6000fd5b505050506040513d60208110156132b957600080fd5b50516005830154600384018054929350839260068601926000929181106132dc57fe5b6000918252602080832090910154600160a060020a039081168452908301939093526040909101902091909155600183015460058401546003850180547f6d3b2a0e9b0833bfb42336839231773ea07aed87bb2fdee34c960696ea11f849948994169290811061334857fe5b6000918252602091829020015460408051948552600160a060020a0393841692850192909252919091168282015260608201849052519081900360800190a160088201805460ff1916600190811790915560058301805490910190555b600192505b5050919050560094bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa33a165627a7a7230582015c49828e993765b6271d52772e8b363608923c2b724b6ef6c5b63e561f7aff70029";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<>();
        _addresses.put("1537456515861", "0xb5537783caee18894a3c8a6518ceef0034d8d924");
    }

    protected DogeClaimManager(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DogeClaimManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<DepositBondedEventResponse> getDepositBondedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("DepositBonded", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<DepositBondedEventResponse> responses = new ArrayList<DepositBondedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositBondedEventResponse typedResponse = new DepositBondedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<DepositBondedEventResponse> depositBondedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("DepositBonded", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, DepositBondedEventResponse>() {
            @Override
            public DepositBondedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                DepositBondedEventResponse typedResponse = new DepositBondedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<DepositUnbondedEventResponse> getDepositUnbondedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("DepositUnbonded", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<DepositUnbondedEventResponse> responses = new ArrayList<DepositUnbondedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositUnbondedEventResponse typedResponse = new DepositUnbondedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<DepositUnbondedEventResponse> depositUnbondedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("DepositUnbonded", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, DepositUnbondedEventResponse>() {
            @Override
            public DepositUnbondedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                DepositUnbondedEventResponse typedResponse = new DepositUnbondedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<SuperblockClaimCreatedEventResponse> getSuperblockClaimCreatedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("SuperblockClaimCreated", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<SuperblockClaimCreatedEventResponse> responses = new ArrayList<SuperblockClaimCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimCreatedEventResponse typedResponse = new SuperblockClaimCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SuperblockClaimCreatedEventResponse> superblockClaimCreatedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("SuperblockClaimCreated", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, SuperblockClaimCreatedEventResponse>() {
            @Override
            public SuperblockClaimCreatedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                SuperblockClaimCreatedEventResponse typedResponse = new SuperblockClaimCreatedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<SuperblockClaimChallengedEventResponse> getSuperblockClaimChallengedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("SuperblockClaimChallenged", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<SuperblockClaimChallengedEventResponse> responses = new ArrayList<SuperblockClaimChallengedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimChallengedEventResponse typedResponse = new SuperblockClaimChallengedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SuperblockClaimChallengedEventResponse> superblockClaimChallengedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("SuperblockClaimChallenged", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, SuperblockClaimChallengedEventResponse>() {
            @Override
            public SuperblockClaimChallengedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                SuperblockClaimChallengedEventResponse typedResponse = new SuperblockClaimChallengedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<SuperblockBattleDecidedEventResponse> getSuperblockBattleDecidedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("SuperblockBattleDecided", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<SuperblockBattleDecidedEventResponse> responses = new ArrayList<SuperblockBattleDecidedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockBattleDecidedEventResponse typedResponse = new SuperblockBattleDecidedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.winner = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.loser = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SuperblockBattleDecidedEventResponse> superblockBattleDecidedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("SuperblockBattleDecided", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, SuperblockBattleDecidedEventResponse>() {
            @Override
            public SuperblockBattleDecidedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                SuperblockBattleDecidedEventResponse typedResponse = new SuperblockBattleDecidedEventResponse();
                typedResponse.log = log;
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.winner = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.loser = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<SuperblockClaimSuccessfulEventResponse> getSuperblockClaimSuccessfulEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("SuperblockClaimSuccessful", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<SuperblockClaimSuccessfulEventResponse> responses = new ArrayList<SuperblockClaimSuccessfulEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimSuccessfulEventResponse typedResponse = new SuperblockClaimSuccessfulEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SuperblockClaimSuccessfulEventResponse> superblockClaimSuccessfulEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("SuperblockClaimSuccessful", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, SuperblockClaimSuccessfulEventResponse>() {
            @Override
            public SuperblockClaimSuccessfulEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                SuperblockClaimSuccessfulEventResponse typedResponse = new SuperblockClaimSuccessfulEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<SuperblockClaimPendingEventResponse> getSuperblockClaimPendingEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("SuperblockClaimPending", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<SuperblockClaimPendingEventResponse> responses = new ArrayList<SuperblockClaimPendingEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimPendingEventResponse typedResponse = new SuperblockClaimPendingEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SuperblockClaimPendingEventResponse> superblockClaimPendingEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("SuperblockClaimPending", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, SuperblockClaimPendingEventResponse>() {
            @Override
            public SuperblockClaimPendingEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                SuperblockClaimPendingEventResponse typedResponse = new SuperblockClaimPendingEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<SuperblockClaimFailedEventResponse> getSuperblockClaimFailedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("SuperblockClaimFailed", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<SuperblockClaimFailedEventResponse> responses = new ArrayList<SuperblockClaimFailedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimFailedEventResponse typedResponse = new SuperblockClaimFailedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SuperblockClaimFailedEventResponse> superblockClaimFailedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("SuperblockClaimFailed", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, SuperblockClaimFailedEventResponse>() {
            @Override
            public SuperblockClaimFailedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                SuperblockClaimFailedEventResponse typedResponse = new SuperblockClaimFailedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<VerificationGameStartedEventResponse> getVerificationGameStartedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("VerificationGameStarted", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<VerificationGameStartedEventResponse> responses = new ArrayList<VerificationGameStartedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VerificationGameStartedEventResponse typedResponse = new VerificationGameStartedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<VerificationGameStartedEventResponse> verificationGameStartedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("VerificationGameStarted", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, VerificationGameStartedEventResponse>() {
            @Override
            public VerificationGameStartedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                VerificationGameStartedEventResponse typedResponse = new VerificationGameStartedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public List<ErrorClaimEventResponse> getErrorClaimEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("ErrorClaim", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<ErrorClaimEventResponse> responses = new ArrayList<ErrorClaimEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ErrorClaimEventResponse typedResponse = new ErrorClaimEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.err = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ErrorClaimEventResponse> errorClaimEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("ErrorClaim", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ErrorClaimEventResponse>() {
            @Override
            public ErrorClaimEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                ErrorClaimEventResponse typedResponse = new ErrorClaimEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.err = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<DepositMadeEventResponse> getDepositMadeEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("DepositMade", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<DepositMadeEventResponse> responses = new ArrayList<DepositMadeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositMadeEventResponse typedResponse = new DepositMadeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.who = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<DepositMadeEventResponse> depositMadeEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("DepositMade", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, DepositMadeEventResponse>() {
            @Override
            public DepositMadeEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                DepositMadeEventResponse typedResponse = new DepositMadeEventResponse();
                typedResponse.log = log;
                typedResponse.who = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<DepositWithdrawnEventResponse> getDepositWithdrawnEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("DepositWithdrawn", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<DepositWithdrawnEventResponse> responses = new ArrayList<DepositWithdrawnEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositWithdrawnEventResponse typedResponse = new DepositWithdrawnEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.who = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<DepositWithdrawnEventResponse> depositWithdrawnEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("DepositWithdrawn", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, DepositWithdrawnEventResponse>() {
            @Override
            public DepositWithdrawnEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                DepositWithdrawnEventResponse typedResponse = new DepositWithdrawnEventResponse();
                typedResponse.log = log;
                typedResponse.who = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<BigInteger> superblockTimeout() {
        final Function function = new Function("superblockTimeout", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> superblockConfirmations() {
        final Function function = new Function("superblockConfirmations", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> superblocks() {
        final Function function = new Function("superblocks", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> withdrawDeposit(BigInteger amount) {
        final Function function = new Function(
                "withdrawDeposit", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> makeDeposit(BigInteger weiValue) {
        final Function function = new Function(
                "makeDeposit", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<BigInteger> minDeposit() {
        final Function function = new Function("minDeposit", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> dogeBattleManager() {
        final Function function = new Function("dogeBattleManager", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> superblockDelay() {
        final Function function = new Function("superblockDelay", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getDeposit(String who) {
        final Function function = new Function("getDeposit", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(who)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple8<byte[], String, BigInteger, BigInteger, BigInteger, Boolean, Boolean, Boolean>> claims(byte[] param0) {
        final Function function = new Function("claims", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Bool>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple8<byte[], String, BigInteger, BigInteger, BigInteger, Boolean, Boolean, Boolean>>(
                new Callable<Tuple8<byte[], String, BigInteger, BigInteger, BigInteger, Boolean, Boolean, Boolean>>() {
                    @Override
                    public Tuple8<byte[], String, BigInteger, BigInteger, BigInteger, Boolean, Boolean, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<byte[], String, BigInteger, BigInteger, BigInteger, Boolean, Boolean, Boolean>(
                                (byte[]) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (Boolean) results.get(5).getValue(), 
                                (Boolean) results.get(6).getValue(), 
                                (Boolean) results.get(7).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> deposits(String param0) {
        final Function function = new Function("deposits", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public static RemoteCall<DogeClaimManager> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _superblocks, String _dogeBattleManager, BigInteger _superblockDelay, BigInteger _superblockTimeout, BigInteger _superblockConfirmations) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_superblocks), 
                new org.web3j.abi.datatypes.Address(_dogeBattleManager), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockDelay), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockTimeout), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockConfirmations)));
        return deployRemoteCall(DogeClaimManager.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<DogeClaimManager> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _superblocks, String _dogeBattleManager, BigInteger _superblockDelay, BigInteger _superblockTimeout, BigInteger _superblockConfirmations) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_superblocks), 
                new org.web3j.abi.datatypes.Address(_dogeBattleManager), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockDelay), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockTimeout), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockConfirmations)));
        return deployRemoteCall(DogeClaimManager.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public RemoteCall<TransactionReceipt> bondDeposit(byte[] superblockHash, String account, BigInteger amount) {
        final Function function = new Function(
                "bondDeposit", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash), 
                new org.web3j.abi.datatypes.Address(account), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getBondedDeposit(byte[] superblockHash, String account) {
        final Function function = new Function("getBondedDeposit", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash), 
                new org.web3j.abi.datatypes.Address(account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> proposeSuperblock(byte[] _blocksMerkleRoot, BigInteger _accumulatedWork, BigInteger _timestamp, BigInteger _prevTimestamp, byte[] _lastHash, BigInteger _lastBits, byte[] _parentHash) {
        final Function function = new Function(
                "proposeSuperblock", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_blocksMerkleRoot), 
                new org.web3j.abi.datatypes.generated.Uint256(_accumulatedWork), 
                new org.web3j.abi.datatypes.generated.Uint256(_timestamp), 
                new org.web3j.abi.datatypes.generated.Uint256(_prevTimestamp), 
                new org.web3j.abi.datatypes.generated.Bytes32(_lastHash), 
                new org.web3j.abi.datatypes.generated.Uint32(_lastBits), 
                new org.web3j.abi.datatypes.generated.Bytes32(_parentHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> challengeSuperblock(byte[] superblockHash) {
        final Function function = new Function(
                "challengeSuperblock", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> checkClaimFinished(byte[] superblockHash) {
        final Function function = new Function(
                "checkClaimFinished", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> confirmClaim(byte[] superblockHash, byte[] descendantId) {
        final Function function = new Function(
                "confirmClaim", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash), 
                new org.web3j.abi.datatypes.generated.Bytes32(descendantId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> rejectClaim(byte[] superblockHash) {
        final Function function = new Function(
                "rejectClaim", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> sessionDecided(byte[] sessionId, byte[] superblockHash, String winner, String loser) {
        final Function function = new Function(
                "sessionDecided", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(sessionId), 
                new org.web3j.abi.datatypes.generated.Bytes32(superblockHash), 
                new org.web3j.abi.datatypes.Address(winner), 
                new org.web3j.abi.datatypes.Address(loser)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> getInBattleAndSemiApprovable(byte[] superblockHash) {
        final Function function = new Function("getInBattleAndSemiApprovable", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<String> getClaimSubmitter(byte[] superblockHash) {
        final Function function = new Function("getClaimSubmitter", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> getNewSuperblockEventTimestamp(byte[] superblockHash) {
        final Function function = new Function("getNewSuperblockEventTimestamp", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Boolean> getClaimExists(byte[] superblockHash) {
        final Function function = new Function("getClaimExists", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Boolean> getClaimDecided(byte[] superblockHash) {
        final Function function = new Function("getClaimDecided", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Boolean> getClaimInvalid(byte[] superblockHash) {
        final Function function = new Function("getClaimInvalid", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Boolean> getClaimVerificationOngoing(byte[] superblockHash) {
        final Function function = new Function("getClaimVerificationOngoing", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<BigInteger> getClaimChallengeTimeout(byte[] superblockHash) {
        final Function function = new Function("getClaimChallengeTimeout", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getClaimRemainingChallengers(byte[] superblockHash) {
        final Function function = new Function("getClaimRemainingChallengers", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<byte[]> getSession(byte[] superblockHash, String challenger) {
        final Function function = new Function("getSession", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash), 
                new org.web3j.abi.datatypes.Address(challenger)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<List> getClaimChallengers(byte[] superblockHash) {
        final Function function = new Function("getClaimChallengers", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public static DogeClaimManager load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DogeClaimManager(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static DogeClaimManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DogeClaimManager(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class DepositBondedEventResponse {
        public Log log;

        public byte[] superblockHash;

        public String account;

        public BigInteger amount;
    }

    public static class DepositUnbondedEventResponse {
        public Log log;

        public byte[] superblockHash;

        public String account;

        public BigInteger amount;
    }

    public static class SuperblockClaimCreatedEventResponse {
        public Log log;

        public byte[] superblockHash;

        public String submitter;
    }

    public static class SuperblockClaimChallengedEventResponse {
        public Log log;

        public byte[] superblockHash;

        public String challenger;
    }

    public static class SuperblockBattleDecidedEventResponse {
        public Log log;

        public byte[] sessionId;

        public String winner;

        public String loser;
    }

    public static class SuperblockClaimSuccessfulEventResponse {
        public Log log;

        public byte[] superblockHash;

        public String submitter;
    }

    public static class SuperblockClaimPendingEventResponse {
        public Log log;

        public byte[] superblockHash;

        public String submitter;
    }

    public static class SuperblockClaimFailedEventResponse {
        public Log log;

        public byte[] superblockHash;

        public String submitter;
    }

    public static class VerificationGameStartedEventResponse {
        public Log log;

        public byte[] superblockHash;

        public String submitter;

        public String challenger;

        public byte[] sessionId;
    }

    public static class ErrorClaimEventResponse {
        public Log log;

        public byte[] superblockHash;

        public BigInteger err;
    }

    public static class DepositMadeEventResponse {
        public Log log;

        public String who;

        public BigInteger amount;
    }

    public static class DepositWithdrawnEventResponse {
        public Log log;

        public String who;

        public BigInteger amount;
    }
}
