package org.dogethereum.agents.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes20;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint24;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.3.1.
 */
public class DogeToken extends Contract {
    private static final String BINARY = "0x60c0604052600460808190527f48302e310000000000000000000000000000000000000000000000000000000060a09081526200004091600691906200018e565b503480156200004e57600080fd5b50604051606080620035c9833981016040818152825160208085015194830151838501845260098086527f446f6765546f6b656e0000000000000000000000000000000000000000000000838701908152855180870187529182527f444f4745544f4b454e00000000000000000000000000000000000000000000008285015233600090815260019094529483208390558280558551939695919492939192600892620000fe916003916200018e565b506004805460ff191660ff84161790558051620001239060059060208401906200018e565b505060078054600160a060020a03978816600160a060020a0319918216179091556008805460ff909616740100000000000000000000000000000000000000000260a060020a60ff021997909816959091169490941794909416949094179091555062000233915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001d157805160ff191683800117855562000201565b8280016001018555821562000201579182015b8281111562000201578251825591602001919060010190620001e4565b506200020f92915062000213565b5090565b6200023091905b808211156200020f57600081556001016200021a565b90565b61338680620002436000396000f3006080604052600436106101a85763ffffffff60e060020a60003504166305347cdc81146101ad57806306fdde03146101d4578063095ea7b31461025e57806318160ddd1461029657806323b872dd146102ab578063313ce567146102d55780633e9745311461030057806341f7a1f7146103695780634b48a842146103d857806354fd4d50146103fa5780635be3b1b91461040f578063636a851514610426578063657857de146104545780636d440c6b146104eb57806370a082311461050d5780637b837b7a1461052e57806395c39bf61461055357806395d89b41146105685780639ed003161461057d578063a9059cbb14610595578063b4eae1cb146105b9578063b52d521d146101ad578063b85278a914610553578063ba24ecab146105ce578063c0f76faf146105fb578063c3d5e18614610613578063c5a4a2b71461068b578063cae9ca51146106c7578063cf496b1014610730578063d488399114610553578063d48e6a9a14610761578063d63ceb4614610852578063dd62ed3e14610899578063dd8f13bb146108c0578063eac66179146108d5578063f5b2040014610901575b600080fd5b3480156101b957600080fd5b506101c2610916565b60408051918252519081900360200190f35b3480156101e057600080fd5b506101e961091e565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561022357818101518382015260200161020b565b50505050905090810190601f1680156102505780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561026a57600080fd5b50610282600160a060020a03600435166024356109ac565b604080519115158252519081900360200190f35b3480156102a257600080fd5b506101c2610a12565b3480156102b757600080fd5b50610282600160a060020a0360043581169060243516604435610a18565b3480156102e157600080fd5b506102ea610ae5565b6040805160ff9092168252519081900360200190f35b34801561030c57600080fd5b506103226001606060020a031960043516610aee565b60408051600160a060020a03909716875260208701959095528585019390935263ffffffff9091166060850152608084015262ffffff1660a0830152519081900360c00190f35b34801561037557600080fd5b5061038763ffffffff60043516610b39565b60408051600160a060020a0390981688526001606060020a03199687166020890152878101959095526060870193909352608086019190915260a085015290911660c0830152519081900360e00190f35b3480156103e457600080fd5b506101c26001606060020a031960043516610b89565b34801561040657600080fd5b506101e9610ba8565b6104246001606060020a031960043516610c03565b005b34801561043257600080fd5b5061043b610c64565b6040805163ffffffff9092168252519081900360200190f35b34801561046057600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261042494369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750610c899650505050505050565b3480156104f757600080fd5b506104246001606060020a031960043516610fcb565b34801561051957600080fd5b506101c2600160a060020a0360043516611143565b34801561053a57600080fd5b506104246001606060020a03196004351660243561115e565b34801561055f57600080fd5b506101c2611283565b34801561057457600080fd5b506101e9611288565b34801561058957600080fd5b506102826004356112e3565b3480156105a157600080fd5b50610282600160a060020a0360043516602435611372565b3480156105c557600080fd5b506102ea6113ea565b3480156105da57600080fd5b506105e361140b565b6040805162ffffff9092168252519081900360200190f35b34801561060757600080fd5b50610424600435611412565b34801561061f57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101c2943694929360249392840191908190840183828082843750949750508435955050505060208201356001606060020a0319169160400135600160a060020a0316905061142e565b34801561069757600080fd5b506106a360043561167c565b604080516001606060020a0319909316835290151560208301528051918290030190f35b3480156106d357600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610282948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506116bd9650505050505050565b34801561073c57600080fd5b50610745611858565b60408051600160a060020a039092168252519081900360200190f35b34801561076d57600080fd5b5061077f63ffffffff60043516611867565b6040518089600160a060020a0316600160a060020a03168152602001886bffffffffffffffffffffffff19166bffffffffffffffffffffffff1916815260200187815260200186815260200185815260200180602001848152602001836bffffffffffffffffffffffff19166bffffffffffffffffffffffff19168152602001828103825285818151815260200191508051906020019060200280838360005b8381101561083757818101518382015260200161081f565b50505050905001995050505050505050505060405180910390f35b34801561085e57600080fd5b506108776001606060020a03196004351660243561195a565b60408051938452602084019290925261ffff1682820152519081900360600190f35b3480156108a557600080fd5b506101c2600160a060020a03600435811690602435166119bc565b3480156108cc57600080fd5b506107456119e7565b3480156108e157600080fd5b506102826001606060020a031960043581169060243590604435166119f6565b34801561090d57600080fd5b506101c2611f0c565b6311e1a30081565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156109a45780601f10610979576101008083540402835291602001916109a4565b820191906000526020600020905b81548152906001019060200180831161098757829003601f168201915b505050505081565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60005481565b600160a060020a0383166000908152600160205260408120548211801590610a635750600160a060020a03841660009081526002602090815260408083203384529091529020548211155b1515610a6e57600080fd5b600160a060020a038084166000818152600160209081526040808320805488019055938816808352848320805488900390556002825284832033845282529184902080548790039055835186815293519293919260008051602061333b8339815191529281900390910190a35060015b9392505050565b60045460ff1681565b600b60205260009081526040902080546001820154600283015460048401546005850154600690950154600160a060020a03909416949293919263ffffffff9091169162ffffff1686565b6009602052600090815260409020805460018201546002830154600384015460048501546006860154600790960154600160a060020a0390951695606060020a9485029593949293919290910287565b6001606060020a0319166000908152600b602052604090206003015490565b6006805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156109a45780601f10610979576101008083540402835291602001916109a4565b6001606060020a031981166000908152600b602052604090208054600160a060020a03163314610c55576040805161ea748152905160008051602061331b8339815191529181900360200190a1610c60565b600581018054340190555b5050565b6008547501000000000000000000000000000000000000000000900463ffffffff1681565b600080600080600080876000815181101515610ca157fe5b90602001015160f860020a900460f860020a02600160f860020a031916600360f860020a0214945060218801519550600280336040516020018082600160a060020a0316600160a060020a0316606060020a0281526014019150506040516020818303038152906040526040518082805190602001908083835b60208310610d3a5780518252601f199092019160209182019101610d1b565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af1158015610d7b573d6000803e3d6000fd5b5050506040513d6020811015610d9057600080fd5b50516040805160208181019390935281518082038401815290820191829052805190928291908401908083835b60208310610ddc5780518252601f199092019160209182019101610dbd565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af1158015610e1d573d6000803e3d6000fd5b5050506040513d6020811015610e3257600080fd5b50519350610e408488611f12565b9250610e4c8686611fe9565b600160a060020a03848116911614610e86576040805161ea6a8152905160008051602061331b8339815191529181900360200190a1610fc1565b610e9086866120fd565b6001606060020a031981166000908152600b6020526040902080549193509150600160a060020a031615610ee6576040805161ea6f8152905160008051602061331b8339815191529181900360200190a1610fc1565b80543373ffffffffffffffffffffffffffffffffffffffff19918216178255600c805460068401805462ffffff191662ffffff909216919091179055604080518082019091526001606060020a03198516815260006020820181815283546001810185559390915290517fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c79092018054915191909316606060020a9092049190911774ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000911515919091021790555b5050505050505050565b6001606060020a031981166000908152600b602052604081208054909190600160a060020a03163314611020576040805161ea748152905160008051602061331b8339815191529181900360200190a161113e565b60018201541515806110355750600282015415155b806110435750600582015415155b15611070576040805161ea7e8152905160008051602061331b8339815191529181900360200190a161113e565b6006820154600c8054909162ffffff1690811061108957fe5b60009182526020808320909101805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001781556001606060020a031986168352600b90915260408220805473ffffffffffffffffffffffffffffffffffffffff1916815560018101839055600281018390559092509061111960038301826131c4565b5060048101805463ffffffff1916905560006005820155600601805462ffffff191690555b505050565b600160a060020a031660009081526001602052604090205490565b6001606060020a031982166000908152600b602052604090208054600160a060020a031633146111b0576040805161ea748152905160008051602061331b8339815191529181900360200190a161113e565b81816005015410156111e4576040805161ea888152905160008051602061331b8339815191529181900360200190a161113e565b600860149054906101000a900460ff1660ff16816002015482600101540102600a548383600501540381151561121657fe5b041015611245576040805161ea928152905160008051602061331b8339815191529181900360200190a161113e565b6005810180548390039055604051339083156108fc029084906000818181858888f1935050505015801561127d573d6000803e3d6000fd5b50505050565b600a81565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156109a45780601f10610979576101008083540402835291602001916109a4565b600073__Set___________________________________636ce8e081600d846040518363ffffffff1660e060020a028152600401808381526020018281526020019250505060206040518083038186803b15801561134057600080fd5b505af4158015611354573d6000803e3d6000fd5b505050506040513d602081101561136a57600080fd5b505192915050565b3360009081526001602052604081205482111561138e57600080fd5b33600081815260016020908152604080832080548790039055600160a060020a038716808452928190208054870190558051868152905192939260008051602061333b833981519152929181900390910190a350600192915050565b60085474010000000000000000000000000000000000000000900460ff1681565b600c545b90565b600854600160a060020a0316331461142957600080fd5b600a55565b6007546000908190819081908190819081908190600160a060020a0316331461145657600080fd5b6001606060020a03198a166000908152600b602052604090208054909750600160a060020a031615156114ab576040805161ea9c8152905160008051602061331b8339815191529181900360200190a161166d565b6114b58c8b6122c5565b8096508197508298508399505050505073__Set___________________________________63831cb739600d8d6040518363ffffffff1660e060020a028152600401808381526020018281526020019250505060206040518083038186803b15801561152057600080fd5b505af4158015611534573d6000803e3d6000fd5b505050506040513d602081101561154a57600080fd5b5051915081151561157d576040805161eaa68152905160008051602061331b8339815191529181900360200190a161166d565b6040805160608101825287815260208082018e815261ffff87811694840194855260038c81018054600180820183556000928352959091209551910290940193845590518383015592516002909201805461ffff1916929093169190911790915587018054870190556115f085856120fd565b90506001606060020a03198a81169082161461165d576311e1a30086101561163a576040805161eb148152905160008051602061331b8339815191529181900360200190a161166d565b865461165590869086908990600160a060020a03168d612474565b85975061166d565b6002870180548790039055600097505b50505050505050949350505050565b600c80548290811061168a57fe5b600091825260209091200154606060020a8102915074010000000000000000000000000000000000000000900460ff1682565b336000818152600260209081526040808320600160a060020a038816808552908352818420879055815187815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a383600160a060020a031660405180807f72656365697665417070726f76616c28616464726573732c75696e743235362c81526020017f616464726573732c627974657329000000000000000000000000000000000000815250602e019050604051809103902060e060020a9004338530866040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a03168152602001828051906020019080838360005b838110156117fd5781810151838201526020016117e5565b50505050905090810190601f16801561182a5780820380516001836020036101000a031916815260200191505b509450505050506000604051808303816000875af192505050151561184e57600080fd5b5060019392505050565b600754600160a060020a031681565b63ffffffff81166000908152600960209081526040808320805460018201546002830154600384015460048501546005860180548851818b0281018b01909952808952600160a060020a0390961699606060020a9095029893979296919560609594859492919083018282801561192957602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116118ec5790505b50505050509350806006015492508060070160009054906101000a9004606060020a02915050919395975091939597565b6001606060020a031982166000908152600b602052604081206003810180548392839290918391908790811061198c57fe5b6000918252602090912060039091020180546001820154600290920154909991985061ffff169650945050505050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600854600160a060020a031681565b600080600080606060008060006311e1a3008a1015611a37576040805161eab08152905160008051602061331b8339815191529181900360200190a1611efe565b336000908152600160205260409020548a1115611a76576040805161eaba8152905160008051602061331b8339815191529181900360200190a1611efe565b6001606060020a031989166000908152600b602052604090208054909750600160a060020a03161515611acb576040805161eac48152905160008051602061331b8339815191529181900360200190a1611efe565b8987600101541015611aff576040805161eace8152905160008051602061331b8339815191529181900360200190a1611efe565b6103e8600a8b026040805160e0810182528a54600160a060020a0316815260018b015460208083019190915260028c01548284015260038c018054845181840281018401909552808552959094049a508a8f039950611bf4948a9492938d9360608601939192909160009084015b82821015611bbd5760008481526020908190206040805160608101825260038602909201805483526001808201548486015260029091015461ffff16918301919091529083529092019101611b6d565b50505090825250600482015463ffffffff1660208201526005820154604082015260069091015462ffffff1660609091015261263e565b9196509450925090508015611c295760408051828152905160008051602061331b8339815191529181900360200190a1611efe565b8654600160a060020a0390811660009081526001602090815260409182902080548a019055895482518a81529251931692339260008051602061333b83398151915292908290030190a333600081815260016020908152604080832080548f900390558051898152905192939260008051602061333b833981519152929181900390910190a360085460408051750100000000000000000000000000000000000000000090920463ffffffff1682526001606060020a03198b16602083015280517fa452c19abf34fda31e59719208cf19c16be3dc9573465e8bf2ec1e4e89d3fad89281900390910190a16101006040519081016040528033600160a060020a031681526020018c6bffffffffffffffffffffffff191681526020018b81526020018781526020014281526020018581526020018481526020018a6bffffffffffffffffffffffff191681525060096000600860159054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002060008201518160000160006101000a815481600160a060020a030219169083600160a060020a0316021790555060208201518160010160006101000a815481600160a060020a030219169083606060020a9004021790555060408201518160020155606082015181600301556080820151816004015560a0820151816005019080519060200190611e399291906131e8565b5060c0820151600682015560e0909101516007909101805473ffffffffffffffffffffffffffffffffffffffff1916606060020a909204919091179055600187810180548488019003905560028801805484019055845160048901805463ffffffff19811663ffffffff91821690930181169290921790556008805478ffffffff000000000000000000000000000000000000000000198116750100000000000000000000000000000000000000000091829004841685019093160291909117905597505b505050505050509392505050565b600a5481565b60008060008084516041141515611f2c5760009350611fe0565b505050602082015160218301516041840151909160001a601b60ff82161015611f5357601b015b8060ff16601b14158015611f6b57508060ff16601c14155b15611f795760009350611fe0565b60408051600080825260208083018085528a905260ff8516838501526060830187905260808301869052925160019360a0808501949193601f19840193928390039091019190865af1158015611fd3573d6000803e3d6000fd5b5050506020604051035193505b50505092915050565b600080806401000003d01985860991506401000003d01985830991506401000003d019600783089150612043827f3fffffffffffffffffffffffffffffffffffffffffffffffffffffffbfffff0c6401000003d01961279a565b90506001808216148415151461205c576401000003d019035b6401000003d019818209821461207157600080fd5b848160405160200180838152602001828152602001925050506040516020818303038152906040526040518082805190602001908083835b602083106120c85780518252601f1990920191602091820191016120a9565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912098975050505050505050565b6000808261212b577f020000000000000000000000000000000000000000000000000000000000000061214d565b7f03000000000000000000000000000000000000000000000000000000000000005b604080517fff0000000000000000000000000000000000000000000000000000000000000083166020808301919091526021808301899052835180840390910181526041909201928390528151939450600393600293918291908401908083835b602083106121cd5780518252601f1990920191602091820191016121ae565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af115801561220e573d6000803e3d6000fd5b5050506040513d602081101561222357600080fd5b50516040805160208181019390935281518082038401815290820191829052805190928291908401908083835b6020831061226f5780518252601f199092019160209182019101612250565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af11580156122b0573d6000803e3d6000fd5b505060405151606060020a0295945050505050565b6000806000806122d3613297565b600480825260609081908190819081906122f0908d9060006127e4565b8852815190965090945061231c908d908690600090811061230d57fe5b906020019060200201516128ed565b151560a088015260808701528551612337908d90600261291c565b8952815190955090935090915061237f908d908490600090811061235757fe5b9060200190602002015185600081518110151561237057fe5b90602001906020020151612a7a565b6001606060020a031916602087015280518190600090811061239d57fe5b60209081029091018101516040880152600060608801528601516001606060020a0319908116908c161461242c576123f78c8360018151811015156123de57fe5b9060200190602002015185600181518110151561237057fe5b6001606060020a031916602087015280518190600190811061241557fe5b602090810290910101516040870152600160608701525b60208601516001606060020a03198c811691161461244957600080fd5b856040015186608001518760a001518860600151995099509950995050505050505092959194509250565b60008080806124838989611fe9565b600160a060020a03871660008181526001602090815260409182902080546103e8600a8e020490810190915582518181529251949850965091927f275a11e033325e9b28a23131fcc7e243a49bb38beb686051976dd8c8899d9a3c929181900390910190a2604080518481529051600160a060020a0388169160009160008051602061333b8339815191529181900360200190a3600160a060020a03851660008181526001602090815260409182902080546103e8600a8d0204908101909155825181815292519095507f275a11e033325e9b28a23131fcc7e243a49bb38beb686051976dd8c8899d9a3c9281900390910190a2604080518381529051600160a060020a0387169160009160008051602061333b8339815191529181900360200190a350600160a060020a0383166000818152600160209081526040918290208054868b03869003908101909155825181815292519093927f275a11e033325e9b28a23131fcc7e243a49bb38beb686051976dd8c8899d9a3c92908290030190a2604080518281529051600160a060020a0386169160009160008051602061333b8339815191529181900360200190a3505050505050505050565b6000606060008060008060008060008960600151518a6080015163ffffffff1610151561266f5761ead8985061278c565b6302faf0809650896080015193508392505b8a8510801561269a57508960600151518363ffffffff16105b156126db5760608a0151805163ffffffff85169081106126b657fe5b60209081029091010151516305f5e10097909701969490940193600190920191612681565b8a8510156126ed5761eae2985061278c565b868b116126fe5761eaec985061278c565b83830391508163ffffffff16604051908082528060200260200182016040528015612733578160200160208202803883390190505b509750600090505b8163ffffffff168163ffffffff16101561278257838101888263ffffffff1681518110151561276657fe5b63ffffffff90921660209283029091019091015260010161273b565b600098508a850395505b505050505092959194509250565b600060405160208152602080820152602060408201528460608201528360808201528260a082015260208160c08360006005600019f115156127db57600080fd5b51949350505050565b60608060008060008060608060006127fc8c8c612aa5565b9b50955089158061280c5750858a115b156128195785945061281d565b8994505b84604051908082528060200260200182016040528015612847578160200160208202803883390190505b50925084604051908082528060200260200182016040528015612874578160200160208202803883390190505b509150600090505b848110156128dd578a838281518110151561289357fe5b6020908102909101015260249a909a01996128ae8c8c612aa5565b8351909c5090945084908390839081106128c457fe5b602090810290910101529983016004019960010161287c565b50909a9099509650505050505050565b60240160008080806128ff8686612aa5565b955061290d90508686612b67565b50909890975095505050505050565b6060806060600080600080606080606060006129388e8e612aa5565b9d5096508b15806129485750868c115b1561295557869550612959565b8b95505b85604051908082528060200260200182016040528015612983578160200160208202803883390190505b509350856040519080825280602002602001820160405280156129b0578160200160208202803883390190505b509250856040519080825280602002602001820160405280156129dd578160200160208202803883390190505b509150600090505b85811015612a68576129f98e8e6040612b9e565b8282815181101515612a0757fe5b6020908102909101015260089c909c019b612a228e8e612aa5565b8551909e509095508d90859083908110612a3857fe5b6020908102909101015282518590849083908110612a5257fe5b602090810290910101529b84019b6001016129e5565b509c919b509998509650505050505050565b6000612a87848484612ebf565b15612aa057612a998484600301613005565b9050610ade565b610ade565b60008060008484815181101515612ab857fe5b90602001015160f860020a900460f860020a0260f860020a9004905060018401935060fd8160ff161015612af45760ff81169250839150612b5f565b8060ff1660fd1415612b1957612b0c85856010612b9e565b8460020192509250612b5f565b8060ff1660fe1415612b3e57612b3185856020612b9e565b8460040192509250612b5f565b8060ff1660ff1415612b5f57612b5685856040612b9e565b84600801925092505b509250929050565b606060008060006060600080612b7d8989613071565b98509250612b8b89896130f2565b949b919a50985092965091945050505050565b60008160081415612bdb578383815181101515612bb757fe5b90602001015160f860020a900460f860020a0260f860020a900460ff169050610ade565b8160101415612c47578383600101815181101515612bf557fe5b90602001015160f860020a900460f860020a0260f860020a9004610100028484815181101515612c2157fe5b90602001015160f860020a900460f860020a0260f860020a90040161ffff169050610ade565b8160201415612d18578383600301815181101515612c6157fe5b90602001015160f860020a900460f860020a0260f860020a90046301000000028484600201815181101515612c9257fe5b90602001015160f860020a900460f860020a0260f860020a900462010000028585600101815181101515612cc257fe5b90602001015160f860020a900460f860020a0260f860020a9004610100028686815181101515612cee57fe5b90602001015160f860020a900460f860020a0260f860020a900401010163ffffffff169050610ade565b8160401415610ade578383600701815181101515612d3257fe5b90602001015160f860020a900460f860020a0260f860020a9004670100000000000000028484600601815181101515612d6757fe5b90602001015160f860020a900460f860020a0260f860020a90046601000000000000028585600501815181101515612d9b57fe5b90602001015160f860020a900460f860020a0260f860020a900465010000000000028686600401815181101515612dce57fe5b90602001015160f860020a900460f860020a0260f860020a9004640100000000028787600301815181101515612e0057fe5b90602001015160f860020a900460f860020a0260f860020a90046301000000028888600201815181101515612e3157fe5b90602001015160f860020a900460f860020a0260f860020a900462010000028989600101815181101515612e6157fe5b90602001015160f860020a900460f860020a0260f860020a9004610100028a8a815181101515612e8d57fe5b90602001015160f860020a900460f860020a0260f860020a90040101010101010167ffffffffffffffff169050610ade565b6000816019148015612f0157508383815181101515612eda57fe5b90602001015160f860020a900460f860020a02600160f860020a031916607660f860020a02145b8015612f4057508383600101815181101515612f1957fe5b90602001015160f860020a900460f860020a02600160f860020a03191660a960f860020a02145b8015612f7f57508383600201815181101515612f5857fe5b90602001015160f860020a900460f860020a02600160f860020a031916601460f860020a02145b8015612fbe57508383601701815181101515612f9757fe5b90602001015160f860020a900460f860020a02600160f860020a031916608860f860020a02145b8015612ffd57508383601801815181101515612fd657fe5b90602001015160f860020a900460f860020a02600160f860020a03191660ac60f860020a02145b949350505050565b600080805b601481101561306357806013036008028585830181518110151561302a57fe5b90602001015160f860020a900460f860020a0260f860020a9004600160a060020a03169060020a0282019150808060010191505061300a565b50606060020a029392505050565b606060008060606130828686613194565b95509150600960ff83161080159061309e575060498260ff1611155b15156130a957600080fd5b85858151811015156130b757fe5b90602001015160f860020a900460f860020a0260f860020a900460ff1660301415156130e257600080fd5b9560ff9091169390930193505050565b6000806000806000806131058888613194565b97509250602160ff84161461311957600080fd5b878781518110151561312757fe5b6020910101519787016021908101519960f860020a998a90049099027fff00000000000000000000000000000000000000000000000000000000000000167f0300000000000000000000000000000000000000000000000000000000000000149897019695505050505050565b60008083838151811015156131a557fe5b016020015160f860020a90819004810204915050600182019250929050565b50805460008255600302906000526020600020908101906131e591906132cc565b50565b828054828255906000526020600020906007016008900481019282156132875791602002820160005b8382111561325557835183826101000a81548163ffffffff021916908363ffffffff1602179055509260200192600401602081600301049283019260010302613211565b80156132855782816101000a81549063ffffffff0219169055600401602081600301049283019260010302613255565b505b506132939291506132f9565b5090565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b61140f91905b80821115613293576000808255600182015560028101805461ffff191690556003016132d2565b61140f91905b8082111561329357805463ffffffff191681556001016132ff5600b56073699a886ff0a9e8b995881e51b5ccd562594c835e990ad2f7c35957a5a4ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820758403146c321bc1e7aec336418e7ab0e8884b53f6e13a8cf0b402bc21d39dbd0029";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<>();
        _addresses.put("32001", "0xc0dbb96e06f60b3f3f4e42cd7e33eea7608347dc");
    }

    protected DogeToken(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DogeToken(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<ErrorDogeTokenEventResponse> getErrorDogeTokenEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("ErrorDogeToken", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<ErrorDogeTokenEventResponse> responses = new ArrayList<ErrorDogeTokenEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ErrorDogeTokenEventResponse typedResponse = new ErrorDogeTokenEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.err = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ErrorDogeTokenEventResponse> errorDogeTokenEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("ErrorDogeToken", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ErrorDogeTokenEventResponse>() {
            @Override
            public ErrorDogeTokenEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                ErrorDogeTokenEventResponse typedResponse = new ErrorDogeTokenEventResponse();
                typedResponse.log = log;
                typedResponse.err = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<NewTokenEventResponse> getNewTokenEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("NewToken", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<NewTokenEventResponse> responses = new ArrayList<NewTokenEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewTokenEventResponse typedResponse = new NewTokenEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewTokenEventResponse> newTokenEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("NewToken", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewTokenEventResponse>() {
            @Override
            public NewTokenEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                NewTokenEventResponse typedResponse = new NewTokenEventResponse();
                typedResponse.log = log;
                typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<UnlockRequestEventResponse> getUnlockRequestEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("UnlockRequest", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}, new TypeReference<Bytes20>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<UnlockRequestEventResponse> responses = new ArrayList<UnlockRequestEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnlockRequestEventResponse typedResponse = new UnlockRequestEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.operatorPublicKeyHash = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<UnlockRequestEventResponse> unlockRequestEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("UnlockRequest", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}, new TypeReference<Bytes20>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, UnlockRequestEventResponse>() {
            @Override
            public UnlockRequestEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                UnlockRequestEventResponse typedResponse = new UnlockRequestEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.operatorPublicKeyHash = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Transfer", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TransferEventResponse> transferEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Transfer", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Approval", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ApprovalEventResponse> approvalEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Approval", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._spender = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<BigInteger> MIN_UNLOCK_VALUE() {
        final Function function = new Function("MIN_UNLOCK_VALUE", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> name() {
        final Function function = new Function("name", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> approve(String _spender, BigInteger _value) {
        final Function function = new Function(
                "approve", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_spender), 
                new org.web3j.abi.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> totalSupply() {
        final Function function = new Function("totalSupply", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> transferFrom(String _from, String _to, BigInteger _value) {
        final Function function = new Function(
                "transferFrom", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_from), 
                new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> decimals() {
        final Function function = new Function("decimals", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple6<String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> operators(byte[] param0) {
        final Function function = new Function("operators", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes20(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint24>() {}));
        return new RemoteCall<Tuple6<String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple6<String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple6<String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<Tuple7<String, byte[], BigInteger, BigInteger, BigInteger, BigInteger, byte[]>> unlocksPendingInvestorProof(BigInteger param0) {
        final Function function = new Function("unlocksPendingInvestorProof", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bytes20>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes20>() {}));
        return new RemoteCall<Tuple7<String, byte[], BigInteger, BigInteger, BigInteger, BigInteger, byte[]>>(
                new Callable<Tuple7<String, byte[], BigInteger, BigInteger, BigInteger, BigInteger, byte[]>>() {
                    @Override
                    public Tuple7<String, byte[], BigInteger, BigInteger, BigInteger, BigInteger, byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, byte[], BigInteger, BigInteger, BigInteger, BigInteger, byte[]>(
                                (String) results.get(0).getValue(), 
                                (byte[]) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (byte[]) results.get(6).getValue());
                    }
                });
    }

    public RemoteCall<String> version() {
        final Function function = new Function("version", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> unlockIdx() {
        final Function function = new Function("unlockIdx", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> balanceOf(String _owner) {
        final Function function = new Function("balanceOf", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> OPERATOR_UNLOCK_FEE() {
        final Function function = new Function("OPERATOR_UNLOCK_FEE", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> symbol() {
        final Function function = new Function("symbol", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> transfer(String _to, BigInteger _value) {
        final Function function = new Function(
                "transfer", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> collateralRatio() {
        final Function function = new Function("collateralRatio", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> MIN_LOCK_VALUE() {
        final Function function = new Function("MIN_LOCK_VALUE", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> SUPERBLOCK_SUBMITTER_LOCK_FEE() {
        final Function function = new Function("SUPERBLOCK_SUBMITTER_LOCK_FEE", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple2<byte[], Boolean>> operatorKeys(BigInteger param0) {
        final Function function = new Function("operatorKeys", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes20>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple2<byte[], Boolean>>(
                new Callable<Tuple2<byte[], Boolean>>() {
                    @Override
                    public Tuple2<byte[], Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<byte[], Boolean>(
                                (byte[]) results.get(0).getValue(), 
                                (Boolean) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> approveAndCall(String _spender, BigInteger _value, byte[] _extraData) {
        final Function function = new Function(
                "approveAndCall", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_spender), 
                new org.web3j.abi.datatypes.generated.Uint256(_value), 
                new org.web3j.abi.datatypes.DynamicBytes(_extraData)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> trustedRelayerContract() {
        final Function function = new Function("trustedRelayerContract", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> OPERATOR_LOCK_FEE() {
        final Function function = new Function("OPERATOR_LOCK_FEE", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> allowance(String _owner, String _spender) {
        final Function function = new Function("allowance", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner), 
                new org.web3j.abi.datatypes.Address(_spender)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> trustedDogeEthPriceOracle() {
        final Function function = new Function("trustedDogeEthPriceOracle", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> dogeEthPrice() {
        final Function function = new Function("dogeEthPrice", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public static RemoteCall<DogeToken> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _trustedRelayerContract, String _trustedDogeEthPriceOracle, BigInteger _collateralRatio) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_trustedRelayerContract), 
                new org.web3j.abi.datatypes.Address(_trustedDogeEthPriceOracle), 
                new org.web3j.abi.datatypes.generated.Uint8(_collateralRatio)));
        return deployRemoteCall(DogeToken.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<DogeToken> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _trustedRelayerContract, String _trustedDogeEthPriceOracle, BigInteger _collateralRatio) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_trustedRelayerContract), 
                new org.web3j.abi.datatypes.Address(_trustedDogeEthPriceOracle), 
                new org.web3j.abi.datatypes.generated.Uint8(_collateralRatio)));
        return deployRemoteCall(DogeToken.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public RemoteCall<TransactionReceipt> addOperator(byte[] operatorPublicKeyCompressed, byte[] signature) {
        final Function function = new Function(
                "addOperator", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(operatorPublicKeyCompressed), 
                new org.web3j.abi.datatypes.DynamicBytes(signature)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> deleteOperator(byte[] operatorPublicKeyHash) {
        final Function function = new Function(
                "deleteOperator", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes20(operatorPublicKeyHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getOperatorsLength() {
        final Function function = new Function("getOperatorsLength", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint24>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> addOperatorDeposit(byte[] operatorPublicKeyHash, BigInteger weiValue) {
        final Function function = new Function(
                "addOperatorDeposit", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes20(operatorPublicKeyHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> withdrawOperatorDeposit(byte[] operatorPublicKeyHash, BigInteger value) {
        final Function function = new Function(
                "withdrawOperatorDeposit", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes20(operatorPublicKeyHash), 
                new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> processTransaction(byte[] dogeTx, BigInteger txHash, byte[] operatorPublicKeyHash, String superblockSubmitterAddress) {
        final Function function = new Function(
                "processTransaction", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(dogeTx), 
                new org.web3j.abi.datatypes.generated.Uint256(txHash), 
                new org.web3j.abi.datatypes.generated.Bytes20(operatorPublicKeyHash), 
                new org.web3j.abi.datatypes.Address(superblockSubmitterAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> wasDogeTxProcessed(BigInteger txHash) {
        final Function function = new Function("wasDogeTxProcessed", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(txHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> doUnlock(byte[] dogeAddress, BigInteger value, byte[] operatorPublicKeyHash) {
        final Function function = new Function(
                "doUnlock", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes20(dogeAddress), 
                new org.web3j.abi.datatypes.generated.Uint256(value), 
                new org.web3j.abi.datatypes.generated.Bytes20(operatorPublicKeyHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setDogeEthPrice(BigInteger _dogeEthPrice) {
        final Function function = new Function(
                "setDogeEthPrice", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_dogeEthPrice)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple8<String, byte[], BigInteger, BigInteger, BigInteger, List<BigInteger>, BigInteger, byte[]>> getUnlockPendingInvestorProof(BigInteger index) {
        final Function function = new Function("getUnlockPendingInvestorProof", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint32(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bytes20>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Uint32>>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes20>() {}));
        return new RemoteCall<Tuple8<String, byte[], BigInteger, BigInteger, BigInteger, List<BigInteger>, BigInteger, byte[]>>(
                new Callable<Tuple8<String, byte[], BigInteger, BigInteger, BigInteger, List<BigInteger>, BigInteger, byte[]>>() {
                    @Override
                    public Tuple8<String, byte[], BigInteger, BigInteger, BigInteger, List<BigInteger>, BigInteger, byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<String, byte[], BigInteger, BigInteger, BigInteger, List<BigInteger>, BigInteger, byte[]>(
                                (String) results.get(0).getValue(), 
                                (byte[]) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                convertToNative((List<Uint32>) results.get(5).getValue()), 
                                (BigInteger) results.get(6).getValue(), 
                                (byte[]) results.get(7).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> getUtxosLength(byte[] operatorPublicKeyHash) {
        final Function function = new Function("getUtxosLength", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes20(operatorPublicKeyHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple3<BigInteger, BigInteger, BigInteger>> getUtxo(byte[] operatorPublicKeyHash, BigInteger i) {
        final Function function = new Function("getUtxo", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes20(operatorPublicKeyHash), 
                new org.web3j.abi.datatypes.generated.Uint256(i)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint16>() {}));
        return new RemoteCall<Tuple3<BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple3<BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public static DogeToken load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DogeToken(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static DogeToken load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DogeToken(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class ErrorDogeTokenEventResponse {
        public Log log;

        public BigInteger err;
    }

    public static class NewTokenEventResponse {
        public Log log;

        public String user;

        public BigInteger value;
    }

    public static class UnlockRequestEventResponse {
        public Log log;

        public BigInteger id;

        public byte[] operatorPublicKeyHash;
    }

    public static class TransferEventResponse {
        public Log log;

        public String _from;

        public String _to;

        public BigInteger _value;
    }

    public static class ApprovalEventResponse {
        public Log log;

        public String _owner;

        public String _spender;

        public BigInteger _value;
    }
}
