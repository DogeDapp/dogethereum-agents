package org.dogethereum.agents.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes20;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint24;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.3.1.
 */
public class DogeToken extends Contract {
    private static final String BINARY = "0x60c0604052600460808190527f48302e310000000000000000000000000000000000000000000000000000000060a09081526200004091600691906200018e565b503480156200004e57600080fd5b5060405160608062003866833981016040818152825160208085015194830151838501845260098086527f446f6765546f6b656e0000000000000000000000000000000000000000000000838701908152855180870187529182527f444f4745544f4b454e00000000000000000000000000000000000000000000008285015233600090815260019094529483208390558280558551939695919492939192600892620000fe916003916200018e565b506004805460ff191660ff84161790558051620001239060059060208401906200018e565b505060078054600160a060020a03978816600160a060020a0319918216179091556008805460ff909616740100000000000000000000000000000000000000000260a060020a60ff021997909816959091169490941794909416949094179091555062000233915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001d157805160ff191683800117855562000201565b8280016001018555821562000201579182015b8281111562000201578251825591602001919060010190620001e4565b506200020f92915062000213565b5090565b6200023091905b808211156200020f57600081556001016200021a565b90565b61362380620002436000396000f3006080604052600436106101b35763ffffffff60e060020a60003504166305347cdc81146101b857806306fdde03146101df578063095ea7b31461026957806318160ddd146102a157806323b872dd146102b6578063313ce567146102e05780633e9745311461030b57806341f7a1f7146103745780634b48a8421461044a57806354fd4d501461046c57806355569d7f146104815780635be3b1b9146104ec578063636a851514610503578063657857de146105315780636d440c6b146105c857806370a08231146105ea5780637b837b7a1461060b57806395c39bf61461063057806395d89b41146106455780639ed003161461065a578063a9059cbb14610672578063b4eae1cb14610696578063b52d521d146106ab578063ba24ecab146106c0578063c0f76faf146106ed578063c5a4a2b714610705578063cae9ca5114610741578063cf496b10146107aa578063d488399114610630578063d48e6a9a146107db578063d63ceb461461090c578063dd62ed3e14610953578063dd8f13bb1461097a578063ef90f3711461098f578063f5b20400146109a4578063f997d47f146109b9578063fcd5d3841461098f575b600080fd5b3480156101c457600080fd5b506101cd610a24565b60408051918252519081900360200190f35b3480156101eb57600080fd5b506101f4610a2c565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561022e578181015183820152602001610216565b50505050905090810190601f16801561025b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561027557600080fd5b5061028d600160a060020a0360043516602435610aba565b604080519115158252519081900360200190f35b3480156102ad57600080fd5b506101cd610b20565b3480156102c257600080fd5b5061028d600160a060020a0360043581169060243516604435610b26565b3480156102ec57600080fd5b506102f5610bf3565b6040805160ff9092168252519081900360200190f35b34801561031757600080fd5b5061032d6001606060020a031960043516610bfc565b60408051600160a060020a03909716875260208701959095528585019390935263ffffffff9091166060850152608084015262ffffff1660a0830152519081900360c00190f35b34801561038057600080fd5b5061039263ffffffff60043516610c47565b60408051600160a060020a0389168152908101869052606081018590526080810184905260a081018390526001606060020a0319821660c082015260e0602080830182815289519284019290925288516101008401918a019080838360005b838110156104095781810151838201526020016103f1565b50505050905090810190601f1680156104365780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b34801561045657600080fd5b506101cd6001606060020a031960043516610d29565b34801561047857600080fd5b506101f4610d48565b34801561048d57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261028d94369492936024939284019190819084018382808284375094975050843595505050506020909101356001606060020a0319169050610da3565b6105016001606060020a03196004351661129b565b005b34801561050f57600080fd5b506105186112fc565b6040805163ffffffff9092168252519081900360200190f35b34801561053d57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261050194369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506113219650505050505050565b3480156105d457600080fd5b506105016001606060020a031960043516611675565b3480156105f657600080fd5b506101cd600160a060020a03600435166117ed565b34801561061757600080fd5b506105016001606060020a031960043516602435611808565b34801561063c57600080fd5b506101cd61192d565b34801561065157600080fd5b506101f4611932565b34801561066657600080fd5b5061028d60043561198d565b34801561067e57600080fd5b5061028d600160a060020a0360043516602435611a1c565b3480156106a257600080fd5b506102f5611a94565b3480156106b757600080fd5b506101cd611ab5565b3480156106cc57600080fd5b506106d5611abd565b6040805162ffffff9092168252519081900360200190f35b3480156106f957600080fd5b50610501600435611ac4565b34801561071157600080fd5b5061071d600435611ae0565b604080516001606060020a0319909316835290151560208301528051918290030190f35b34801561074d57600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261028d948235600160a060020a0316946024803595369594606494920191908190840183828082843750949750611b2a9650505050505050565b3480156107b657600080fd5b506107bf611cc5565b60408051600160a060020a039092168252519081900360200190f35b3480156107e757600080fd5b506107f963ffffffff60043516611cd4565b6040518089600160a060020a0316600160a060020a031681526020018060200188815260200187815260200186815260200180602001858152602001846bffffffffffffffffffffffff19166bffffffffffffffffffffffff1916815260200183810383528a818151815260200191508051906020019080838360005b8381101561088e578181015183820152602001610876565b50505050905090810190601f1680156108bb5780820380516001836020036101000a031916815260200191505b508381038252865181528651602091820191808901910280838360005b838110156108f05781810151838201526020016108d8565b505050509050019a505050505050505050505060405180910390f35b34801561091857600080fd5b506109316001606060020a031960043516602435611e62565b60408051938452602084019290925261ffff1682820152519081900360600190f35b34801561095f57600080fd5b506101cd600160a060020a0360043581169060243516611ec4565b34801561098657600080fd5b506107bf611eef565b34801561099b57600080fd5b506101cd611efe565b3480156109b057600080fd5b506101cd611f06565b3480156109c557600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101cd94369492936024939284019190819084018382808284375094975050843595505050506020909101356001606060020a0319169050611f0c565b6311e1a30081565b6003805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610ab25780601f10610a8757610100808354040283529160200191610ab2565b820191906000526020600020905b815481529060010190602001808311610a9557829003601f168201915b505050505081565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60005481565b600160a060020a0383166000908152600160205260408120548211801590610b715750600160a060020a03841660009081526002602090815260408083203384529091529020548211155b1515610b7c57600080fd5b600160a060020a03808416600081815260016020908152604080832080548801905593881680835284832080548890039055600282528483203384528252918490208054879003905583518681529351929391926000805160206135d88339815191529281900390910190a35060015b9392505050565b60045460ff1681565b600b60205260009081526040902080546001820154600283015460048401546005850154600690950154600160a060020a03909416949293919263ffffffff9091169162ffffff1686565b6009602090815260009182526040918290208054600180830180548651600261010094831615949094026000190190911692909204601f8101869004860283018601909652858252600160a060020a03909216949293909290830182828015610cf15780601f10610cc657610100808354040283529160200191610cf1565b820191906000526020600020905b815481529060010190602001808311610cd457829003601f168201915b50505060028401546003850154600486015460068701546007909701549596929591945092506c010000000000000000000000000287565b6001606060020a0319166000908152600b602052604090206003015490565b6006805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610ab25780601f10610a8757610100808354040283529160200191610ab2565b600080600080606060008060006311e1a3008a1015610de4576040805161eab0815290516000805160206135b88339815191529181900360200190a161128d565b336000908152600160205260409020548a1115610e23576040805161eaba815290516000805160206135b88339815191529181900360200190a161128d565b6001606060020a031989166000908152600b602052604090208054909750600160a060020a03161515610e78576040805161eac4815290516000805160206135b88339815191529181900360200190a161128d565b8987600101541015610eac576040805161eace815290516000805160206135b88339815191529181900360200190a161128d565b6103e8600a8b020495506305f5e100861015610eca576305f5e10095505b6040805160e0810182528854600160a060020a03168152600189015460208083019190915260028a01548284015260038a0180548451818402810184019095528085528a8f039950610faf948a94938d936060860193909160009084015b82821015610f785760008481526020908190206040805160608101825260038602909201805483526001808201548486015260029091015461ffff16918301919091529083529092019101610f28565b50505090825250600482015463ffffffff1660208201526005820154604082015260069091015462ffffff166060909101526122d3565b9196509450925090508015610fe4576040805182815290516000805160206135b88339815191529181900360200190a161128d565b8654600160a060020a0390811660009081526001602090815260409182902080548a019055895482518a8152925193169233926000805160206135d883398151915292908290030190a333600081815260016020908152604080832080548f90039055805189815290519293926000805160206135d8833981519152929181900390910190a360085460408051750100000000000000000000000000000000000000000090920463ffffffff1682526001606060020a03198b16602083015280517fa452c19abf34fda31e59719208cf19c16be3dc9573465e8bf2ec1e4e89d3fad89281900390910190a1604080516101008101825233815260208082018e81528284018e9052606083018a905242608084015260a0830188905260c083018790526001606060020a03198d1660e08401526008547501000000000000000000000000000000000000000000900463ffffffff16600090815260098352939093208251815473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039091161781559251805192939261118592600185019201906133cd565b5060408201516002820155606082015160038201556080820151600482015560a082015180516111bf91600584019160209091019061344b565b5060c0820151600682015560e0909101516007909101805473ffffffffffffffffffffffffffffffffffffffff19166c01000000000000000000000000909204919091179055600187810180548488019003905560028801805484019055845160048901805463ffffffff19811663ffffffff91821690930181169290921790556008805478ffffffff000000000000000000000000000000000000000000198116750100000000000000000000000000000000000000000091829004841685019093160291909117905597505b505050505050509392505050565b6001606060020a031981166000908152600b602052604090208054600160a060020a031633146112ed576040805161ea74815290516000805160206135b88339815191529181900360200190a16112f8565b600581018054340190555b5050565b6008547501000000000000000000000000000000000000000000900463ffffffff1681565b60008060008060008087600081518110151561133957fe5b90602001015160f860020a900460f860020a02600160f860020a031916600360f860020a0214945060218801519550600280336040516020018082600160a060020a0316600160a060020a03166c010000000000000000000000000281526014019150506040516020818303038152906040526040518082805190602001908083835b602083106113db5780518252601f1990920191602091820191016113bc565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af115801561141c573d6000803e3d6000fd5b5050506040513d602081101561143157600080fd5b50516040805160208181019390935281518082038401815290820191829052805190928291908401908083835b6020831061147d5780518252601f19909201916020918201910161145e565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af11580156114be573d6000803e3d6000fd5b5050506040513d60208110156114d357600080fd5b505193506114e1848861242f565b92506114ed8686612506565b600160a060020a03848116911614611527576040805161ea6a815290516000805160206135b88339815191529181900360200190a161166b565b611531868661261a565b6001606060020a031981166000908152600b6020526040902080549193509150600160a060020a031615611587576040805161ea6f815290516000805160206135b88339815191529181900360200190a161166b565b80543373ffffffffffffffffffffffffffffffffffffffff19918216178255600c805460068401805462ffffff191662ffffff909216919091179055604080518082019091526001606060020a03198516815260006020820181815283546001810185559390915290517fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c790920180549151919093166c010000000000000000000000009092049190911774ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000911515919091021790555b5050505050505050565b6001606060020a031981166000908152600b602052604081208054909190600160a060020a031633146116ca576040805161ea74815290516000805160206135b88339815191529181900360200190a16117e8565b60018201541515806116df5750600282015415155b806116ed5750600582015415155b1561171a576040805161ea7e815290516000805160206135b88339815191529181900360200190a16117e8565b6006820154600c8054909162ffffff1690811061173357fe5b60009182526020808320909101805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001781556001606060020a031986168352600b90915260408220805473ffffffffffffffffffffffffffffffffffffffff191681556001810183905560028101839055909250906117c360038301826134f6565b5060048101805463ffffffff1916905560006005820155600601805462ffffff191690555b505050565b600160a060020a031660009081526001602052604090205490565b6001606060020a031982166000908152600b602052604090208054600160a060020a0316331461185a576040805161ea74815290516000805160206135b88339815191529181900360200190a16117e8565b818160050154101561188e576040805161ea88815290516000805160206135b88339815191529181900360200190a16117e8565b600860149054906101000a900460ff1660ff16816002015482600101540102600a54838360050154038115156118c057fe5b0410156118ef576040805161ea92815290516000805160206135b88339815191529181900360200190a16117e8565b6005810180548390039055604051339083156108fc029084906000818181858888f19350505050158015611927573d6000803e3d6000fd5b50505050565b600a81565b6005805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610ab25780601f10610a8757610100808354040283529160200191610ab2565b600073__Set___________________________________636ce8e081600d846040518363ffffffff1660e060020a028152600401808381526020018281526020019250505060206040518083038186803b1580156119ea57600080fd5b505af41580156119fe573d6000803e3d6000fd5b505050506040513d6020811015611a1457600080fd5b505192915050565b33600090815260016020526040812054821115611a3857600080fd5b33600081815260016020908152604080832080548790039055600160a060020a03871680845292819020805487019055805186815290519293926000805160206135d8833981519152929181900390910190a350600192915050565b60085474010000000000000000000000000000000000000000900460ff1681565b6308f0d18081565b600c545b90565b600854600160a060020a03163314611adb57600080fd5b600a55565b600c805482908110611aee57fe5b6000918252602090912001546c010000000000000000000000008102915074010000000000000000000000000000000000000000900460ff1682565b336000818152600260209081526040808320600160a060020a038816808552908352818420879055815187815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a383600160a060020a031660405180807f72656365697665417070726f76616c28616464726573732c75696e743235362c81526020017f616464726573732c627974657329000000000000000000000000000000000000815250602e019050604051809103902060e060020a9004338530866040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a03168152602001828051906020019080838360005b83811015611c6a578181015183820152602001611c52565b50505050905090810190601f168015611c975780820380516001836020036101000a031916815260200191505b509450505050506000604051808303816000875af1925050501515611cbb57600080fd5b5060019392505050565b600754600160a060020a031681565b63ffffffff811660009081526009602090815260408083208054600180830180548551600261010094831615949094026000190190911692909204601f8101879004870283018701909552848252600160a060020a039092169560609590948594859488948694859491929190830182828015611d925780601f10611d6757610100808354040283529160200191611d92565b820191906000526020600020905b815481529060010190602001808311611d7557829003601f168201915b5050505050975080600201549650806003015495508060040154945080600501805480602002602001604051908101604052809291908181526020018280548015611e2857602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff1681526020019060040190602082600301049283019260010382029150808411611deb5790505b50505050509350806006015492508060070160009054906101000a90046c0100000000000000000000000002915050919395975091939597565b6001606060020a031982166000908152600b6020526040812060038101805483928392909183919087908110611e9457fe5b6000918252602090912060039091020180546001820154600290920154909991985061ffff169650945050505050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600854600160a060020a031681565b6305f5e10081565b600a5481565b6000806000806000806000806000806000600760009054906101000a9004600160a060020a0316600160a060020a031633600160a060020a0316141515611f5257600080fd5b6001606060020a03198c166000908152600b602052604090208054909a50600160a060020a03161515611fa7576040805161ea9c815290516000805160206135b88339815191529181900360200190a16122c2565b611fb18e8d6127eb565b809950819a50829b50839c505050505073__Set___________________________________63831cb739600d8f6040518363ffffffff1660e060020a028152600401808381526020018281526020019250505060206040518083038186803b15801561201c57600080fd5b505af4158015612030573d6000803e3d6000fd5b505050506040513d602081101561204657600080fd5b50519450841515612079576040805161eaa6815290516000805160206135b88339815191529181900360200190a16122c2565b896003016060604051908101604052808b81526020018f81526020018861ffff1681525090806001815401808255809150509060018203906000526020600020906003020160009091929091909150600082015181600001556020820151816001015560408201518160020160006101000a81548161ffff021916908361ffff160217905550505050888a6001016000828254019250508190555061211e888861261a565b93506001606060020a03198c8116908516146122b2576308f0d180891015612168576040805161eaf6815290516000805160206135b88339815191529181900360200190a16122c2565b6121728888612506565b92506103e8600a8a020491506305f5e100821015612192576305f5e10091505b8954600160a060020a039081166000908152600160209081526040918290208054860190558c54825186815292519316927f275a11e033325e9b28a23131fcc7e243a49bb38beb686051976dd8c8899d9a3c9281900390910190a28954604080518481529051600160a060020a03909216916000916000805160206135d8833981519152919081900360200190a350600160a060020a0382166000818152600160209081526040918290208054858d03908101909155825181815292519093927f275a11e033325e9b28a23131fcc7e243a49bb38beb686051976dd8c8899d9a3c92908290030190a2604080518281529051600160a060020a038516916000916000805160206135d88339815191529181900360200190a3889a506122c2565b60028a0180548a9003905560009a505b505050505050505050509392505050565b6000606060008060008060008060008960600151518a6080015163ffffffff161015156123045761ead89850612421565b6302faf0809650896080015193508392505b8a8510801561232f57508960600151518363ffffffff16105b156123705760608a0151805163ffffffff851690811061234b57fe5b60209081029091010151516305f5e10097909701969490940193600190920191612316565b8a8510156123825761eae29850612421565b868b116123935761eaec9850612421565b83830391508163ffffffff166040519080825280602002602001820160405280156123c8578160200160208202803883390190505b509750600090505b8163ffffffff168163ffffffff16101561241757838101888263ffffffff168151811015156123fb57fe5b63ffffffff9092166020928302909101909101526001016123d0565b600098508a850395505b505050505092959194509250565b6000806000808451604114151561244957600093506124fd565b505050602082015160218301516041840151909160001a601b60ff8216101561247057601b015b8060ff16601b1415801561248857508060ff16601c14155b1561249657600093506124fd565b60408051600080825260208083018085528a905260ff8516838501526060830187905260808301869052925160019360a0808501949193601f19840193928390039091019190865af11580156124f0573d6000803e3d6000fd5b5050506020604051035193505b50505092915050565b600080806401000003d01985860991506401000003d01985830991506401000003d019600783089150612560827f3fffffffffffffffffffffffffffffffffffffffffffffffffffffffbfffff0c6401000003d01961299a565b905060018082161484151514612579576401000003d019035b6401000003d019818209821461258e57600080fd5b848160405160200180838152602001828152602001925050506040516020818303038152906040526040518082805190602001908083835b602083106125e55780518252601f1990920191602091820191016125c6565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912098975050505050505050565b60008082612648577f020000000000000000000000000000000000000000000000000000000000000061266a565b7f03000000000000000000000000000000000000000000000000000000000000005b604080517fff0000000000000000000000000000000000000000000000000000000000000083166020808301919091526021808301899052835180840390910181526041909201928390528151939450600393600293918291908401908083835b602083106126ea5780518252601f1990920191602091820191016126cb565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af115801561272b573d6000803e3d6000fd5b5050506040513d602081101561274057600080fd5b50516040805160208181019390935281518082038401815290820191829052805190928291908401908083835b6020831061278c5780518252601f19909201916020918201910161276d565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af11580156127cd573d6000803e3d6000fd5b5050604051516c010000000000000000000000000295945050505050565b6000806000806127f961351a565b60048082526060908190819081908190612816908d9060006129e4565b88528151909650909450612842908d908690600090811061283357fe5b90602001906020020151612aed565b151560a08801526080870152855161285d908d906002612b1c565b895281519095509093509091506128a5908d908490600090811061287d57fe5b9060200190602002015185600081518110151561289657fe5b90602001906020020151612c7a565b6001606060020a03191660208701528051819060009081106128c357fe5b60209081029091018101516040880152600060608801528601516001606060020a0319908116908c16146129525761291d8c83600181518110151561290457fe5b9060200190602002015185600181518110151561289657fe5b6001606060020a031916602087015280518190600190811061293b57fe5b602090810290910101516040870152600160608701525b60208601516001606060020a03198c811691161461296f57600080fd5b856040015186608001518760a001518860600151995099509950995050505050505092959194509250565b600060405160208152602080820152602060408201528460608201528360808201528260a082015260208160c08360006005600019f115156129db57600080fd5b51949350505050565b60608060008060008060608060006129fc8c8c612ca5565b9b509550891580612a0c5750858a115b15612a1957859450612a1d565b8994505b84604051908082528060200260200182016040528015612a47578160200160208202803883390190505b50925084604051908082528060200260200182016040528015612a74578160200160208202803883390190505b509150600090505b84811015612add578a8382815181101515612a9357fe5b6020908102909101015260249a909a0199612aae8c8c612ca5565b8351909c509094508490839083908110612ac457fe5b6020908102909101015299830160040199600101612a7c565b50909a9099509650505050505050565b6024016000808080612aff8686612ca5565b9550612b0d90508686612d67565b50909890975095505050505050565b606080606060008060008060608060606000612b388e8e612ca5565b9d5096508b1580612b485750868c115b15612b5557869550612b59565b8b95505b85604051908082528060200260200182016040528015612b83578160200160208202803883390190505b50935085604051908082528060200260200182016040528015612bb0578160200160208202803883390190505b50925085604051908082528060200260200182016040528015612bdd578160200160208202803883390190505b509150600090505b85811015612c6857612bf98e8e6040612d9e565b8282815181101515612c0757fe5b6020908102909101015260089c909c019b612c228e8e612ca5565b8551909e509095508d90859083908110612c3857fe5b6020908102909101015282518590849083908110612c5257fe5b602090810290910101529b84019b600101612be5565b509c919b509998509650505050505050565b6000612c878484846130bf565b15612ca057612c998484600301613205565b9050610bec565b610bec565b60008060008484815181101515612cb857fe5b90602001015160f860020a900460f860020a0260f860020a9004905060018401935060fd8160ff161015612cf45760ff81169250839150612d5f565b8060ff1660fd1415612d1957612d0c85856010612d9e565b8460020192509250612d5f565b8060ff1660fe1415612d3e57612d3185856020612d9e565b8460040192509250612d5f565b8060ff1660ff1415612d5f57612d5685856040612d9e565b84600801925092505b509250929050565b606060008060006060600080612d7d898961327a565b98509250612d8b89896132fb565b949b919a50985092965091945050505050565b60008160081415612ddb578383815181101515612db757fe5b90602001015160f860020a900460f860020a0260f860020a900460ff169050610bec565b8160101415612e47578383600101815181101515612df557fe5b90602001015160f860020a900460f860020a0260f860020a9004610100028484815181101515612e2157fe5b90602001015160f860020a900460f860020a0260f860020a90040161ffff169050610bec565b8160201415612f18578383600301815181101515612e6157fe5b90602001015160f860020a900460f860020a0260f860020a90046301000000028484600201815181101515612e9257fe5b90602001015160f860020a900460f860020a0260f860020a900462010000028585600101815181101515612ec257fe5b90602001015160f860020a900460f860020a0260f860020a9004610100028686815181101515612eee57fe5b90602001015160f860020a900460f860020a0260f860020a900401010163ffffffff169050610bec565b8160401415610bec578383600701815181101515612f3257fe5b90602001015160f860020a900460f860020a0260f860020a9004670100000000000000028484600601815181101515612f6757fe5b90602001015160f860020a900460f860020a0260f860020a90046601000000000000028585600501815181101515612f9b57fe5b90602001015160f860020a900460f860020a0260f860020a900465010000000000028686600401815181101515612fce57fe5b90602001015160f860020a900460f860020a0260f860020a900464010000000002878760030181518110151561300057fe5b90602001015160f860020a900460f860020a0260f860020a9004630100000002888860020181518110151561303157fe5b90602001015160f860020a900460f860020a0260f860020a90046201000002898960010181518110151561306157fe5b90602001015160f860020a900460f860020a0260f860020a9004610100028a8a81518110151561308d57fe5b90602001015160f860020a900460f860020a0260f860020a90040101010101010167ffffffffffffffff169050610bec565b6000816019148015613101575083838151811015156130da57fe5b90602001015160f860020a900460f860020a02600160f860020a031916607660f860020a02145b80156131405750838360010181518110151561311957fe5b90602001015160f860020a900460f860020a02600160f860020a03191660a960f860020a02145b801561317f5750838360020181518110151561315857fe5b90602001015160f860020a900460f860020a02600160f860020a031916601460f860020a02145b80156131be5750838360170181518110151561319757fe5b90602001015160f860020a900460f860020a02600160f860020a031916608860f860020a02145b80156131fd575083836018018151811015156131d657fe5b90602001015160f860020a900460f860020a02600160f860020a03191660ac60f860020a02145b949350505050565b600080805b601481101561326357806013036008028585830181518110151561322a57fe5b90602001015160f860020a900460f860020a0260f860020a9004600160a060020a03169060020a0282019150808060010191505061320a565b506c01000000000000000000000000029392505050565b6060600080606061328b868661339d565b95509150600960ff8316108015906132a7575060498260ff1611155b15156132b257600080fd5b85858151811015156132c057fe5b90602001015160f860020a900460f860020a0260f860020a900460ff1660301415156132eb57600080fd5b9560ff9091169390930193505050565b60008060008060008061330e888861339d565b97509250602160ff84161461332257600080fd5b878781518110151561333057fe5b6020910101519787016021908101519960f860020a998a90049099027fff00000000000000000000000000000000000000000000000000000000000000167f0300000000000000000000000000000000000000000000000000000000000000149897019695505050505050565b60008083838151811015156133ae57fe5b016020015160f860020a90819004810204915050600182019250929050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061340e57805160ff191683800117855561343b565b8280016001018555821561343b579182015b8281111561343b578251825591602001919060010190613420565b5061344792915061354f565b5090565b828054828255906000526020600020906007016008900481019282156134ea5791602002820160005b838211156134b857835183826101000a81548163ffffffff021916908363ffffffff1602179055509260200192600401602081600301049283019260010302613474565b80156134e85782816101000a81549063ffffffff02191690556004016020816003010492830192600103026134b8565b505b50613447929150613569565b5080546000825560030290600052602060002090810190613517919061358a565b50565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b611ac191905b808211156134475760008155600101613555565b611ac191905b8082111561344757805463ffffffff1916815560010161356f565b611ac191905b80821115613447576000808255600182015560028101805461ffff191690556003016135905600b56073699a886ff0a9e8b995881e51b5ccd562594c835e990ad2f7c35957a5a4ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a7230582081235efbf37a790d701ef66a6244ea5e4f96b5ef594bbd1a4abe1c654975ad4a0029";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<>();
        _addresses.put("32001", "0x0b9c1c76bb86e32454212463703df6320d3b0212");
    }

    protected DogeToken(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DogeToken(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<ErrorDogeTokenEventResponse> getErrorDogeTokenEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("ErrorDogeToken", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<ErrorDogeTokenEventResponse> responses = new ArrayList<ErrorDogeTokenEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ErrorDogeTokenEventResponse typedResponse = new ErrorDogeTokenEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.err = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ErrorDogeTokenEventResponse> errorDogeTokenEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("ErrorDogeToken", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ErrorDogeTokenEventResponse>() {
            @Override
            public ErrorDogeTokenEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                ErrorDogeTokenEventResponse typedResponse = new ErrorDogeTokenEventResponse();
                typedResponse.log = log;
                typedResponse.err = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<NewTokenEventResponse> getNewTokenEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("NewToken", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<NewTokenEventResponse> responses = new ArrayList<NewTokenEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewTokenEventResponse typedResponse = new NewTokenEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewTokenEventResponse> newTokenEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("NewToken", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewTokenEventResponse>() {
            @Override
            public NewTokenEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                NewTokenEventResponse typedResponse = new NewTokenEventResponse();
                typedResponse.log = log;
                typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<UnlockRequestEventResponse> getUnlockRequestEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("UnlockRequest", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}, new TypeReference<Bytes20>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<UnlockRequestEventResponse> responses = new ArrayList<UnlockRequestEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnlockRequestEventResponse typedResponse = new UnlockRequestEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.operatorPublicKeyHash = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<UnlockRequestEventResponse> unlockRequestEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("UnlockRequest", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}, new TypeReference<Bytes20>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, UnlockRequestEventResponse>() {
            @Override
            public UnlockRequestEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                UnlockRequestEventResponse typedResponse = new UnlockRequestEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.operatorPublicKeyHash = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Transfer", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TransferEventResponse> transferEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Transfer", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Approval", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ApprovalEventResponse> approvalEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Approval", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._spender = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<BigInteger> MIN_UNLOCK_VALUE() {
        final Function function = new Function("MIN_UNLOCK_VALUE", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> name() {
        final Function function = new Function("name", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> approve(String _spender, BigInteger _value) {
        final Function function = new Function(
                "approve", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_spender), 
                new org.web3j.abi.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> totalSupply() {
        final Function function = new Function("totalSupply", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> transferFrom(String _from, String _to, BigInteger _value) {
        final Function function = new Function(
                "transferFrom", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_from), 
                new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> decimals() {
        final Function function = new Function("decimals", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple6<String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> operators(byte[] param0) {
        final Function function = new Function("operators", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes20(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint24>() {}));
        return new RemoteCall<Tuple6<String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple6<String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple6<String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<Tuple7<String, String, BigInteger, BigInteger, BigInteger, BigInteger, byte[]>> unlocksPendingInvestorProof(BigInteger param0) {
        final Function function = new Function("unlocksPendingInvestorProof", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes20>() {}));
        return new RemoteCall<Tuple7<String, String, BigInteger, BigInteger, BigInteger, BigInteger, byte[]>>(
                new Callable<Tuple7<String, String, BigInteger, BigInteger, BigInteger, BigInteger, byte[]>>() {
                    @Override
                    public Tuple7<String, String, BigInteger, BigInteger, BigInteger, BigInteger, byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, String, BigInteger, BigInteger, BigInteger, BigInteger, byte[]>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (byte[]) results.get(6).getValue());
                    }
                });
    }

    public RemoteCall<String> version() {
        final Function function = new Function("version", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> unlockIdx() {
        final Function function = new Function("unlockIdx", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> balanceOf(String _owner) {
        final Function function = new Function("balanceOf", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> OPERATOR_UNLOCK_FEE() {
        final Function function = new Function("OPERATOR_UNLOCK_FEE", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> symbol() {
        final Function function = new Function("symbol", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> transfer(String _to, BigInteger _value) {
        final Function function = new Function(
                "transfer", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> collateralRatio() {
        final Function function = new Function("collateralRatio", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> MIN_LOCK_VALUE() {
        final Function function = new Function("MIN_LOCK_VALUE", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple2<byte[], Boolean>> operatorKeys(BigInteger param0) {
        final Function function = new Function("operatorKeys", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes20>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple2<byte[], Boolean>>(
                new Callable<Tuple2<byte[], Boolean>>() {
                    @Override
                    public Tuple2<byte[], Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<byte[], Boolean>(
                                (byte[]) results.get(0).getValue(), 
                                (Boolean) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> approveAndCall(String _spender, BigInteger _value, byte[] _extraData) {
        final Function function = new Function(
                "approveAndCall", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_spender), 
                new org.web3j.abi.datatypes.generated.Uint256(_value), 
                new org.web3j.abi.datatypes.DynamicBytes(_extraData)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> trustedRelayerContract() {
        final Function function = new Function("trustedRelayerContract", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> OPERATOR_LOCK_FEE() {
        final Function function = new Function("OPERATOR_LOCK_FEE", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> allowance(String _owner, String _spender) {
        final Function function = new Function("allowance", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner), 
                new org.web3j.abi.datatypes.Address(_spender)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> trustedDogeEthPriceOracle() {
        final Function function = new Function("trustedDogeEthPriceOracle", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> OPERATOR_MIN_UNLOCK_FEE() {
        final Function function = new Function("OPERATOR_MIN_UNLOCK_FEE", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> dogeEthPrice() {
        final Function function = new Function("dogeEthPrice", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> OPERATOR_MIN_LOCK_FEE() {
        final Function function = new Function("OPERATOR_MIN_LOCK_FEE", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public static RemoteCall<DogeToken> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _trustedRelayerContract, String _trustedDogeEthPriceOracle, BigInteger _collateralRatio) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_trustedRelayerContract), 
                new org.web3j.abi.datatypes.Address(_trustedDogeEthPriceOracle), 
                new org.web3j.abi.datatypes.generated.Uint8(_collateralRatio)));
        return deployRemoteCall(DogeToken.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<DogeToken> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _trustedRelayerContract, String _trustedDogeEthPriceOracle, BigInteger _collateralRatio) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_trustedRelayerContract), 
                new org.web3j.abi.datatypes.Address(_trustedDogeEthPriceOracle), 
                new org.web3j.abi.datatypes.generated.Uint8(_collateralRatio)));
        return deployRemoteCall(DogeToken.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public RemoteCall<TransactionReceipt> addOperator(byte[] operatorPublicKeyCompressed, byte[] signature) {
        final Function function = new Function(
                "addOperator", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(operatorPublicKeyCompressed), 
                new org.web3j.abi.datatypes.DynamicBytes(signature)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> deleteOperator(byte[] operatorPublicKeyHash) {
        final Function function = new Function(
                "deleteOperator", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes20(operatorPublicKeyHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getOperatorsLength() {
        final Function function = new Function("getOperatorsLength", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint24>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> addOperatorDeposit(byte[] operatorPublicKeyHash, BigInteger weiValue) {
        final Function function = new Function(
                "addOperatorDeposit", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes20(operatorPublicKeyHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> withdrawOperatorDeposit(byte[] operatorPublicKeyHash, BigInteger value) {
        final Function function = new Function(
                "withdrawOperatorDeposit", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes20(operatorPublicKeyHash), 
                new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> processTransaction(byte[] dogeTx, BigInteger txHash, byte[] operatorPublicKeyHash) {
        final Function function = new Function(
                "processTransaction", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(dogeTx), 
                new org.web3j.abi.datatypes.generated.Uint256(txHash), 
                new org.web3j.abi.datatypes.generated.Bytes20(operatorPublicKeyHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> wasDogeTxProcessed(BigInteger txHash) {
        final Function function = new Function("wasDogeTxProcessed", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(txHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> doUnlock(String dogeAddress, BigInteger value, byte[] operatorPublicKeyHash) {
        final Function function = new Function(
                "doUnlock", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(dogeAddress), 
                new org.web3j.abi.datatypes.generated.Uint256(value), 
                new org.web3j.abi.datatypes.generated.Bytes20(operatorPublicKeyHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setDogeEthPrice(BigInteger _dogeEthPrice) {
        final Function function = new Function(
                "setDogeEthPrice", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_dogeEthPrice)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple8<String, String, BigInteger, BigInteger, BigInteger, List<BigInteger>, BigInteger, byte[]>> getUnlockPendingInvestorProof(BigInteger index) {
        final Function function = new Function("getUnlockPendingInvestorProof", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint32(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Uint32>>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes20>() {}));
        return new RemoteCall<Tuple8<String, String, BigInteger, BigInteger, BigInteger, List<BigInteger>, BigInteger, byte[]>>(
                new Callable<Tuple8<String, String, BigInteger, BigInteger, BigInteger, List<BigInteger>, BigInteger, byte[]>>() {
                    @Override
                    public Tuple8<String, String, BigInteger, BigInteger, BigInteger, List<BigInteger>, BigInteger, byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<String, String, BigInteger, BigInteger, BigInteger, List<BigInteger>, BigInteger, byte[]>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                convertToNative((List<Uint32>) results.get(5).getValue()), 
                                (BigInteger) results.get(6).getValue(), 
                                (byte[]) results.get(7).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> getUtxosLength(byte[] operatorPublicKeyHash) {
        final Function function = new Function("getUtxosLength", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes20(operatorPublicKeyHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple3<BigInteger, BigInteger, BigInteger>> getUtxo(byte[] operatorPublicKeyHash, BigInteger i) {
        final Function function = new Function("getUtxo", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes20(operatorPublicKeyHash), 
                new org.web3j.abi.datatypes.generated.Uint256(i)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint16>() {}));
        return new RemoteCall<Tuple3<BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple3<BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public static DogeToken load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DogeToken(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static DogeToken load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DogeToken(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class ErrorDogeTokenEventResponse {
        public Log log;

        public BigInteger err;
    }

    public static class NewTokenEventResponse {
        public Log log;

        public String user;

        public BigInteger value;
    }

    public static class UnlockRequestEventResponse {
        public Log log;

        public BigInteger id;

        public byte[] operatorPublicKeyHash;
    }

    public static class TransferEventResponse {
        public Log log;

        public String _from;

        public String _to;

        public BigInteger _value;
    }

    public static class ApprovalEventResponse {
        public Log log;

        public String _owner;

        public String _spender;

        public BigInteger _value;
    }
}
