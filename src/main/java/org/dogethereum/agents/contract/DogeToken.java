package org.dogethereum.agents.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes20;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint24;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.3.1.
 */
public class DogeToken extends Contract {
    private static final String BINARY = "0x60c0604052600460808190527f48302e310000000000000000000000000000000000000000000000000000000060a09081526200004091600691906200018e565b503480156200004e57600080fd5b50604051606080620038dc833981016040818152825160208085015194830151838501845260098086527f446f6765546f6b656e0000000000000000000000000000000000000000000000838701908152855180870187529182527f444f4745544f4b454e00000000000000000000000000000000000000000000008285015233600090815260019094529483208390558280558551939695919492939192600892620000fe916003916200018e565b506004805460ff191660ff84161790558051620001239060059060208401906200018e565b505060078054600160a060020a03978816600160a060020a0319918216179091556008805460ff909616740100000000000000000000000000000000000000000260a060020a60ff021997909816959091169490941794909416949094179091555062000233915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001d157805160ff191683800117855562000201565b8280016001018555821562000201579182015b8281111562000201578251825591602001919060010190620001e4565b506200020f92915062000213565b5090565b6200023091905b808211156200020f57600081556001016200021a565b90565b61369980620002436000396000f3006080604052600436106101c95763ffffffff60e060020a60003504166305347cdc81146101ce57806306fdde03146101f5578063095ea7b31461027f57806316931c94146102b757806318160ddd146102cc57806323b872dd146102e1578063313ce5671461030b5780633e9745311461033657806341f7a1f71461039f5780634b48a8421461047557806354fd4d501461049757806355569d7f146104ac5780635be3b1b914610517578063636a85151461052e578063657857de1461055c5780636d440c6b146105f357806370a08231146106155780637b837b7a1461063657806395c39bf61461065b57806395d89b41146106705780639ed0031614610685578063a9059cbb1461069d578063b4eae1cb146106c1578063b52d521d146101ce578063b85278a91461065b578063ba24ecab146106d6578063c0f76faf14610703578063c3d5e1861461071b578063c5a4a2b714610793578063cae9ca51146107cf578063cf496b1014610838578063d48839911461065b578063d48e6a9a14610869578063d63ceb461461099a578063dd62ed3e146109e1578063dd8f13bb14610a08578063ef90f371146102b7578063f5b2040014610a1d578063fcd5d384146102b7575b600080fd5b3480156101da57600080fd5b506101e3610a32565b60408051918252519081900360200190f35b34801561020157600080fd5b5061020a610a3a565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561024457818101518382015260200161022c565b50505050905090810190601f1680156102715780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561028b57600080fd5b506102a3600160a060020a0360043516602435610ac8565b604080519115158252519081900360200190f35b3480156102c357600080fd5b506101e3610b2e565b3480156102d857600080fd5b506101e3610b36565b3480156102ed57600080fd5b506102a3600160a060020a0360043581169060243516604435610b3c565b34801561031757600080fd5b50610320610c09565b6040805160ff9092168252519081900360200190f35b34801561034257600080fd5b506103586001606060020a031960043516610c12565b60408051600160a060020a03909716875260208701959095528585019390935263ffffffff9091166060850152608084015262ffffff1660a0830152519081900360c00190f35b3480156103ab57600080fd5b506103bd63ffffffff60043516610c5d565b60408051600160a060020a0389168152908101869052606081018590526080810184905260a081018390526001606060020a0319821660c082015260e0602080830182815289519284019290925288516101008401918a019080838360005b8381101561043457818101518382015260200161041c565b50505050905090810190601f1680156104615780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b34801561048157600080fd5b506101e36001606060020a031960043516610d3f565b3480156104a357600080fd5b5061020a610d5e565b3480156104b857600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102a394369492936024939284019190819084018382808284375094975050843595505050506020909101356001606060020a0319169050610db9565b61052c6001606060020a0319600435166112b1565b005b34801561053a57600080fd5b50610543611312565b6040805163ffffffff9092168252519081900360200190f35b34801561056857600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261052c94369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506113379650505050505050565b3480156105ff57600080fd5b5061052c6001606060020a03196004351661168b565b34801561062157600080fd5b506101e3600160a060020a0360043516611803565b34801561064257600080fd5b5061052c6001606060020a03196004351660243561181e565b34801561066757600080fd5b506101e3611943565b34801561067c57600080fd5b5061020a611948565b34801561069157600080fd5b506102a36004356119a3565b3480156106a957600080fd5b506102a3600160a060020a0360043516602435611a32565b3480156106cd57600080fd5b50610320611aaa565b3480156106e257600080fd5b506106eb611acb565b6040805162ffffff9092168252519081900360200190f35b34801561070f57600080fd5b5061052c600435611ad2565b34801561072757600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101e3943694929360249392840191908190840183828082843750949750508435955050505060208201356001606060020a0319169160400135600160a060020a03169050611aee565b34801561079f57600080fd5b506107ab600435611d3c565b604080516001606060020a0319909316835290151560208301528051918290030190f35b3480156107db57600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526102a3948235600160a060020a0316946024803595369594606494920191908190840183828082843750949750611d869650505050505050565b34801561084457600080fd5b5061084d611f21565b60408051600160a060020a039092168252519081900360200190f35b34801561087557600080fd5b5061088763ffffffff60043516611f30565b6040518089600160a060020a0316600160a060020a031681526020018060200188815260200187815260200186815260200180602001858152602001846bffffffffffffffffffffffff19166bffffffffffffffffffffffff1916815260200183810383528a818151815260200191508051906020019080838360005b8381101561091c578181015183820152602001610904565b50505050905090810190601f1680156109495780820380516001836020036101000a031916815260200191505b508381038252865181528651602091820191808901910280838360005b8381101561097e578181015183820152602001610966565b505050509050019a505050505050505050505060405180910390f35b3480156109a657600080fd5b506109bf6001606060020a0319600435166024356120be565b60408051938452602084019290925261ffff1682820152519081900360600190f35b3480156109ed57600080fd5b506101e3600160a060020a0360043581169060243516612120565b348015610a1457600080fd5b5061084d61214b565b348015610a2957600080fd5b506101e361215a565b6311e1a30081565b6003805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610ac05780601f10610a9557610100808354040283529160200191610ac0565b820191906000526020600020905b815481529060010190602001808311610aa357829003601f168201915b505050505081565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b6305f5e10081565b60005481565b600160a060020a0383166000908152600160205260408120548211801590610b875750600160a060020a03841660009081526002602090815260408083203384529091529020548211155b1515610b9257600080fd5b600160a060020a038084166000818152600160209081526040808320805488019055938816808352848320805488900390556002825284832033845282529184902080548790039055835186815293519293919260008051602061364e8339815191529281900390910190a35060015b9392505050565b60045460ff1681565b600b60205260009081526040902080546001820154600283015460048401546005850154600690950154600160a060020a03909416949293919263ffffffff9091169162ffffff1686565b6009602090815260009182526040918290208054600180830180548651600261010094831615949094026000190190911692909204601f8101869004860283018601909652858252600160a060020a03909216949293909290830182828015610d075780601f10610cdc57610100808354040283529160200191610d07565b820191906000526020600020905b815481529060010190602001808311610cea57829003601f168201915b50505060028401546003850154600486015460068701546007909701549596929591945092506c010000000000000000000000000287565b6001606060020a0319166000908152600b602052604090206003015490565b6006805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610ac05780601f10610a9557610100808354040283529160200191610ac0565b600080600080606060008060006311e1a3008a1015610dfa576040805161eab08152905160008051602061362e8339815191529181900360200190a16112a3565b336000908152600160205260409020548a1115610e39576040805161eaba8152905160008051602061362e8339815191529181900360200190a16112a3565b6001606060020a031989166000908152600b602052604090208054909750600160a060020a03161515610e8e576040805161eac48152905160008051602061362e8339815191529181900360200190a16112a3565b8987600101541015610ec2576040805161eace8152905160008051602061362e8339815191529181900360200190a16112a3565b6103e8600a8b020495506305f5e100861015610ee0576305f5e10095505b6040805160e0810182528854600160a060020a03168152600189015460208083019190915260028a01548284015260038a0180548451818402810184019095528085528a8f039950610fc5948a94938d936060860193909160009084015b82821015610f8e5760008481526020908190206040805160608101825260038602909201805483526001808201548486015260029091015461ffff16918301919091529083529092019101610f3e565b50505090825250600482015463ffffffff1660208201526005820154604082015260069091015462ffffff16606090910152612160565b9196509450925090508015610ffa5760408051828152905160008051602061362e8339815191529181900360200190a16112a3565b8654600160a060020a0390811660009081526001602090815260409182902080548a019055895482518a81529251931692339260008051602061364e83398151915292908290030190a333600081815260016020908152604080832080548f900390558051898152905192939260008051602061364e833981519152929181900390910190a360085460408051750100000000000000000000000000000000000000000090920463ffffffff1682526001606060020a03198b16602083015280517fa452c19abf34fda31e59719208cf19c16be3dc9573465e8bf2ec1e4e89d3fad89281900390910190a1604080516101008101825233815260208082018e81528284018e9052606083018a905242608084015260a0830188905260c083018790526001606060020a03198d1660e08401526008547501000000000000000000000000000000000000000000900463ffffffff16600090815260098352939093208251815473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039091161781559251805192939261119b9260018501920190613443565b5060408201516002820155606082015160038201556080820151600482015560a082015180516111d59160058401916020909101906134c1565b5060c0820151600682015560e0909101516007909101805473ffffffffffffffffffffffffffffffffffffffff19166c01000000000000000000000000909204919091179055600187810180548488019003905560028801805484019055845160048901805463ffffffff19811663ffffffff91821690930181169290921790556008805478ffffffff000000000000000000000000000000000000000000198116750100000000000000000000000000000000000000000091829004841685019093160291909117905597505b505050505050509392505050565b6001606060020a031981166000908152600b602052604090208054600160a060020a03163314611303576040805161ea748152905160008051602061362e8339815191529181900360200190a161130e565b600581018054340190555b5050565b6008547501000000000000000000000000000000000000000000900463ffffffff1681565b60008060008060008087600081518110151561134f57fe5b90602001015160f860020a900460f860020a02600160f860020a031916600360f860020a0214945060218801519550600280336040516020018082600160a060020a0316600160a060020a03166c010000000000000000000000000281526014019150506040516020818303038152906040526040518082805190602001908083835b602083106113f15780518252601f1990920191602091820191016113d2565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af1158015611432573d6000803e3d6000fd5b5050506040513d602081101561144757600080fd5b50516040805160208181019390935281518082038401815290820191829052805190928291908401908083835b602083106114935780518252601f199092019160209182019101611474565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af11580156114d4573d6000803e3d6000fd5b5050506040513d60208110156114e957600080fd5b505193506114f784886122bc565b92506115038686612393565b600160a060020a0384811691161461153d576040805161ea6a8152905160008051602061362e8339815191529181900360200190a1611681565b61154786866124a7565b6001606060020a031981166000908152600b6020526040902080549193509150600160a060020a03161561159d576040805161ea6f8152905160008051602061362e8339815191529181900360200190a1611681565b80543373ffffffffffffffffffffffffffffffffffffffff19918216178255600c805460068401805462ffffff191662ffffff909216919091179055604080518082019091526001606060020a03198516815260006020820181815283546001810185559390915290517fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c790920180549151919093166c010000000000000000000000009092049190911774ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000911515919091021790555b5050505050505050565b6001606060020a031981166000908152600b602052604081208054909190600160a060020a031633146116e0576040805161ea748152905160008051602061362e8339815191529181900360200190a16117fe565b60018201541515806116f55750600282015415155b806117035750600582015415155b15611730576040805161ea7e8152905160008051602061362e8339815191529181900360200190a16117fe565b6006820154600c8054909162ffffff1690811061174957fe5b60009182526020808320909101805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001781556001606060020a031986168352600b90915260408220805473ffffffffffffffffffffffffffffffffffffffff191681556001810183905560028101839055909250906117d9600383018261356c565b5060048101805463ffffffff1916905560006005820155600601805462ffffff191690555b505050565b600160a060020a031660009081526001602052604090205490565b6001606060020a031982166000908152600b602052604090208054600160a060020a03163314611870576040805161ea748152905160008051602061362e8339815191529181900360200190a16117fe565b81816005015410156118a4576040805161ea888152905160008051602061362e8339815191529181900360200190a16117fe565b600860149054906101000a900460ff1660ff16816002015482600101540102600a54838360050154038115156118d657fe5b041015611905576040805161ea928152905160008051602061362e8339815191529181900360200190a16117fe565b6005810180548390039055604051339083156108fc029084906000818181858888f1935050505015801561193d573d6000803e3d6000fd5b50505050565b600a81565b6005805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610ac05780601f10610a9557610100808354040283529160200191610ac0565b600073__Set___________________________________636ce8e081600d846040518363ffffffff1660e060020a028152600401808381526020018281526020019250505060206040518083038186803b158015611a0057600080fd5b505af4158015611a14573d6000803e3d6000fd5b505050506040513d6020811015611a2a57600080fd5b505192915050565b33600090815260016020526040812054821115611a4e57600080fd5b33600081815260016020908152604080832080548790039055600160a060020a038716808452928190208054870190558051868152905192939260008051602061364e833981519152929181900390910190a350600192915050565b60085474010000000000000000000000000000000000000000900460ff1681565b600c545b90565b600854600160a060020a03163314611ae957600080fd5b600a55565b6007546000908190819081908190819081908190600160a060020a03163314611b1657600080fd5b6001606060020a03198a166000908152600b602052604090208054909750600160a060020a03161515611b6b576040805161ea9c8152905160008051602061362e8339815191529181900360200190a1611d2d565b611b758c8b612678565b8096508197508298508399505050505073__Set___________________________________63831cb739600d8d6040518363ffffffff1660e060020a028152600401808381526020018281526020019250505060206040518083038186803b158015611be057600080fd5b505af4158015611bf4573d6000803e3d6000fd5b505050506040513d6020811015611c0a57600080fd5b50519150811515611c3d576040805161eaa68152905160008051602061362e8339815191529181900360200190a1611d2d565b6040805160608101825287815260208082018e815261ffff87811694840194855260038c81018054600180820183556000928352959091209551910290940193845590518383015592516002909201805461ffff191692909316919091179091558701805487019055611cb085856124a7565b90506001606060020a03198a811690821614611d1d576311e1a300861015611cfa576040805161eaf68152905160008051602061362e8339815191529181900360200190a1611d2d565b8654611d1590869086908990600160a060020a03168d612827565b859750611d2d565b6002870180548790039055600097505b50505050505050949350505050565b600c805482908110611d4a57fe5b6000918252602090912001546c010000000000000000000000008102915074010000000000000000000000000000000000000000900460ff1682565b336000818152600260209081526040808320600160a060020a038816808552908352818420879055815187815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a383600160a060020a031660405180807f72656365697665417070726f76616c28616464726573732c75696e743235362c81526020017f616464726573732c627974657329000000000000000000000000000000000000815250602e019050604051809103902060e060020a9004338530866040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a03168152602001828051906020019080838360005b83811015611ec6578181015183820152602001611eae565b50505050905090810190601f168015611ef35780820380516001836020036101000a031916815260200191505b509450505050506000604051808303816000875af1925050501515611f1757600080fd5b5060019392505050565b600754600160a060020a031681565b63ffffffff811660009081526009602090815260408083208054600180830180548551600261010094831615949094026000190190911692909204601f8101879004870283018701909552848252600160a060020a039092169560609590948594859488948694859491929190830182828015611fee5780601f10611fc357610100808354040283529160200191611fee565b820191906000526020600020905b815481529060010190602001808311611fd157829003601f168201915b505050505097508060020154965080600301549550806004015494508060050180548060200260200160405190810160405280929190818152602001828054801561208457602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116120475790505b50505050509350806006015492508060070160009054906101000a90046c0100000000000000000000000002915050919395975091939597565b6001606060020a031982166000908152600b60205260408120600381018054839283929091839190879081106120f057fe5b6000918252602090912060039091020180546001820154600290920154909991985061ffff169650945050505050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600854600160a060020a031681565b600a5481565b6000606060008060008060008060008960600151518a6080015163ffffffff161015156121915761ead898506122ae565b6302faf0809650896080015193508392505b8a851080156121bc57508960600151518363ffffffff16105b156121fd5760608a0151805163ffffffff85169081106121d857fe5b60209081029091010151516305f5e100979097019694909401936001909201916121a3565b8a85101561220f5761eae298506122ae565b868b116122205761eaec98506122ae565b83830391508163ffffffff16604051908082528060200260200182016040528015612255578160200160208202803883390190505b509750600090505b8163ffffffff168163ffffffff1610156122a457838101888263ffffffff1681518110151561228857fe5b63ffffffff90921660209283029091019091015260010161225d565b600098508a850395505b505050505092959194509250565b600080600080845160411415156122d6576000935061238a565b505050602082015160218301516041840151909160001a601b60ff821610156122fd57601b015b8060ff16601b1415801561231557508060ff16601c14155b15612323576000935061238a565b60408051600080825260208083018085528a905260ff8516838501526060830187905260808301869052925160019360a0808501949193601f19840193928390039091019190865af115801561237d573d6000803e3d6000fd5b5050506020604051035193505b50505092915050565b600080806401000003d01985860991506401000003d01985830991506401000003d0196007830891506123ed827f3fffffffffffffffffffffffffffffffffffffffffffffffffffffffbfffff0c6401000003d019612a10565b905060018082161484151514612406576401000003d019035b6401000003d019818209821461241b57600080fd5b848160405160200180838152602001828152602001925050506040516020818303038152906040526040518082805190602001908083835b602083106124725780518252601f199092019160209182019101612453565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912098975050505050505050565b600080826124d5577f02000000000000000000000000000000000000000000000000000000000000006124f7565b7f03000000000000000000000000000000000000000000000000000000000000005b604080517fff0000000000000000000000000000000000000000000000000000000000000083166020808301919091526021808301899052835180840390910181526041909201928390528151939450600393600293918291908401908083835b602083106125775780518252601f199092019160209182019101612558565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af11580156125b8573d6000803e3d6000fd5b5050506040513d60208110156125cd57600080fd5b50516040805160208181019390935281518082038401815290820191829052805190928291908401908083835b602083106126195780518252601f1990920191602091820191016125fa565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af115801561265a573d6000803e3d6000fd5b5050604051516c010000000000000000000000000295945050505050565b600080600080612686613590565b600480825260609081908190819081906126a3908d906000612a5a565b885281519096509094506126cf908d90869060009081106126c057fe5b90602001906020020151612b63565b151560a0880152608087015285516126ea908d906002612b92565b89528151909550909350909150612732908d908490600090811061270a57fe5b9060200190602002015185600081518110151561272357fe5b90602001906020020151612cf0565b6001606060020a031916602087015280518190600090811061275057fe5b60209081029091018101516040880152600060608801528601516001606060020a0319908116908c16146127df576127aa8c83600181518110151561279157fe5b9060200190602002015185600181518110151561272357fe5b6001606060020a03191660208701528051819060019081106127c857fe5b602090810290910101516040870152600160608701525b60208601516001606060020a03198c81169116146127fc57600080fd5b856040015186608001518760a001518860600151995099509950995050505050505092959194509250565b60008080806128368989612393565b93506103e8600a88020492506305f5e100831015612856576305f5e10092505b600160a060020a038616600081815260016020908152604091829020805487019055815186815291517f275a11e033325e9b28a23131fcc7e243a49bb38beb686051976dd8c8899d9a3c9281900390910190a2604080518481529051600160a060020a0388169160009160008051602061364e8339815191529181900360200190a36103e8600a88020491506305f5e1008210156128f6576305f5e10091505b600160a060020a038516600081815260016020908152604091829020805486019055815185815291517f275a11e033325e9b28a23131fcc7e243a49bb38beb686051976dd8c8899d9a3c9281900390910190a2604080518381529051600160a060020a0387169160009160008051602061364e8339815191529181900360200190a350600160a060020a0383166000818152600160209081526040918290208054868b03869003908101909155825181815292519093927f275a11e033325e9b28a23131fcc7e243a49bb38beb686051976dd8c8899d9a3c92908290030190a2604080518281529051600160a060020a0386169160009160008051602061364e8339815191529181900360200190a3505050505050505050565b600060405160208152602080820152602060408201528460608201528360808201528260a082015260208160c08360006005600019f11515612a5157600080fd5b51949350505050565b6060806000806000806060806000612a728c8c612d1b565b9b509550891580612a825750858a115b15612a8f57859450612a93565b8994505b84604051908082528060200260200182016040528015612abd578160200160208202803883390190505b50925084604051908082528060200260200182016040528015612aea578160200160208202803883390190505b509150600090505b84811015612b53578a8382815181101515612b0957fe5b6020908102909101015260249a909a0199612b248c8c612d1b565b8351909c509094508490839083908110612b3a57fe5b6020908102909101015299830160040199600101612af2565b50909a9099509650505050505050565b6024016000808080612b758686612d1b565b9550612b8390508686612ddd565b50909890975095505050505050565b606080606060008060008060608060606000612bae8e8e612d1b565b9d5096508b1580612bbe5750868c115b15612bcb57869550612bcf565b8b95505b85604051908082528060200260200182016040528015612bf9578160200160208202803883390190505b50935085604051908082528060200260200182016040528015612c26578160200160208202803883390190505b50925085604051908082528060200260200182016040528015612c53578160200160208202803883390190505b509150600090505b85811015612cde57612c6f8e8e6040612e14565b8282815181101515612c7d57fe5b6020908102909101015260089c909c019b612c988e8e612d1b565b8551909e509095508d90859083908110612cae57fe5b6020908102909101015282518590849083908110612cc857fe5b602090810290910101529b84019b600101612c5b565b509c919b509998509650505050505050565b6000612cfd848484613135565b15612d1657612d0f848460030161327b565b9050610c02565b610c02565b60008060008484815181101515612d2e57fe5b90602001015160f860020a900460f860020a0260f860020a9004905060018401935060fd8160ff161015612d6a5760ff81169250839150612dd5565b8060ff1660fd1415612d8f57612d8285856010612e14565b8460020192509250612dd5565b8060ff1660fe1415612db457612da785856020612e14565b8460040192509250612dd5565b8060ff1660ff1415612dd557612dcc85856040612e14565b84600801925092505b509250929050565b606060008060006060600080612df389896132f0565b98509250612e018989613371565b949b919a50985092965091945050505050565b60008160081415612e51578383815181101515612e2d57fe5b90602001015160f860020a900460f860020a0260f860020a900460ff169050610c02565b8160101415612ebd578383600101815181101515612e6b57fe5b90602001015160f860020a900460f860020a0260f860020a9004610100028484815181101515612e9757fe5b90602001015160f860020a900460f860020a0260f860020a90040161ffff169050610c02565b8160201415612f8e578383600301815181101515612ed757fe5b90602001015160f860020a900460f860020a0260f860020a90046301000000028484600201815181101515612f0857fe5b90602001015160f860020a900460f860020a0260f860020a900462010000028585600101815181101515612f3857fe5b90602001015160f860020a900460f860020a0260f860020a9004610100028686815181101515612f6457fe5b90602001015160f860020a900460f860020a0260f860020a900401010163ffffffff169050610c02565b8160401415610c02578383600701815181101515612fa857fe5b90602001015160f860020a900460f860020a0260f860020a9004670100000000000000028484600601815181101515612fdd57fe5b90602001015160f860020a900460f860020a0260f860020a9004660100000000000002858560050181518110151561301157fe5b90602001015160f860020a900460f860020a0260f860020a90046501000000000002868660040181518110151561304457fe5b90602001015160f860020a900460f860020a0260f860020a900464010000000002878760030181518110151561307657fe5b90602001015160f860020a900460f860020a0260f860020a900463010000000288886002018151811015156130a757fe5b90602001015160f860020a900460f860020a0260f860020a9004620100000289896001018151811015156130d757fe5b90602001015160f860020a900460f860020a0260f860020a9004610100028a8a81518110151561310357fe5b90602001015160f860020a900460f860020a0260f860020a90040101010101010167ffffffffffffffff169050610c02565b60008160191480156131775750838381518110151561315057fe5b90602001015160f860020a900460f860020a02600160f860020a031916607660f860020a02145b80156131b65750838360010181518110151561318f57fe5b90602001015160f860020a900460f860020a02600160f860020a03191660a960f860020a02145b80156131f5575083836002018151811015156131ce57fe5b90602001015160f860020a900460f860020a02600160f860020a031916601460f860020a02145b80156132345750838360170181518110151561320d57fe5b90602001015160f860020a900460f860020a02600160f860020a031916608860f860020a02145b80156132735750838360180181518110151561324c57fe5b90602001015160f860020a900460f860020a02600160f860020a03191660ac60f860020a02145b949350505050565b600080805b60148110156132d95780601303600802858583018151811015156132a057fe5b90602001015160f860020a900460f860020a0260f860020a9004600160a060020a03169060020a02820191508080600101915050613280565b506c01000000000000000000000000029392505050565b606060008060606133018686613413565b95509150600960ff83161080159061331d575060498260ff1611155b151561332857600080fd5b858581518110151561333657fe5b90602001015160f860020a900460f860020a0260f860020a900460ff16603014151561336157600080fd5b9560ff9091169390930193505050565b6000806000806000806133848888613413565b97509250602160ff84161461339857600080fd5b87878151811015156133a657fe5b6020910101519787016021908101519960f860020a998a90049099027fff00000000000000000000000000000000000000000000000000000000000000167f0300000000000000000000000000000000000000000000000000000000000000149897019695505050505050565b600080838381518110151561342457fe5b016020015160f860020a90819004810204915050600182019250929050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061348457805160ff19168380011785556134b1565b828001600101855582156134b1579182015b828111156134b1578251825591602001919060010190613496565b506134bd9291506135c5565b5090565b828054828255906000526020600020906007016008900481019282156135605791602002820160005b8382111561352e57835183826101000a81548163ffffffff021916908363ffffffff16021790555092602001926004016020816003010492830192600103026134ea565b801561355e5782816101000a81549063ffffffff021916905560040160208160030104928301926001030261352e565b505b506134bd9291506135df565b508054600082556003029060005260206000209081019061358d9190613600565b50565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b611acf91905b808211156134bd57600081556001016135cb565b611acf91905b808211156134bd57805463ffffffff191681556001016135e5565b611acf91905b808211156134bd576000808255600182015560028101805461ffff191690556003016136065600b56073699a886ff0a9e8b995881e51b5ccd562594c835e990ad2f7c35957a5a4ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058204f7a4e0ee8a4a7d7bf2fcd1567a0825df126d9531d58da542ab25aa406f2bf250029";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<>();
        _addresses.put("32001", "0x1a12d9fad7b8103966f2fdfe44dd6ce6eddab4c3");
    }

    protected DogeToken(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DogeToken(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<ErrorDogeTokenEventResponse> getErrorDogeTokenEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("ErrorDogeToken", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<ErrorDogeTokenEventResponse> responses = new ArrayList<ErrorDogeTokenEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ErrorDogeTokenEventResponse typedResponse = new ErrorDogeTokenEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.err = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ErrorDogeTokenEventResponse> errorDogeTokenEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("ErrorDogeToken", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ErrorDogeTokenEventResponse>() {
            @Override
            public ErrorDogeTokenEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                ErrorDogeTokenEventResponse typedResponse = new ErrorDogeTokenEventResponse();
                typedResponse.log = log;
                typedResponse.err = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<NewTokenEventResponse> getNewTokenEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("NewToken", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<NewTokenEventResponse> responses = new ArrayList<NewTokenEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewTokenEventResponse typedResponse = new NewTokenEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewTokenEventResponse> newTokenEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("NewToken", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewTokenEventResponse>() {
            @Override
            public NewTokenEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                NewTokenEventResponse typedResponse = new NewTokenEventResponse();
                typedResponse.log = log;
                typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<UnlockRequestEventResponse> getUnlockRequestEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("UnlockRequest", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}, new TypeReference<Bytes20>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<UnlockRequestEventResponse> responses = new ArrayList<UnlockRequestEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnlockRequestEventResponse typedResponse = new UnlockRequestEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.operatorPublicKeyHash = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<UnlockRequestEventResponse> unlockRequestEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("UnlockRequest", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}, new TypeReference<Bytes20>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, UnlockRequestEventResponse>() {
            @Override
            public UnlockRequestEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                UnlockRequestEventResponse typedResponse = new UnlockRequestEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.operatorPublicKeyHash = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Transfer", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TransferEventResponse> transferEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Transfer", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Approval", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ApprovalEventResponse> approvalEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Approval", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._spender = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<BigInteger> MIN_UNLOCK_VALUE() {
        final Function function = new Function("MIN_UNLOCK_VALUE", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> name() {
        final Function function = new Function("name", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> approve(String _spender, BigInteger _value) {
        final Function function = new Function(
                "approve", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_spender), 
                new org.web3j.abi.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> SUPERBLOCK_SUBMITTER_MIN_LOCK_FEE() {
        final Function function = new Function("SUPERBLOCK_SUBMITTER_MIN_LOCK_FEE", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> totalSupply() {
        final Function function = new Function("totalSupply", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> transferFrom(String _from, String _to, BigInteger _value) {
        final Function function = new Function(
                "transferFrom", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_from), 
                new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> decimals() {
        final Function function = new Function("decimals", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple6<String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> operators(byte[] param0) {
        final Function function = new Function("operators", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes20(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint24>() {}));
        return new RemoteCall<Tuple6<String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple6<String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple6<String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<Tuple7<String, String, BigInteger, BigInteger, BigInteger, BigInteger, byte[]>> unlocksPendingInvestorProof(BigInteger param0) {
        final Function function = new Function("unlocksPendingInvestorProof", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes20>() {}));
        return new RemoteCall<Tuple7<String, String, BigInteger, BigInteger, BigInteger, BigInteger, byte[]>>(
                new Callable<Tuple7<String, String, BigInteger, BigInteger, BigInteger, BigInteger, byte[]>>() {
                    @Override
                    public Tuple7<String, String, BigInteger, BigInteger, BigInteger, BigInteger, byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, String, BigInteger, BigInteger, BigInteger, BigInteger, byte[]>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (byte[]) results.get(6).getValue());
                    }
                });
    }

    public RemoteCall<String> version() {
        final Function function = new Function("version", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> unlockIdx() {
        final Function function = new Function("unlockIdx", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> balanceOf(String _owner) {
        final Function function = new Function("balanceOf", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> OPERATOR_UNLOCK_FEE() {
        final Function function = new Function("OPERATOR_UNLOCK_FEE", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> symbol() {
        final Function function = new Function("symbol", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> transfer(String _to, BigInteger _value) {
        final Function function = new Function(
                "transfer", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> collateralRatio() {
        final Function function = new Function("collateralRatio", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> MIN_LOCK_VALUE() {
        final Function function = new Function("MIN_LOCK_VALUE", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> SUPERBLOCK_SUBMITTER_LOCK_FEE() {
        final Function function = new Function("SUPERBLOCK_SUBMITTER_LOCK_FEE", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple2<byte[], Boolean>> operatorKeys(BigInteger param0) {
        final Function function = new Function("operatorKeys", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes20>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple2<byte[], Boolean>>(
                new Callable<Tuple2<byte[], Boolean>>() {
                    @Override
                    public Tuple2<byte[], Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<byte[], Boolean>(
                                (byte[]) results.get(0).getValue(), 
                                (Boolean) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> approveAndCall(String _spender, BigInteger _value, byte[] _extraData) {
        final Function function = new Function(
                "approveAndCall", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_spender), 
                new org.web3j.abi.datatypes.generated.Uint256(_value), 
                new org.web3j.abi.datatypes.DynamicBytes(_extraData)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> trustedRelayerContract() {
        final Function function = new Function("trustedRelayerContract", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> OPERATOR_LOCK_FEE() {
        final Function function = new Function("OPERATOR_LOCK_FEE", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> allowance(String _owner, String _spender) {
        final Function function = new Function("allowance", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner), 
                new org.web3j.abi.datatypes.Address(_spender)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> trustedDogeEthPriceOracle() {
        final Function function = new Function("trustedDogeEthPriceOracle", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> OPERATOR_MIN_UNLOCK_FEE() {
        final Function function = new Function("OPERATOR_MIN_UNLOCK_FEE", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> dogeEthPrice() {
        final Function function = new Function("dogeEthPrice", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> OPERATOR_MIN_LOCK_FEE() {
        final Function function = new Function("OPERATOR_MIN_LOCK_FEE", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public static RemoteCall<DogeToken> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _trustedRelayerContract, String _trustedDogeEthPriceOracle, BigInteger _collateralRatio) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_trustedRelayerContract), 
                new org.web3j.abi.datatypes.Address(_trustedDogeEthPriceOracle), 
                new org.web3j.abi.datatypes.generated.Uint8(_collateralRatio)));
        return deployRemoteCall(DogeToken.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<DogeToken> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _trustedRelayerContract, String _trustedDogeEthPriceOracle, BigInteger _collateralRatio) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_trustedRelayerContract), 
                new org.web3j.abi.datatypes.Address(_trustedDogeEthPriceOracle), 
                new org.web3j.abi.datatypes.generated.Uint8(_collateralRatio)));
        return deployRemoteCall(DogeToken.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public RemoteCall<TransactionReceipt> addOperator(byte[] operatorPublicKeyCompressed, byte[] signature) {
        final Function function = new Function(
                "addOperator", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(operatorPublicKeyCompressed), 
                new org.web3j.abi.datatypes.DynamicBytes(signature)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> deleteOperator(byte[] operatorPublicKeyHash) {
        final Function function = new Function(
                "deleteOperator", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes20(operatorPublicKeyHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getOperatorsLength() {
        final Function function = new Function("getOperatorsLength", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint24>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> addOperatorDeposit(byte[] operatorPublicKeyHash, BigInteger weiValue) {
        final Function function = new Function(
                "addOperatorDeposit", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes20(operatorPublicKeyHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> withdrawOperatorDeposit(byte[] operatorPublicKeyHash, BigInteger value) {
        final Function function = new Function(
                "withdrawOperatorDeposit", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes20(operatorPublicKeyHash), 
                new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> processTransaction(byte[] dogeTx, BigInteger txHash, byte[] operatorPublicKeyHash, String superblockSubmitterAddress) {
        final Function function = new Function(
                "processTransaction", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(dogeTx), 
                new org.web3j.abi.datatypes.generated.Uint256(txHash), 
                new org.web3j.abi.datatypes.generated.Bytes20(operatorPublicKeyHash), 
                new org.web3j.abi.datatypes.Address(superblockSubmitterAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> wasDogeTxProcessed(BigInteger txHash) {
        final Function function = new Function("wasDogeTxProcessed", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(txHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> doUnlock(String dogeAddress, BigInteger value, byte[] operatorPublicKeyHash) {
        final Function function = new Function(
                "doUnlock", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(dogeAddress), 
                new org.web3j.abi.datatypes.generated.Uint256(value), 
                new org.web3j.abi.datatypes.generated.Bytes20(operatorPublicKeyHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setDogeEthPrice(BigInteger _dogeEthPrice) {
        final Function function = new Function(
                "setDogeEthPrice", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_dogeEthPrice)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple8<String, String, BigInteger, BigInteger, BigInteger, List<BigInteger>, BigInteger, byte[]>> getUnlockPendingInvestorProof(BigInteger index) {
        final Function function = new Function("getUnlockPendingInvestorProof", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint32(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Uint32>>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes20>() {}));
        return new RemoteCall<Tuple8<String, String, BigInteger, BigInteger, BigInteger, List<BigInteger>, BigInteger, byte[]>>(
                new Callable<Tuple8<String, String, BigInteger, BigInteger, BigInteger, List<BigInteger>, BigInteger, byte[]>>() {
                    @Override
                    public Tuple8<String, String, BigInteger, BigInteger, BigInteger, List<BigInteger>, BigInteger, byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<String, String, BigInteger, BigInteger, BigInteger, List<BigInteger>, BigInteger, byte[]>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                convertToNative((List<Uint32>) results.get(5).getValue()), 
                                (BigInteger) results.get(6).getValue(), 
                                (byte[]) results.get(7).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> getUtxosLength(byte[] operatorPublicKeyHash) {
        final Function function = new Function("getUtxosLength", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes20(operatorPublicKeyHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple3<BigInteger, BigInteger, BigInteger>> getUtxo(byte[] operatorPublicKeyHash, BigInteger i) {
        final Function function = new Function("getUtxo", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes20(operatorPublicKeyHash), 
                new org.web3j.abi.datatypes.generated.Uint256(i)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint16>() {}));
        return new RemoteCall<Tuple3<BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple3<BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public static DogeToken load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DogeToken(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static DogeToken load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DogeToken(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class ErrorDogeTokenEventResponse {
        public Log log;

        public BigInteger err;
    }

    public static class NewTokenEventResponse {
        public Log log;

        public String user;

        public BigInteger value;
    }

    public static class UnlockRequestEventResponse {
        public Log log;

        public BigInteger id;

        public byte[] operatorPublicKeyHash;
    }

    public static class TransferEventResponse {
        public Log log;

        public String _from;

        public String _to;

        public BigInteger _value;
    }

    public static class ApprovalEventResponse {
        public Log log;

        public String _owner;

        public String _spender;

        public BigInteger _value;
    }
}
