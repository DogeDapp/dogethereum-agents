package org.dogethereum.agents.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.StaticArray9;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.3.1.
 */
public class DogeRelay extends Contract {
    private static final String BINARY = "0x608060405234801561001057600080fd5b5060405160208061293b83398101604052516005805482919060ff1916600183600281111561003b57fe5b0217905550506128eb806100506000396000f3006080604052600436106100d75763ffffffff60e060020a6000350416631defb76581146100dc5780632a02fa001461010d57806349347272146101225780635292a59014610149578063541e9cd71461016157806355c90a7c146101af5780636e2a8e7c146102705780637037c95d146102cb578063865bc71014610364578063922407ca1461038757806397dde209146103d55780639be7076a14610514578063aa86303614610529578063b88da759146105c4578063c11818a1146105dc578063db1ee903146106b5578063e1bafb91146106cd575b600080fd5b3480156100e857600080fd5b506100f16106ee565b60408051600160a060020a039092168252519081900360200190f35b34801561011957600080fd5b506100f16106fd565b34801561012e57600080fd5b5061013761070c565b60408051918252519081900360200190f35b34801561015557600080fd5b50610137600435610712565b34801561016d57600080fd5b5061019b60043567ffffffffffffffff602435166fffffffffffffffffffffffffffffffff60443516610ba3565b604080519115158252519081900360200190f35b3480156101bb57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101379436949293602493928401919081908401838280828437505060408051818801358901803560208181028481018201909552818452989b6bffffffffffffffffffffffff198b35169b8a8c01359b919a909950606090910197509295509082019350918291850190849080828437509497505084359550505050602090910135600160a060020a03169050610bdf565b34801561027c57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101379436949293602493928401919081908401838280828437509497505093359450610d789350505050565b3480156102d757600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261013794369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497505093359450610d889350505050565b34801561037057600080fd5b50610385600160a060020a0360043516610de7565b005b34801561039357600080fd5b5061039c610e42565b604051808261012080838360005b838110156103c25781810151838201526020016103aa565b5050505090500191505060405180910390f35b3480156103e157600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101379436949293602493928401919081908401838280828437505060408051818801358901803560208181028481018201909552818452989b6bffffffffffffffffffffffff198b35169b8a8c01359b919a9099506060909101975092955090820193509182918501908490808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020808901358a01803580830284810184018652818552999c8b359c909b909a9501985092965081019450909250829190850190849080828437509497505084359550505050602090910135600160a060020a03169050610ea1565b34801561052057600080fd5b5061013761111f565b34801561053557600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261013794369492936024939284019190819084018382808284375050604080516020808901358a01803580830284810184018652818552999c8b359c909b909a950198509296508101945090925082919085019084908082843750949750509335945061113b9350505050565b3480156105d057600080fd5b506101376004356111b0565b3480156105e857600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261013794369492936024939284019190819084018382808284375050604080516020808901358a01803580830284810184018652818552999c8b359c909b909a95019850929650810194509092508291908501908490808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375094975050933594506111c89350505050565b3480156106c157600080fd5b5061013760043561123f565b3480156106d957600080fd5b50610385600160a060020a0360043516611245565b600854600160a060020a031681565b600954600160a060020a031681565b60035490565b600854600090819081908190819081908190819081908190600160a060020a0316331461076d576040805160008152612742602082015281516000805160206128a0833981519152929181900390910190a160009950610b95565b60008b815260066020526040902060018101546002820154919a5098509650610795876112a0565b95506fffffffffffffffffffffffffffffffff861615156107e3576040805189815261272e602082015281516000805160206128a0833981519152929181900390910190a160009950610b95565b6107ec886112a0565b6fffffffffffffffffffffffffffffffff16156108365760408051898152612738602082015281516000805160206128a0833981519152929181900390910190a160009950610b95565b885468010000000000000000900463ffffffff169450610855876112cf565b60010167ffffffffffffffff16935061086d87611301565b9250600260055460ff16600281111561088257fe5b146109ef5760015463ffffffff1615156108f4578263ffffffff168563ffffffff16141580156108b7575063ffffffff831615155b156108ef576040805189815261271a602082015281516000805160206128a0833981519152929181900390910190a160009950610b95565b6109ef565b6001805463ffffffff161415610909576109ef565b61093961091d61091889611325565b61133b565b63ffffffff1661092c8961133b565b63ffffffff16038461135b565b9150600160055460ff16600281111561094e57fe5b14801561097a575060786109618861133b565b8a5463ffffffff64010000000090910481169190910316115b801561098957506202673c8410155b1561099657631e0fffff91505b8163ffffffff168563ffffffff16141580156109b7575063ffffffff821615155b156109ef5760408051898152612724602082015281516000805160206128a0833981519152929181900390910190a160009950610b95565b60008881526002602081905260409091208a54815463ffffffff191663ffffffff918216178083558c546401000000009081900483160267ffffffff0000000019909116178083558c5468010000000000000000908190048316026bffffffff000000000000000019909116178083558c546c01000000000000000000000000908190049092169091026fffffffff000000000000000000000000199091161781556001808c015490820155818b0154918101919091556003808b0154908201556004808b0154908201556005808b0154910155610acd888861141e565b60008b815260066020526040812080546fffffffffffffffffffffffffffffffff191681556001810182905560028101829055600381018290556004810182905560050155610b23610b1e8661152e565b61155a565b86019050610b318882611585565b6004546fffffffffffffffffffffffffffffffff821610610b685760038890556fffffffffffffffffffffffffffffffff81166004555b604080518981526020810186905281516000805160206128a0833981519152929181900390910190a18399505b505050505050505050919050565b60045460009015610bb657506000610bd8565b60016004556003849055610bca84846115bd565b610bd48483611585565b5060015b9392505050565b6000806000610bf08988888861113b565b91508115610d3b576040517ff997d47f000000000000000000000000000000000000000000000000000000008152602481018390526bffffffffffffffffffffffff19891660448201526060600482019081528a5160648301528a51600160a060020a0387169263f997d47f928d9287928e9291829160840190602087019080838360005b83811015610c8d578181015183820152602001610c75565b50505050905090810190601f168015610cba5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b158015610cdb57600080fd5b505af1158015610cef573d6000803e3d6000fd5b505050506040513d6020811015610d0557600080fd5b505160408051848152602081018390528151929350600080516020612860833981519152929081900390910190a1809250610d6c565b604080516000815261753a60208201528151600080516020612860833981519152929181900390910190a161753a92505b50509695505050505050565b6000610bd88360008551856115dc565b6000808080805b85821015610ddc57610da18885611ae5565b63ffffffff169050600484019350610dc4888583610dbf8b88611baa565b6115dc565b94508084019350602083019250600182019150610d8f565b505050509392505050565b600954600160a060020a0316158015610e085750600160a060020a03811615155b1515610e1357600080fd5b6009805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b610e4a612803565b60035480825260005b6008811015610e9c57600080610e698484611bb2565b63ffffffff168152602081019190915260400160002054836001830160098110610e8f57fe5b6020020152600101610e53565b505090565b600080600080610eb089611bdc565b600954604080517f642ed988000000000000000000000000000000000000000000000000000000008152600481018a90529051929550600160a060020a039091169163642ed988916024808201926020929091908290030181600087803b158015610f1a57600080fd5b505af1158015610f2e573d6000803e3d6000fd5b505050506040513d6020811015610f4457600080fd5b5051610f51848a8a611d7f565b14610f9057600080516020612880833981519152610f6e8e611bdc565b60408051918252614e4860208301528051918290030190a1614e48935061110f565b610f9d8d8c8c8c8a6111c8565b915081156110de5784600160a060020a031663f997d47f8e848f6040518463ffffffff1660e060020a0281526004018080602001848152602001836bffffffffffffffffffffffff19166bffffffffffffffffffffffff19168152602001828103825285818151815260200191508051906020019080838360005b83811015611030578181015183820152602001611018565b50505050905090810190601f16801561105d5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561107e57600080fd5b505af1158015611092573d6000803e3d6000fd5b505050506040513d60208110156110a857600080fd5b505160408051848152602081018390528151929350600080516020612860833981519152929081900390910190a180935061110f565b604080516000815261753a60208201528151600080516020612860833981519152929181900390910190a161753a93505b5050509998505050505050505050565b600061112c6003546112cf565b67ffffffffffffffff16905090565b60008061114786611bdc565b90508551604014156111865760408051828152614e5c60208201528151600080516020612880833981519152929181900390910190a1600091506111a7565b61119281868686611dfc565b600114156111a2578091506111a7565b600091505b50949350505050565b60009081526002602052604090205463ffffffff1690565b6000806111d487611bdc565b90508651604014156112135760408051828152614e5c60208201528151600080516020612880833981519152929181900390910190a160009150611235565b6112208187878787611f02565b6001141561123057809150611235565b600091505b5095945050505050565b50600090565b600854600160a060020a03161580156112665750600160a060020a03811615155b151561127157600080fd5b6008805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000818152600260205260408120600401547001000000000000000000000000000000009081025b0492915050565b6000818152600260205260408120600401547801000000000000000000000000000000000000000000000000906112c8565b60009081526002602052604090205468010000000000000000900463ffffffff1690565b6000908152600260208190526040909120015490565b600090815260026020526040902054640100000000900463ffffffff1690565b6000603c6008603b198501600790810b91909105820190602d90605a90859084900b83131561138c5782935061139e565b8160070b8460070b131561139e578193505b6113a78761152e565b90508360070b810290508460070b818115156113bf57fe5b0490507d0fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81111561140957507d0fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b6114128161216b565b98975050505050505050565b6001805463ffffffff9081166000908152602081905260408120859055915482918291829161144f91889116612203565b6001805463ffffffff80821683011663ffffffff1990911617905561147f86611477876112cf565b6001016115bd565b6000935061148c85612243565b925061149a84600085612280565b93506114a5866112cf565b67ffffffffffffffff169150600190505b6008811015611512576114c8816122ba565b828115156114d257fe5b06600114156114f0576114e9848260040285612280565b935061150a565b61150784826004026115028885611bb2565b612280565b93505b6001016114b6565b5050506000928352600260205260409092206005019190915550565b62ffffff8116630100000063ffffffff838116919091041660021981016101000a8202915b5050919050565b6000817d0fffff0000000000000000000000000000000000000000000000000000008115156112c857fe5b6000828152600260205260409020600401546115a3816010846122c0565b600093845260026020526040909320600401929092555050565b600082815260026020526040812060040154906115a39082908461237e565b60008060008060006050871015611621576040805160008152612742602082015281516000805160206128a0833981519152929181900390910190a160009450611ad9565b60078054600101908190556000908152600660205260409020935061164689896123e4565b80518554602080840151604080860151606087015163ffffffff9081166c01000000000000000000000000026fffffffff0000000000000000000000001992821668010000000000000000026bffffffff0000000000000000199583166401000000000267ffffffff00000000199390991663ffffffff19909816979097179190911696909617929092169390931716929092178755608080840151600189015560a0840151600289015560c0909301516003880155517ffa7199a1000000000000000000000000000000000000000000000000000000008152602481018b9052604481018a905260648101899052600481019283528b5160848201528b5173__DogeTx________________________________9363fa7199a1938e938e938e938e939092839260a49091019188019080838360005b8381101561179457818101518382015260200161177c565b50505050905090810190601f1680156117c15780820380516001836020036101000a031916815260200191505b509550505050505060606040518083038186803b1580156117e157600080fd5b505af41580156117f5573d6000803e3d6000fd5b505050506040513d606081101561180b57600080fd5b50805160208201516040909201519094509092509050821561185957604080518381526020810185905281516000805160206128a0833981519152929181900390910190a160009450611ad9565b6040805160e081018252855463ffffffff80821683526401000000008204811660208401526801000000000000000082048116938301939093526c010000000000000000000000009004909116606082015260018501546080820152600285015460a0820152600385015460c08201526118d29061245d565b156119da57600854600160a060020a031663b3fb85bd6118fa8b8a8c01604f19810190612467565b60075460405160e060020a63ffffffff851602815260248101869052604481018290523360648201819052306084830181905260a060048401908152855160a48501528551899594829160c490910190602089019080838360005b8381101561196d578181015183820152602001611955565b50505050905090810190601f16801561199a5780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b1580156119bd57600080fd5b505af11580156119d1573d6000803e3d6000fd5b50505050611ad4565b600854600160a060020a031663b3fb85bd6119f88b60006050612467565b60075460405160e060020a63ffffffff8516028152602481018b9052604481018290523360648201819052306084830181905260a060048401908152855160a485015285518e9594829160c490910190602089019080838360005b83811015611a6b578181015183820152602001611a53565b50505050905090810190601f168015611a985780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b158015611abb57600080fd5b505af1158015611acf573d6000803e3d6000fd5b505050505b600194505b50505050949350505050565b60008282600301815181101515611af857fe5b90602001015160f860020a900460f860020a0260f860020a90048383600201815181101515611b2357fe5b90602001015160f860020a900460f860020a0260f860020a9004610100028484600101815181101515611b5257fe5b90602001015160f860020a900460f860020a0260f860020a900462010000028585815181101515611b7f57fe5b90602001015160f860020a900460f860020a0260f860020a9004630100000002010101905092915050565b016020015190565b600082815260026020818152604083206005015460e060020a9291850290910a025b049392505050565b6000611d79600280846040516020018082805190602001908083835b60208310611c175780518252601f199092019160209182019101611bf8565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310611c7a5780518252601f199092019160209182019101611c5b565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af1158015611cbb573d6000803e3d6000fd5b5050506040513d6020811015611cd057600080fd5b50516040805160208181019390935281518082038401815290820191829052805190928291908401908083835b60208310611d1c5780518252601f199092019160209182019101611cfd565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af1158015611d5d573d6000803e3d6000fd5b5050506040513d6020811015611d7257600080fd5b50516124c7565b92915050565b60008381808080805b8751851015611dee578785815181101515611d9f57fe5b6020908102909101015193506002890692508260011415611dc4575082905084611dd1565b821515611dd15750849050825b611ddb82826124f2565b9550600289049850600185019450611d88565b509398975050505050505050565b6000611e0782612560565b15611e3f5760408051868152614e3460208201528151600080516020612880833981519152929181900390910190a150614e34611efa565b611e488261259f565b1515611e815760408051868152614e3e60208201528151600080516020612880833981519152929181900390910190a150614e3e611efa565b611e8a826125db565b611e95868686611d7f565b14611ecd5760408051868152614e5260208201528151600080516020612880833981519152929181900390910190a150614e52611efa565b60408051868152600160208201528151600080516020612880833981519152929181900390910190a15060015b949350505050565b600954604080517f48aefc320000000000000000000000000000000000000000000000000000000081526004810184905290516000928392600160a060020a03909116916348aefc329160248082019260209290919082900301818787803b158015611f6d57600080fd5b505af1158015611f81573d6000803e3d6000fd5b505050506040513d6020811015611f9757600080fd5b50511515611fd35760408051888152614e3e60208201528151600080516020612880833981519152929181900390910190a1614e3e9150611235565b604080517fd2db98720000000000000000000000000000000000000000000000000000000081526000602482018190526004820192835286516044830152865173__DogeTx________________________________9363d2db9872938993928291606401906020860190808383885b8381101561205a578181015183820152602001612042565b50505050905090810190601f1680156120875780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b1580156120a557600080fd5b505af41580156120b9573d6000803e3d6000fd5b505050506040513d60208110156120cf57600080fd5b50519050806120df888888611d7f565b1461213557806120f0888888611d7f565b60408051918252519081900360200190a160408051888152614e5260208201528151600080516020612880833981519152929181900390910190a1614e529150611235565b60408051888152600160208201528151600080516020612880833981519152929181900390910190a15060019695505050505050565b600080600061218661217c856125f0565b6007016003612615565b915060009050600382116121b0576121a98462ffffff1683600303600802612625565b90506121c8565b6121c08460038403600802612615565b62ffffff1690505b600062800000821611156121f0576121e78163ffffffff166008612615565b90506001820191505b6121fb826018612625565b179392505050565b60008281526002602052604090206004015463ffffffff82166122288260088361237e565b60009485526002602052604090942060040193909355505050565b60008181526002602052604081206004015478010000000000000000000000000000000000000000000000009068010000000000000000026112c8565b600060405184815282601c1a8482015382601d1a6001850182015382601e1a6002850182015382601f1a6003850182015351949350505050565b60050a90565b60006040518481528260101a848201538260111a600185018201538260121a600285018201538260131a600385018201538260141a600485018201538260151a600585018201538260161a600685018201538260171a600785018201538260181a600885018201538260191a6009850182015382601a1a600a850182015382601b1a600b850182015382601c1a600c850182015382601d1a600d850182015382601e1a600e850182015382601f1a600f850182015351949350505050565b60006040518481528260181a848201538260191a6001850182015382601a1a6002850182015382601b1a6003850182015382601c1a6004850182015382601d1a6005850182015382601e1a6006850182015382601f1a6007850182015351949350505050565b6123ec612823565b6123f6838361262c565b63ffffffff1681526124088383612660565b63ffffffff16602082015261241d8383612694565b63ffffffff166040820152612434838360506126c8565b60808201526124438383612723565b60a08201526124528383612736565b60c082015292915050565b5161010016151590565b6060600060608484039150816040519080825280601f01601f1916602001820160405280156124a0578160200160208202803883390190505b5090508160208201838760208a010160045afa15156124be57600080fd5b95945050505050565b600060405160005b60208110156124ea578381601f031a818301536001016124cf565b505192915050565b6000610bd8600280612503866124c7565b61250c866124c7565b604051602001808381526020018281526020019250505060405160208183030381529060405260405180828051906020019080838360208310611c7a5780518252601f199092019160209182019101611c5b565b600354600090815b600681101561259557818414156125825760019250611553565b61258b82611325565b9150600101612568565b5060009392505050565b6000806125ab836112cf565b67ffffffffffffffff1690508015156125c757600091506125d5565b826125d182612749565b1491505b50919050565b60009081526002602052604090206003015490565b6000815b60008111156125d557612608816001612615565b90506001820191506125f4565b60008160020a83811515611bd457fe5b60020a0290565b600081600484010151630100000081601b1a026201000082601a1a02016101008260191a02018160181a0191505092915050565b600081604c84010151630100000081601b1a026201000082601a1a02016101008260191a02018160181a0191505092915050565b600081605084010151630100000081601b1a026201000082601a1a02016101008260191a02018160181a0191505092915050565b6000611efa60026126da8686866127dc565b60408051602080820193909352815180820384018152908201918290528051909282919084019080838360208310611d1c5780518252601f199092019160209182019101611cfd565b81810160240151600090611efa816124c7565b81810160440151600090611efa816124c7565b60035460009060075b8361275c836112cf565b67ffffffffffffffff1611156127d5575b612776816122ba565b84612780846112cf565b67ffffffffffffffff16031080156127985750600081115b156127a6576000190161276d565b6000806127b38484611bb2565b63ffffffff1663ffffffff168152602001908152602001600020549150612752565b5092915050565b60006040516020818486602089010160025afa15156127fa57600080fd5b51949350505050565b610120604051908101604052806009906020820280388339509192915050565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c08101919091529056004e64138cc499eb1adf9edff9ef69bd45c56ac4bfd307540952e4c9d51eab55c165bd72698b9ffcfb3c7cb4c7414e13225cabd57fb690e183ae8c01c8ec268ebd6080b2cdc7fc4777ed1e1066af5de1df45ae9186adbdb7aec21fde27a3e17e4ca165627a7a723058203b1817e1dfec6ae1bc4dcd6d31bf6d09135e16a66e642adf79dfbe2da899b5130029";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<>();
        _addresses.put("32001", "0xc7744012a42f688dc6b2eafecc18f9d1807b00c7");
    }

    protected DogeRelay(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DogeRelay(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<StoreHeaderEventResponse> getStoreHeaderEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("StoreHeader", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<StoreHeaderEventResponse> responses = new ArrayList<StoreHeaderEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            StoreHeaderEventResponse typedResponse = new StoreHeaderEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.blockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<StoreHeaderEventResponse> storeHeaderEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("StoreHeader", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, StoreHeaderEventResponse>() {
            @Override
            public StoreHeaderEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                StoreHeaderEventResponse typedResponse = new StoreHeaderEventResponse();
                typedResponse.log = log;
                typedResponse.blockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<GetHeaderEventResponse> getGetHeaderEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("GetHeader", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<GetHeaderEventResponse> responses = new ArrayList<GetHeaderEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            GetHeaderEventResponse typedResponse = new GetHeaderEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.blockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<GetHeaderEventResponse> getHeaderEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("GetHeader", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, GetHeaderEventResponse>() {
            @Override
            public GetHeaderEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                GetHeaderEventResponse typedResponse = new GetHeaderEventResponse();
                typedResponse.log = log;
                typedResponse.blockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<VerifyTransactionEventResponse> getVerifyTransactionEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("VerifyTransaction", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<VerifyTransactionEventResponse> responses = new ArrayList<VerifyTransactionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VerifyTransactionEventResponse typedResponse = new VerifyTransactionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.txHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<VerifyTransactionEventResponse> verifyTransactionEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("VerifyTransaction", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, VerifyTransactionEventResponse>() {
            @Override
            public VerifyTransactionEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                VerifyTransactionEventResponse typedResponse = new VerifyTransactionEventResponse();
                typedResponse.log = log;
                typedResponse.txHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<RelayTransactionEventResponse> getRelayTransactionEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("RelayTransaction", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<RelayTransactionEventResponse> responses = new ArrayList<RelayTransactionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RelayTransactionEventResponse typedResponse = new RelayTransactionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.txHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RelayTransactionEventResponse> relayTransactionEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("RelayTransaction", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, RelayTransactionEventResponse>() {
            @Override
            public RelayTransactionEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                RelayTransactionEventResponse typedResponse = new RelayTransactionEventResponse();
                typedResponse.log = log;
                typedResponse.txHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<String> scryptChecker() {
        final Function function = new Function("scryptChecker", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> superblocks() {
        final Function function = new Function("superblocks", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public static RemoteCall<DogeRelay> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger _network) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(_network)));
        return deployRemoteCall(DogeRelay.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<DogeRelay> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger _network) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(_network)));
        return deployRemoteCall(DogeRelay.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public RemoteCall<TransactionReceipt> setScryptChecker(String _scryptChecker) {
        final Function function = new Function(
                "setScryptChecker", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_scryptChecker)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setSuperblocks(String _claimManager) {
        final Function function = new Function(
                "setSuperblocks", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_claimManager)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setInitialParent(BigInteger _blockHash, BigInteger _height, BigInteger _chainWork) {
        final Function function = new Function(
                "setInitialParent", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_blockHash), 
                new org.web3j.abi.datatypes.generated.Uint64(_height), 
                new org.web3j.abi.datatypes.generated.Uint128(_chainWork)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> storeBlockHeader(byte[] _blockHeaderBytes, BigInteger _proposedScryptBlockHash) {
        final Function function = new Function(
                "storeBlockHeader", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(_blockHeaderBytes), 
                new org.web3j.abi.datatypes.generated.Uint256(_proposedScryptBlockHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> scryptVerified(byte[] _proposalId) {
        final Function function = new Function(
                "scryptVerified", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_proposalId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> scryptFailed(byte[] _proposalId) {
        final Function function = new Function(
                "scryptFailed", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_proposalId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> bulkStoreHeaders(byte[] _headersBytes, byte[] _hashesBytes, BigInteger count) {
        final Function function = new Function(
                "bulkStoreHeaders", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(_headersBytes), 
                new org.web3j.abi.datatypes.DynamicBytes(_hashesBytes), 
                new org.web3j.abi.datatypes.generated.Uint256(count)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> verifyTx(byte[] _txBytes, BigInteger _txIndex, List<BigInteger> _siblings, BigInteger _txBlockHash) {
        final Function function = new Function(
                "verifyTx", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(_txBytes), 
                new org.web3j.abi.datatypes.generated.Uint256(_txIndex), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(_siblings, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(_txBlockHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> verifyTx(byte[] _txBytes, BigInteger _txIndex, List<BigInteger> _siblings, byte[] _txBlockHeaderBytes, byte[] _txSuperblockId) {
        final Function function = new Function(
                "verifyTx", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(_txBytes), 
                new org.web3j.abi.datatypes.generated.Uint256(_txIndex), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(_siblings, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicBytes(_txBlockHeaderBytes), 
                new org.web3j.abi.datatypes.generated.Bytes32(_txSuperblockId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> relayTx(byte[] _txBytes, byte[] operatorPublicKeyHash, BigInteger _txIndex, List<BigInteger> _siblings, BigInteger _txBlockHash, String _targetContract) {
        final Function function = new Function(
                "relayTx", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(_txBytes), 
                new org.web3j.abi.datatypes.generated.Bytes20(operatorPublicKeyHash), 
                new org.web3j.abi.datatypes.generated.Uint256(_txIndex), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(_siblings, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(_txBlockHash), 
                new org.web3j.abi.datatypes.Address(_targetContract)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> relayTx(byte[] _txBytes, byte[] _operatorPublicKeyHash, BigInteger _txIndex, List<BigInteger> _txSiblings, byte[] _dogeBlockHeader, BigInteger _dogeBlockIndex, List<BigInteger> _dogeBlockSiblings, byte[] _superblockId, String _targetContract) {
        final Function function = new Function(
                "relayTx", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(_txBytes), 
                new org.web3j.abi.datatypes.generated.Bytes20(_operatorPublicKeyHash), 
                new org.web3j.abi.datatypes.generated.Uint256(_txIndex), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(_txSiblings, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicBytes(_dogeBlockHeader), 
                new org.web3j.abi.datatypes.generated.Uint256(_dogeBlockIndex), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(_dogeBlockSiblings, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Bytes32(_superblockId), 
                new org.web3j.abi.datatypes.Address(_targetContract)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<List> getBlockLocator() {
        final Function function = new Function("getBlockLocator", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray9<Uint256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<BigInteger> getBestBlockHeight() {
        final Function function = new Function("getBestBlockHeight", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getBestBlockHash() {
        final Function function = new Function("getBestBlockHash", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getVersion(BigInteger _blockHash) {
        final Function function = new Function("getVersion", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_blockHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public static DogeRelay load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DogeRelay(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static DogeRelay load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DogeRelay(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class StoreHeaderEventResponse {
        public Log log;

        public byte[] blockHash;

        public BigInteger returnCode;
    }

    public static class GetHeaderEventResponse {
        public Log log;

        public byte[] blockHash;

        public BigInteger returnCode;
    }

    public static class VerifyTransactionEventResponse {
        public Log log;

        public byte[] txHash;

        public BigInteger returnCode;
    }

    public static class RelayTransactionEventResponse {
        public Log log;

        public byte[] txHash;

        public BigInteger returnCode;
    }
}
