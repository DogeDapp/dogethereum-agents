package org.dogethereum.agents.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.StaticArray9;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.3.1.
 */
public class DogeRelay extends Contract {
    private static final String BINARY = "0x608060405234801561001057600080fd5b506040516020806127b683398101604052516005805482919060ff1916600183600281111561003b57fe5b021790555050612766806100506000396000f3006080604052600436106100d75763ffffffff60e060020a6000350416631defb76581146100dc5780632a02fa001461010d57806349347272146101225780635292a59014610149578063541e9cd71461016157806355c90a7c146101af5780636e2a8e7c146102705780637037c95d146102cb578063865bc71014610364578063922407ca1461038757806397dde209146103d55780639be7076a14610514578063aa86303614610529578063b88da759146105c4578063c11818a1146105dc578063db1ee903146106b5578063e1bafb91146106cd575b600080fd5b3480156100e857600080fd5b506100f16106ee565b60408051600160a060020a039092168252519081900360200190f35b34801561011957600080fd5b506100f16106fd565b34801561012e57600080fd5b5061013761070c565b60408051918252519081900360200190f35b34801561015557600080fd5b50610137600435610712565b34801561016d57600080fd5b5061019b60043567ffffffffffffffff602435166fffffffffffffffffffffffffffffffff60443516610c31565b604080519115158252519081900360200190f35b3480156101bb57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101379436949293602493928401919081908401838280828437505060408051818801358901803560208181028481018201909552818452989b6bffffffffffffffffffffffff198b35169b8a8c01359b919a909950606090910197509295509082019350918291850190849080828437509497505084359550505050602090910135600160a060020a03169050610c6d565b34801561027c57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101379436949293602493928401919081908401838280828437509497505093359450610e069350505050565b3480156102d757600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261013794369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497505093359450610e169350505050565b34801561037057600080fd5b50610385600160a060020a0360043516610e75565b005b34801561039357600080fd5b5061039c610ed0565b604051808261012080838360005b838110156103c25781810151838201526020016103aa565b5050505090500191505060405180910390f35b3480156103e157600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101379436949293602493928401919081908401838280828437505060408051818801358901803560208181028481018201909552818452989b6bffffffffffffffffffffffff198b35169b8a8c01359b919a9099506060909101975092955090820193509182918501908490808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020808901358a01803580830284810184018652818552999c8b359c909b909a9501985092965081019450909250829190850190849080828437509497505084359550505050602090910135600160a060020a03169050610f2f565b34801561052057600080fd5b506101376111ad565b34801561053557600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261013794369492936024939284019190819084018382808284375050604080516020808901358a01803580830284810184018652818552999c8b359c909b909a95019850929650810194509092508291908501908490808284375094975050933594506111c99350505050565b3480156105d057600080fd5b5061013760043561123e565b3480156105e857600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261013794369492936024939284019190819084018382808284375050604080516020808901358a01803580830284810184018652818552999c8b359c909b909a95019850929650810194509092508291908501908490808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375094975050933594506112569350505050565b3480156106c157600080fd5b506101376004356112cd565b3480156106d957600080fd5b50610385600160a060020a03600435166112d3565b600854600160a060020a031681565b600954600160a060020a031681565b60035490565b600854600090819081908190819081908190819081908190600160a060020a0316331461076d5760408051600081526127426020820152815160008051602061271b833981519152929181900390910190a160009950610c23565b60008b815260066020526040902060018101546002820154919a50985096506107958761132e565b95506fffffffffffffffffffffffffffffffff861615156107e3576040805189815261272e6020820152815160008051602061271b833981519152929181900390910190a160009950610c23565b6107ec8861132e565b6fffffffffffffffffffffffffffffffff161561083657604080518981526127386020820152815160008051602061271b833981519152929181900390910190a160009950610c23565b885468010000000000000000900463ffffffff1694506108558761135d565b60010167ffffffffffffffff16935061086d8761138f565b9250600260055460ff16600281111561088257fe5b14610a7d5760015463ffffffff1615156108f4578263ffffffff168563ffffffff16141580156108b7575063ffffffff831615155b156108ef576040805189815261271a6020820152815160008051602061271b833981519152929181900390910190a160009950610c23565b610a7d565b6001805463ffffffff16141561090957610a7d565b73__DogeTx________________________________637034991b61093461092f8a6113b3565b6113c9565b63ffffffff166109438a6113c9565b63ffffffff1603856040518363ffffffff1660e060020a028152600401808360070b60070b81526020018263ffffffff1663ffffffff1681526020019250505060206040518083038186803b15801561099b57600080fd5b505af41580156109af573d6000803e3d6000fd5b505050506040513d60208110156109c557600080fd5b50519150600160055460ff1660028111156109dc57fe5b148015610a08575060786109ef886113c9565b8a5463ffffffff64010000000090910481169190910316115b8015610a1757506202673c8410155b15610a2457631e0fffff91505b8163ffffffff168563ffffffff1614158015610a45575063ffffffff821615155b15610a7d57604080518981526127246020820152815160008051602061271b833981519152929181900390910190a160009950610c23565b60008881526002602081905260409091208a54815463ffffffff191663ffffffff918216178083558c546401000000009081900483160267ffffffff0000000019909116178083558c5468010000000000000000908190048316026bffffffff000000000000000019909116178083558c546c01000000000000000000000000908190049092169091026fffffffff000000000000000000000000199091161781556001808c015490820155818b0154918101919091556003808b0154908201556004808b0154908201556005808b0154910155610b5b88886113e9565b60008b815260066020526040812080546fffffffffffffffffffffffffffffffff191681556001810182905560028101829055600381018290556004810182905560050155610bb1610bac866114f9565b611525565b86019050610bbf8882611550565b6004546fffffffffffffffffffffffffffffffff821610610bf65760038890556fffffffffffffffffffffffffffffffff81166004555b6040805189815260208101869052815160008051602061271b833981519152929181900390910190a18399505b505050505050505050919050565b60045460009015610c4457506000610c66565b60016004556003849055610c588484611588565b610c628483611550565b5060015b9392505050565b6000806000610c7e898888886111c9565b91508115610dc9576040517ff997d47f000000000000000000000000000000000000000000000000000000008152602481018390526bffffffffffffffffffffffff19891660448201526060600482019081528a5160648301528a51600160a060020a0387169263f997d47f928d9287928e9291829160840190602087019080838360005b83811015610d1b578181015183820152602001610d03565b50505050905090810190601f168015610d485780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b158015610d6957600080fd5b505af1158015610d7d573d6000803e3d6000fd5b505050506040513d6020811015610d9357600080fd5b5051604080518481526020810183905281519293506000805160206126db833981519152929081900390910190a1809250610dfa565b604080516000815261753a602082015281516000805160206126db833981519152929181900390910190a161753a92505b50509695505050505050565b6000610c668360008551856115a7565b6000808080805b85821015610e6a57610e2f8885611a41565b63ffffffff169050600484019350610e52888583610e4d8b88611b06565b6115a7565b94508084019350602083019250600182019150610e1d565b505050509392505050565b600954600160a060020a0316158015610e965750600160a060020a03811615155b1515610ea157600080fd5b6009805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b610ed861267e565b60035480825260005b6008811015610f2a57600080610ef78484611b0e565b63ffffffff168152602081019190915260400160002054836001830160098110610f1d57fe5b6020020152600101610ee1565b505090565b600080600080610f3e89611b35565b600954604080517f642ed988000000000000000000000000000000000000000000000000000000008152600481018a90529051929550600160a060020a039091169163642ed988916024808201926020929091908290030181600087803b158015610fa857600080fd5b505af1158015610fbc573d6000803e3d6000fd5b505050506040513d6020811015610fd257600080fd5b5051610fdf848a8a611cd8565b1461101e576000805160206126fb833981519152610ffc8e611b35565b60408051918252614e4860208301528051918290030190a1614e48935061119d565b61102b8d8c8c8c8a611256565b9150811561116c5784600160a060020a031663f997d47f8e848f6040518463ffffffff1660e060020a0281526004018080602001848152602001836bffffffffffffffffffffffff19166bffffffffffffffffffffffff19168152602001828103825285818151815260200191508051906020019080838360005b838110156110be5781810151838201526020016110a6565b50505050905090810190601f1680156110eb5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561110c57600080fd5b505af1158015611120573d6000803e3d6000fd5b505050506040513d602081101561113657600080fd5b5051604080518481526020810183905281519293506000805160206126db833981519152929081900390910190a180935061119d565b604080516000815261753a602082015281516000805160206126db833981519152929181900390910190a161753a93505b5050509998505050505050505050565b60006111ba60035461135d565b67ffffffffffffffff16905090565b6000806111d586611b35565b90508551604014156112145760408051828152614e5c602082015281516000805160206126fb833981519152929181900390910190a160009150611235565b61122081868686611d55565b6001141561123057809150611235565b600091505b50949350505050565b60009081526002602052604090205463ffffffff1690565b60008061126287611b35565b90508651604014156112a15760408051828152614e5c602082015281516000805160206126fb833981519152929181900390910190a1600091506112c3565b6112ae8187878787611e5b565b600114156112be578091506112c3565b600091505b5095945050505050565b50600090565b600854600160a060020a03161580156112f45750600160a060020a03811615155b15156112ff57600080fd5b6008805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000818152600260205260408120600401547001000000000000000000000000000000009081025b0492915050565b600081815260026020526040812060040154780100000000000000000000000000000000000000000000000090611356565b60009081526002602052604090205468010000000000000000900463ffffffff1690565b6000908152600260208190526040909120015490565b600090815260026020526040902054640100000000900463ffffffff1690565b6001805463ffffffff9081166000908152602081905260408120859055915482918291829161141a918891166120c4565b6001805463ffffffff80821683011663ffffffff1990911617905561144a866114428761135d565b600101611588565b6000935061145785612104565b925061146584600085612141565b93506114708661135d565b67ffffffffffffffff169150600190505b60088110156114dd576114938161217b565b8281151561149d57fe5b06600114156114bb576114b4848260040285612141565b93506114d5565b6114d284826004026114cd8885611b0e565b612141565b93505b600101611481565b5050506000928352600260205260409092206005019190915550565b62ffffff8116630100000063ffffffff838116919091041660021981016101000a8202915b5050919050565b6000817d0fffff00000000000000000000000000000000000000000000000000000081151561135657fe5b60008281526002602052604090206004015461156e81601084612181565b600093845260026020526040909320600401929092555050565b6000828152600260205260408120600401549061156e9082908461223f565b60008060008060008060508810156115ed5760408051600081526127426020820152815160008051602061271b833981519152929181900390910190a160009550611a34565b6007805460010190819055600090815260066020526040902094506116128a8a6122a5565b80518654602080840151604080860151606087015163ffffffff9081166c01000000000000000000000000026fffffffff0000000000000000000000001992821668010000000000000000026bffffffff0000000000000000199583166401000000000267ffffffff00000000199390991663ffffffff1990981697909717919091169690961792909216939093171692909217885560808084015160018a015560a084015160028a015560c0909301516003890155517ffa7199a1000000000000000000000000000000000000000000000000000000008152602481018c9052604481018b9052606481018a9052600481019283528c5160848201528c5173__DogeTx________________________________9363fa7199a1938f938f938f938f939092839260a49091019188019080838360005b83811015611760578181015183820152602001611748565b50505050905090810190601f16801561178d5780820380516001836020036101000a031916815260200191505b509550505050505060806040518083038186803b1580156117ad57600080fd5b505af41580156117c1573d6000803e3d6000fd5b505050506040513d60808110156117d757600080fd5b5080516020820151604083015160609093015191965094509092509050831561182c576040805184815260208101869052815160008051602061271b833981519152929181900390910190a160009550611a34565b801561193557600854600160a060020a031663b3fb85bd6118558c8b8d01604f1981019061231e565b60075460405160e060020a63ffffffff851602815260248101879052604481018290523360648201819052306084830181905260a060048401908152855160a485015285518a9594829160c490910190602089019080838360005b838110156118c85781810151838201526020016118b0565b50505050905090810190601f1680156118f55780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b15801561191857600080fd5b505af115801561192c573d6000803e3d6000fd5b50505050611a2f565b600854600160a060020a031663b3fb85bd6119538c6000605061231e565b60075460405160e060020a63ffffffff8516028152602481018c9052604481018290523360648201819052306084830181905260a060048401908152855160a485015285518f9594829160c490910190602089019080838360005b838110156119c65781810151838201526020016119ae565b50505050905090810190601f1680156119f35780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b158015611a1657600080fd5b505af1158015611a2a573d6000803e3d6000fd5b505050505b600195505b5050505050949350505050565b60008282600301815181101515611a5457fe5b90602001015160f860020a900460f860020a0260f860020a90048383600201815181101515611a7f57fe5b90602001015160f860020a900460f860020a0260f860020a9004610100028484600101815181101515611aae57fe5b90602001015160f860020a900460f860020a0260f860020a900462010000028585815181101515611adb57fe5b90602001015160f860020a900460f860020a0260f860020a9004630100000002010101905092915050565b016020015190565b60009182526002602081815260409093206005015460e060020a92909302900a9091020490565b6000611cd2600280846040516020018082805190602001908083835b60208310611b705780518252601f199092019160209182019101611b51565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310611bd35780518252601f199092019160209182019101611bb4565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af1158015611c14573d6000803e3d6000fd5b5050506040513d6020811015611c2957600080fd5b50516040805160208181019390935281518082038401815290820191829052805190928291908401908083835b60208310611c755780518252601f199092019160209182019101611c56565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af1158015611cb6573d6000803e3d6000fd5b5050506040513d6020811015611ccb57600080fd5b505161237e565b92915050565b60008381808080805b8751851015611d47578785815181101515611cf857fe5b6020908102909101015193506002890692508260011415611d1d575082905084611d2a565b821515611d2a5750849050825b611d3482826123a9565b9550600289049850600185019450611ce1565b509398975050505050505050565b6000611d6082612417565b15611d985760408051868152614e34602082015281516000805160206126fb833981519152929181900390910190a150614e34611e53565b611da182612456565b1515611dda5760408051868152614e3e602082015281516000805160206126fb833981519152929181900390910190a150614e3e611e53565b611de382612492565b611dee868686611cd8565b14611e265760408051868152614e52602082015281516000805160206126fb833981519152929181900390910190a150614e52611e53565b604080518681526001602082015281516000805160206126fb833981519152929181900390910190a15060015b949350505050565b600954604080517f48aefc320000000000000000000000000000000000000000000000000000000081526004810184905290516000928392600160a060020a03909116916348aefc329160248082019260209290919082900301818787803b158015611ec657600080fd5b505af1158015611eda573d6000803e3d6000fd5b505050506040513d6020811015611ef057600080fd5b50511515611f2c5760408051888152614e3e602082015281516000805160206126fb833981519152929181900390910190a1614e3e91506112c3565b604080517fd2db98720000000000000000000000000000000000000000000000000000000081526000602482018190526004820192835286516044830152865173__DogeTx________________________________9363d2db9872938993928291606401906020860190808383885b83811015611fb3578181015183820152602001611f9b565b50505050905090810190601f168015611fe05780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b158015611ffe57600080fd5b505af4158015612012573d6000803e3d6000fd5b505050506040513d602081101561202857600080fd5b5051905080612038888888611cd8565b1461208e5780612049888888611cd8565b60408051918252519081900360200190a160408051888152614e52602082015281516000805160206126fb833981519152929181900390910190a1614e5291506112c3565b604080518881526001602082015281516000805160206126fb833981519152929181900390910190a15060019695505050505050565b60008281526002602052604090206004015463ffffffff82166120e98260088361223f565b60009485526002602052604090942060040193909355505050565b6000818152600260205260408120600401547801000000000000000000000000000000000000000000000000906801000000000000000002611356565b600060405184815282601c1a8482015382601d1a6001850182015382601e1a6002850182015382601f1a6003850182015351949350505050565b60050a90565b60006040518481528260101a848201538260111a600185018201538260121a600285018201538260131a600385018201538260141a600485018201538260151a600585018201538260161a600685018201538260171a600785018201538260181a600885018201538260191a6009850182015382601a1a600a850182015382601b1a600b850182015382601c1a600c850182015382601d1a600d850182015382601e1a600e850182015382601f1a600f850182015351949350505050565b60006040518481528260181a848201538260191a6001850182015382601a1a6002850182015382601b1a6003850182015382601c1a6004850182015382601d1a6005850182015382601e1a6006850182015382601f1a6007850182015351949350505050565b6122ad61269e565b6122b783836124a7565b63ffffffff1681526122c983836124db565b63ffffffff1660208201526122de838361250f565b63ffffffff1660408201526122f583836050612543565b6080820152612304838361259e565b60a082015261231383836125b1565b60c082015292915050565b6060600060608484039150816040519080825280601f01601f191660200182016040528015612357578160200160208202803883390190505b5090508160208201838760208a010160045afa151561237557600080fd5b95945050505050565b600060405160005b60208110156123a1578381601f031a81830153600101612386565b505192915050565b6000610c666002806123ba8661237e565b6123c38661237e565b604051602001808381526020018281526020019250505060405160208183030381529060405260405180828051906020019080838360208310611bd35780518252601f199092019160209182019101611bb4565b600354600090815b600681101561244c5781841415612439576001925061151e565b612442826113b3565b915060010161241f565b5060009392505050565b6000806124628361135d565b67ffffffffffffffff16905080151561247e576000915061248c565b82612488826125c4565b1491505b50919050565b60009081526002602052604090206003015490565b600081600484010151630100000081601b1a026201000082601a1a02016101008260191a02018160181a0191505092915050565b600081604c84010151630100000081601b1a026201000082601a1a02016101008260191a02018160181a0191505092915050565b600081605084010151630100000081601b1a026201000082601a1a02016101008260191a02018160181a0191505092915050565b6000611e536002612555868686612657565b60408051602080820193909352815180820384018152908201918290528051909282919084019080838360208310611c755780518252601f199092019160209182019101611c56565b81810160240151600090611e538161237e565b81810160440151600090611e538161237e565b60035460009060075b836125d78361135d565b67ffffffffffffffff161115612650575b6125f18161217b565b846125fb8461135d565b67ffffffffffffffff16031080156126135750600081115b1561262157600019016125e8565b60008061262e8484611b0e565b63ffffffff1663ffffffff1681526020019081526020016000205491506125cd565b5092915050565b60006040516020818486602089010160025afa151561267557600080fd5b51949350505050565b610120604051908101604052806009906020820280388339509192915050565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c08101919091529056004e64138cc499eb1adf9edff9ef69bd45c56ac4bfd307540952e4c9d51eab55c165bd72698b9ffcfb3c7cb4c7414e13225cabd57fb690e183ae8c01c8ec268ebd6080b2cdc7fc4777ed1e1066af5de1df45ae9186adbdb7aec21fde27a3e17e4ca165627a7a723058203271eea214e5a750a5365cd99ad92157347912d7fdab853ce95246b6191808dd0029";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<>();
        _addresses.put("32001", "0x7db54037e6fcfd7b6f67bcc4829fc0af91a237c0");
    }

    protected DogeRelay(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DogeRelay(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<StoreHeaderEventResponse> getStoreHeaderEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("StoreHeader", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<StoreHeaderEventResponse> responses = new ArrayList<StoreHeaderEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            StoreHeaderEventResponse typedResponse = new StoreHeaderEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.blockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<StoreHeaderEventResponse> storeHeaderEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("StoreHeader", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, StoreHeaderEventResponse>() {
            @Override
            public StoreHeaderEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                StoreHeaderEventResponse typedResponse = new StoreHeaderEventResponse();
                typedResponse.log = log;
                typedResponse.blockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<GetHeaderEventResponse> getGetHeaderEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("GetHeader", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<GetHeaderEventResponse> responses = new ArrayList<GetHeaderEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            GetHeaderEventResponse typedResponse = new GetHeaderEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.blockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<GetHeaderEventResponse> getHeaderEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("GetHeader", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, GetHeaderEventResponse>() {
            @Override
            public GetHeaderEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                GetHeaderEventResponse typedResponse = new GetHeaderEventResponse();
                typedResponse.log = log;
                typedResponse.blockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<VerifyTransactionEventResponse> getVerifyTransactionEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("VerifyTransaction", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<VerifyTransactionEventResponse> responses = new ArrayList<VerifyTransactionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VerifyTransactionEventResponse typedResponse = new VerifyTransactionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.txHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<VerifyTransactionEventResponse> verifyTransactionEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("VerifyTransaction", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, VerifyTransactionEventResponse>() {
            @Override
            public VerifyTransactionEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                VerifyTransactionEventResponse typedResponse = new VerifyTransactionEventResponse();
                typedResponse.log = log;
                typedResponse.txHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<RelayTransactionEventResponse> getRelayTransactionEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("RelayTransaction", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<RelayTransactionEventResponse> responses = new ArrayList<RelayTransactionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RelayTransactionEventResponse typedResponse = new RelayTransactionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.txHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RelayTransactionEventResponse> relayTransactionEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("RelayTransaction", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, RelayTransactionEventResponse>() {
            @Override
            public RelayTransactionEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                RelayTransactionEventResponse typedResponse = new RelayTransactionEventResponse();
                typedResponse.log = log;
                typedResponse.txHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.returnCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<String> scryptChecker() {
        final Function function = new Function("scryptChecker", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> superblocks() {
        final Function function = new Function("superblocks", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public static RemoteCall<DogeRelay> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger _network) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(_network)));
        return deployRemoteCall(DogeRelay.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<DogeRelay> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger _network) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(_network)));
        return deployRemoteCall(DogeRelay.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public RemoteCall<TransactionReceipt> setScryptChecker(String _scryptChecker) {
        final Function function = new Function(
                "setScryptChecker", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_scryptChecker)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setSuperblocks(String _claimManager) {
        final Function function = new Function(
                "setSuperblocks", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_claimManager)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setInitialParent(BigInteger _blockHash, BigInteger _height, BigInteger _chainWork) {
        final Function function = new Function(
                "setInitialParent", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_blockHash), 
                new org.web3j.abi.datatypes.generated.Uint64(_height), 
                new org.web3j.abi.datatypes.generated.Uint128(_chainWork)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> storeBlockHeader(byte[] _blockHeaderBytes, BigInteger _proposedScryptBlockHash) {
        final Function function = new Function(
                "storeBlockHeader", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(_blockHeaderBytes), 
                new org.web3j.abi.datatypes.generated.Uint256(_proposedScryptBlockHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> scryptVerified(byte[] _proposalId) {
        final Function function = new Function(
                "scryptVerified", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_proposalId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> scryptFailed(byte[] _proposalId) {
        final Function function = new Function(
                "scryptFailed", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_proposalId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> bulkStoreHeaders(byte[] _headersBytes, byte[] _hashesBytes, BigInteger count) {
        final Function function = new Function(
                "bulkStoreHeaders", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(_headersBytes), 
                new org.web3j.abi.datatypes.DynamicBytes(_hashesBytes), 
                new org.web3j.abi.datatypes.generated.Uint256(count)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> verifyTx(byte[] _txBytes, BigInteger _txIndex, List<BigInteger> _siblings, BigInteger _txBlockHash) {
        final Function function = new Function(
                "verifyTx", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(_txBytes), 
                new org.web3j.abi.datatypes.generated.Uint256(_txIndex), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(_siblings, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(_txBlockHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> verifyTx(byte[] _txBytes, BigInteger _txIndex, List<BigInteger> _siblings, byte[] _txBlockHeaderBytes, byte[] _txSuperblockId) {
        final Function function = new Function(
                "verifyTx", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(_txBytes), 
                new org.web3j.abi.datatypes.generated.Uint256(_txIndex), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(_siblings, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicBytes(_txBlockHeaderBytes), 
                new org.web3j.abi.datatypes.generated.Bytes32(_txSuperblockId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> relayTx(byte[] _txBytes, byte[] operatorPublicKeyHash, BigInteger _txIndex, List<BigInteger> _siblings, BigInteger _txBlockHash, String _targetContract) {
        final Function function = new Function(
                "relayTx", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(_txBytes), 
                new org.web3j.abi.datatypes.generated.Bytes20(operatorPublicKeyHash), 
                new org.web3j.abi.datatypes.generated.Uint256(_txIndex), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(_siblings, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(_txBlockHash), 
                new org.web3j.abi.datatypes.Address(_targetContract)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> relayTx(byte[] _txBytes, byte[] _operatorPublicKeyHash, BigInteger _txIndex, List<BigInteger> _txSiblings, byte[] _dogeBlockHeader, BigInteger _dogeBlockIndex, List<BigInteger> _dogeBlockSiblings, byte[] _superblockId, String _targetContract) {
        final Function function = new Function(
                "relayTx", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(_txBytes), 
                new org.web3j.abi.datatypes.generated.Bytes20(_operatorPublicKeyHash), 
                new org.web3j.abi.datatypes.generated.Uint256(_txIndex), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(_txSiblings, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicBytes(_dogeBlockHeader), 
                new org.web3j.abi.datatypes.generated.Uint256(_dogeBlockIndex), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(_dogeBlockSiblings, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Bytes32(_superblockId), 
                new org.web3j.abi.datatypes.Address(_targetContract)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<List> getBlockLocator() {
        final Function function = new Function("getBlockLocator", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray9<Uint256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<BigInteger> getBestBlockHeight() {
        final Function function = new Function("getBestBlockHeight", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getBestBlockHash() {
        final Function function = new Function("getBestBlockHash", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getVersion(BigInteger _blockHash) {
        final Function function = new Function("getVersion", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_blockHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public static DogeRelay load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DogeRelay(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static DogeRelay load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DogeRelay(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class StoreHeaderEventResponse {
        public Log log;

        public byte[] blockHash;

        public BigInteger returnCode;
    }

    public static class GetHeaderEventResponse {
        public Log log;

        public byte[] blockHash;

        public BigInteger returnCode;
    }

    public static class VerifyTransactionEventResponse {
        public Log log;

        public byte[] txHash;

        public BigInteger returnCode;
    }

    public static class RelayTransactionEventResponse {
        public Log log;

        public byte[] txHash;

        public BigInteger returnCode;
    }
}
